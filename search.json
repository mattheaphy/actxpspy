[
  {
    "objectID": "reference/TrxStats.html",
    "href": "reference/TrxStats.html",
    "title": "TrxStats",
    "section": "",
    "text": "trx_stats.TrxStats(self, expo, trx_types=None, percent_of=None, combine_trx=False, full_exposures_only=True, conf_int=False, conf_level=0.95, col_exposure='exposure')\nTransactions study summary class\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\nTypically, the TrxStats class constructor should not be called directly. The preferred method for creating a TrxStats object is to call the trx_stats() method on an ExposedDF object."
  },
  {
    "objectID": "reference/TrxStats.html#parameters",
    "href": "reference/TrxStats.html#parameters",
    "title": "TrxStats",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nexpo\nactxps.expose.ExposedDF\nAn exposed data frame class\nrequired\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property of expo will be used.\nNone\n\n\npercent_of\nlist | str\nA optional list containing column names in the data property of expo to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False, the results will contain output rows for each transaction type. If True, the results will contain aggregated experience across all transaction types.\nFalse\n\n\nfull_exposures_only\nbool\nIf True, partially exposed records will be ignored in the results.\nTrue\n\n\nconf_int\nbool\nIf True, the output will include confidence intervals around the observed utilization rate and any percent_of output columns.\nFalse\n\n\nconf_level\nfloat\nConfidence level for confidence intervals\n0.95\n\n\ncol_exposure\nstr\nName of the column in the data property of expo containing exposures\n'exposure'"
  },
  {
    "objectID": "reference/TrxStats.html#attributes",
    "href": "reference/TrxStats.html#attributes",
    "title": "TrxStats",
    "section": "Attributes",
    "text": "Attributes\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data framethat includes columns for any grouping variables and transaction types, plus the following: trx_n (the number of unique transactions), trx_amt (total transaction amount), trx_flag (the number of observation periods with non-zero transaction amounts), exposure (total exposures), avg_trx (mean transaction amount {trx_amt / trx_flag}), avg_all (mean transaction amount over all records {trx_amt / exposure}), trx_freq (transaction frequency when a transaction occurs {trx_n / trx_flag}), trx_utilization (transaction utilization per observation period {trx_flag / exposure}). If percent_of is provided, the results will also include the sum of any columns passed to percent_of with non-zero transactions (these columns include the suffix _w_trx. - The sum of any columns passed to percent_of), pct_of_{*}_w_trx (total transactions as a percentage of column {*}_w_trx), pct_of_{*}_all (total transactions as a percentage of column {*})."
  },
  {
    "objectID": "reference/TrxStats.html#notes",
    "href": "reference/TrxStats.html#notes",
    "title": "TrxStats",
    "section": "Notes",
    "text": "Notes\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure .data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property of expo containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nConfidence intervals\nIf conf_int is set to True, the output will contain lower and upper confidence interval limits for the observed utilization rate and any percent_of output columns. The confidence level is dictated by conf_level.\n\nIntervals for the utilization rate (trx_util) assume a binomial distribution.\nIntervals for transactions as a percentage of another column with non-zero transactions (pct_of_{*}_w_trx) are constructed using a normal distribution\nIntervals for transactions as a percentage of another column regardless of transaction utilization (pct_of_{*}_all) are calculated assuming that the aggregate distribution is normal with a mean equal to observed transactions and a variance equal to:\nVar(S) = E(N) * Var(X) + E(X)**2 * Var(N),\n\nWhere S is the aggregate transactions random variable, X is an individual transaction amount assumed to follow a normal distribution, and N is a binomial random variable for transaction utilization.\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\nAlternative class constructor\nTrxStats.from_DataFrame() can be used to coerce a data frame containing pre-aggregated experience into a TrxStats object. This is most useful for working with industry study data where individual exposure records are not available."
  },
  {
    "objectID": "reference/TrxStats.html#methods",
    "href": "reference/TrxStats.html#methods",
    "title": "TrxStats",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nfrom_DataFrame\nConvert a data frame containing aggregate transaction experience study\n\n\nplot\nPlot transaction study results\n\n\nplot_utilization_rates\nPlot transaction frequency and severity.\n\n\nsummary\nRe-summarize transaction experience data\n\n\ntable\nTabular transaction study summary\n\n\n\n\nfrom_DataFrame\ntrx_stats.TrxStats.from_DataFrame(data, conf_int=False, conf_level=0.95, col_trx_amt='trx_amt', col_trx_n='trx_n', col_trx_flag='trx_flag', col_exposure='exposure', col_percent_of=None, col_percent_of_w_trx=None, col_trx_amt_sq='trx_amt_sq', start_date=datetime(1900, 1, 1), end_date=None)\nConvert a data frame containing aggregate transaction experience study results to the TrxStats class.\nfrom_DataFrame() is most useful for working with aggregate summaries of experience that were not created by actxps where individual policy information is not available. After converting the data to the TrxStats class, summary() can be used to summarize data by any grouping variables, and plot() and table() are available for reporting.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA DataFrame containing aggregate transaction study results. See the Notes section for required columns that must be present.\nrequired\n\n\nconf_int\nbool\nIf True, future calls to summary() will include confidence intervals around the observed utilization rates and any percent_of output columns.\nFalse\n\n\nconf_level\nfloat\nConfidence level used for the Limited Fluctuation credibility method and confidence intervals.\n0.95\n\n\ncol_trx_amt\nstr\nName of the column in data containing transaction amounts.\n'trx_amt'\n\n\ncol_trx_n\nstr\nName of the column in data containing transaction counts.\n'trx_n'\n\n\ncol_trx_flag\nstr\nName of the column in data containing the number of exposure records with transactions.\n'trx_flag'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_percent_of\nstr\nName of the column in data containing a numeric variable to use in “percent of” calculations.\nNone\n\n\ncol_percent_of_w_trx\nstr\nName of the column in data containing a numeric variable to use in “percent of” calculations with transactions.\nNone\n\n\ncol_trx_amt_sq\nstr\nOnly required when col_percent_of is passed and conf_int is True. Name of the column in data containing squared transaction amounts.\n'trx_amt_sq'\n\n\nstart_date\ndatetime.datetime | int | str\nTransaction study start date\ndatetime(1900, 1, 1)\n\n\nend_date\ndatetime.datetime | int | str\nTransaction study end date\nNone\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nactxps.trx_stats.TrxStats\nA TrxStats object\n\n\n\n\n\nNotes\nAt a minimum, the following columns are required:\n\nTransaction amounts (trx_amt)\nTransaction counts (trx_n)\nThe number of exposure records with transactions (trx_flag). This number is not necessarily equal to transaction counts. If multiple transactions are allowed per exposure period, trx_flag will be less than trx_n.\nExposures (exposure)\n\nIf transaction amounts should be expressed as a percentage of another variable (i.e. to calculate utilization rates or actual-to-expected ratios), additional columns are required:\n\nA denominator “percent of” column. For example, the sum of account values.\nA denominator “percent of” column for exposure records with transactions. For example, the sum of account values across all records with non-zero transaction amounts.\n\nIf confidence intervals are desired and “percent of” columns are passed, an additional column for the sum of squared transaction amounts (trx_amt_sq) is also required.\nThe names in parentheses above are expected column names. If the data frame passed to from_DataFrame() uses different column names, these can be specified using the col_* arguments.\nstart_date, and end_date are optional arguments that are only used for printing the resulting TrxStats object.\nUnlike ExposedDF.trx_stats(), from_DataFrame() only permits a single transaction type and a single percent_of column.\n\n\nExamples\n\n# convert pre-aggregated experience into a TrxStats object\nimport actxps as xp\n\nagg_sim_dat = xp.load_agg_sim_dat()\ndat = xp.TrxStats.from_DataFrame(\n    agg_sim_dat,\n    col_exposure=\"n\",\n    col_trx_amt=\"wd\",\n    col_trx_n=\"wd_n\",\n    col_trx_flag=\"wd_flag\",\n    col_percent_of=\"av\",\n    col_percent_of_w_trx=\"av_w_wd\",\n    col_trx_amt_sq=\"wd_sq\",\n    start_date=2005, end_date=2019,\n    conf_int=True)\ndat\n\n# summary by policy year\ndat.summary('pol_yr')\n\nTransaction study results\n\nGroups: pol_yr\nStudy range: 2005 to 2019\nTransaction types: wd\nTransactions as % of: av\n\n\nA DataFrame: 15 x 21\n   pol_yr trx_type  trx_n  trx_flag   trx_amt  exposure    avg_trx    avg_all  \\\n0       1       wd  16942      7921  419763.0     19995  52.993688  20.993398   \n1       2       wd  16900      7923  440919.0     18434  55.650511  23.918791   \n2       3       wd  16679      7796  449349.0     16806  57.638404  26.737415   \n3       4       wd  16193      7575  440510.0     15266  58.153135  28.855627   \n4       5       wd  15353      7153  420462.0     13618  58.781211  30.875459   \n5       6       wd  14382      6708  411073.0     12067  61.281008  34.065882   \n6       7       wd  13248      6183  396732.0     10541  64.164968  37.637036   \n7       8       wd  12034      5603  369098.0      9130  65.875067  40.426944   \n8       9       wd  10461      4868  330507.0      7591  67.893796  43.539323   \n9      10       wd   8978      4155  290363.0      6185  69.882792  46.946322   \n\n   trx_freq  trx_util  ...    av_w_trx  pct_of_av_all  pct_of_av_w_trx  \\\n0  2.138871  0.396149  ...  10578610.0       0.015960         0.039680   \n1  2.133030  0.429804  ...  10632252.0       0.017660         0.041470   \n2  2.139430  0.463882  ...  10561119.0       0.019168         0.042547   \n3  2.137690  0.496201  ...  10343861.0       0.020150         0.042587   \n4  2.146372  0.525261  ...   9953286.0       0.020914         0.042244   \n5  2.144007  0.555896  ...   9516448.0       0.022355         0.043196   \n6  2.142649  0.586567  ...   8889312.0       0.024132         0.044630   \n7  2.147778  0.613691  ...   8189855.0       0.025198         0.045068   \n8  2.148932  0.641286  ...   7296740.0       0.026223         0.045295   \n9  2.160770  0.671787  ...   6325646.0       0.027570         0.045903   \n\n   trx_util_lower  trx_util_upper   trx_amt_sq  pct_of_av_w_trx_lower  \\\n0        0.389397        0.402951   79706383.0               0.038276   \n1        0.422643        0.436964   96920305.0               0.039902   \n2        0.456325        0.471439   92757953.0               0.041030   \n3        0.488275        0.504127   96528006.0               0.040991   \n4        0.516889        0.533632   96744946.0               0.040572   \n5        0.547029        0.564763   92206797.0               0.041510   \n6        0.577175        0.595959  100055006.0               0.042726   \n7        0.603724        0.623658   92940464.0               0.043085   \n8        0.630483        0.652088   80290185.0               0.043252   \n9        0.659984        0.683428   75062381.0               0.043609   \n\n   pct_of_av_w_trx_upper  pct_of_av_all_lower  pct_of_av_all_upper  \n0               0.041085             0.015332             0.016587  \n1               0.043038             0.016931             0.018390  \n2               0.044065             0.018417             0.019919  \n3               0.044182             0.019329             0.020971  \n4               0.043915             0.020021             0.021806  \n5               0.044882             0.021412             0.023297  \n6               0.046535             0.023032             0.025232  \n7               0.047050             0.024016             0.026380  \n8               0.047338             0.024961             0.027486  \n9               0.048196             0.026112             0.029029  \n\n[10 rows x 21 columns]\n\n\n\n\nSee Also\nExposedDF.trx_stats() for information on how TrxStats objects are typically created from individual exposure records.\n\n\n\nplot\ntrx_stats.TrxStats.plot(x=None, y='trx_util', color=None, facets=None, mapping=None, scales='fixed', geoms='lines', y_labels=lambda : [f'{v * 100}%' for v in l], y_log10=False, conf_int_bars=False)\nPlot transaction study results\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nstr\nA column name in data to use as the x variable. If None, x will default to the first grouping variable. If there are no grouping variables, x will be set to “All”.\nNone\n\n\ny\nstr\nA column name in data to use as the y variable.\n'trx_util'\n\n\ncolor\nstr\nA column name in data to use as the color and fill variables. If None, y will default to the second grouping variable. If there are less than two grouping variables, the plot will not use a color aesthetic.\nNone\n\n\nfacets\nlist | str\nFaceting variables in data passed to plotnine.facet_wrap(). If None, grouping variables 3+ will be used (assuming there are more than two grouping variables).\nNone\n\n\nmapping\nplotnine.aes\nAesthetic mapping added to plotnine.ggplot(). NOTE: If mapping is supplied, the x, y, and color arguments will be ignored.\nNone\n\n\nscales\nstr\nThe scales argument passed to plotnine.facet_wrap().\n'fixed'\n\n\ngeoms\n‘lines’, ‘bars’, ’points\nType of geometry. If “lines” is passed, the plot will display lines and points. If “bars”, the plot will display bars. If “points”, the plot will display points only.\n'lines'\n\n\ny_labels\ncallable\nLabel function passed to plotnine.scale_y_continuous().\nlambda l: [f\"{v * 100:.1f}%\" for v in l]\n\n\ny_log10\nbool\nIf True, the y-axes are plotted on a log-10 scale.\nFalse\n\n\nconf_int_bars\nbool\nIf True, confidence interval error bars are included in the plot. This option is only available for utilization rates and any pct_of columns.\nFalse\n\n\n\n\n\nNotes\nIf no aesthetic map is supplied, the plot will use the first grouping variable in the groups property on the x axis and trx_util on the y axis. In addition, the second grouping variable in groups will be used for color and fill.\nIf no faceting variables are supplied, the plot will use grouping variables 3 and up as facets. These variables are passed into plotnine.facet_wrap().\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status=\"Surrender\")\nexpo.add_transactions(withdrawals)\n\ntrx_res = (expo.groupby('pol_yr').\n           trx_stats(percent_of='premium'))\n\ntrx_res.plot()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nplot_utilization_rates\ntrx_stats.TrxStats.plot_utilization_rates(**kwargs)\nPlot transaction frequency and severity.\nFrequency is represented by utilization rates (trx_util). Severity is represented by transaction amounts as a percentage of one or more other columns in the data ({*}_w_trx). All severity series begin with the prefix “pct_of_” and end with the suffix “_w_trx”. The suffix refers to the fact that the denominator only includes records with non-zero transactions. Severity series are based on column names passed to the percent_of argument in trx_stats(). If no “percentage of” columns exist, this function will only plot utilization rates.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n**kwargs\n\nAdditional arguments passed to plot()\n{}\n\n\n\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\naccount_vals = xp.load_account_vals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status=\"Surrender\")\nexpo.add_transactions(withdrawals)\nexpo.data = expo.data.merge(account_vals, how='left',\n                            on=[\"pol_num\", \"pol_date_yr\"])        \n\ntrx_res = (expo.groupby('pol_yr').\n           trx_stats(percent_of='av_anniv', combine_trx=True))\n\ntrx_res.plot_utilization_rates()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nsummary\ntrx_stats.TrxStats.summary(*by)\nRe-summarize transaction experience data\nRe-summarize the data while retaining any grouping variables passed to the *by argument.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables in the re-summarized object. Passing nothing is acceptable and will produce a 1-row experience summary.\n()\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nactxps.trx_stats.TrxStats\nA new TrxStats object with rows for all the unique groups in *by\n\n\n\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status=\"Surrender\")\nexpo.add_transactions(withdrawals)\n\ntrx_res = (expo.groupby('inc_guar', 'pol_yr').\n           trx_stats(percent_of='premium'))\ntrx_res.summary('inc_guar')\n\nTransaction study results\n\nGroups: inc_guar\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\nTransactions as % of: premium\n\n\nA DataFrame: 4 x 14\n   inc_guar trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx  \\\n0     False     Base  52939.0     24703   952629.0   48938.0  38.563292   \n1     False    Rider      0.0         0        0.0   48938.0        NaN   \n2      True     Base   7561.0      3521   141270.0   75235.0  40.122124   \n3      True    Rider  77321.0     35941  2842729.0   75235.0  79.094321   \n\n     avg_all  trx_freq  trx_util      premium  premium_w_trx  \\\n0  19.466039  2.143019  0.504782   65442415.0     33915201.0   \n1   0.000000       NaN  0.000000   65442415.0            0.0   \n2   1.877716  2.147401  0.046800  100927712.0      4940490.0   \n3  37.784661  2.151331  0.477716  100927712.0     47887716.0   \n\n   pct_of_premium_all  pct_of_premium_w_trx  \n0            0.014557              0.028089  \n1            0.000000                   NaN  \n2            0.001400              0.028594  \n3            0.028166              0.059362  \n\n\n\n\n\ntable\ntrx_stats.TrxStats.table(fontsize=100, decimals=1, colorful=True, color_util='GnBu', color_pct_of='RdBu', show_conf_int=False, decimals_amt=0, suffix_amt=False, **rename_cols)\nTabular transaction study summary\nConvert transaction study results to a presentation-friendly format.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfontsize\nint\nFont size percentage multiplier\n100\n\n\ndecimals\nint\nNumber of decimals to display for percentages\n1\n\n\ncolorful\nbool\nIf True, color will be added to the the observed utilization rate and “percentage of” columns.\nTrue\n\n\ncolor_util\nstr\nColorBrewer palette used for the observed utilization rate.\n'GnBu'\n\n\ncolor_pct_of\nstr\nColorBrewer palette used for “percentage of” columns.\n'RdBu'\n\n\nshow_conf_int\nbool\nIf True any confidence intervals will be displayed.\nFalse\n\n\ndecimals_amt\nint\nNumber of decimals to display for amount columns (transaction counts, total transactions, and average transactions)\n0\n\n\nsuffix_amt\nbool\nThis argument has the same meaning as the compact argument in great_tables.gt.GT.fmt_number() for amount columns. If False, no scaling or suffixing are applied to amount columns. If True, all amount columns are automatically scaled and suffixed by “K” (thousands), “M” (millions), “B” (billions), or “T” (trillions).\nFalse\n\n\nrename_cols\nstr\nKey-value pairs where keys are column names and values are labels that will appear on the output table. This parameter is useful for renaming grouping variables that will appear under their original variable names if left unchanged.\nNone\n\n\n\n\n\nNotes\nFurther customizations can be added using great_tables.gt.GT methods. See the great_tables package documentation for more information.\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.great_tables.gt.great_tables.gt.GT\nA formatted HTML table\n\n\n\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status=\"Surrender\")\nexpo.add_transactions(withdrawals)\n\ntrx_res = (expo.groupby('pol_yr').\n           trx_stats(percent_of='premium'))\n\ntrx_res.table()\n\n\n\n\n\n  \n    Transaction Study Results\n  \n  \n    Transaction types: Base, Rider\n  \n\n  \n  \n    Counts\n  \n  Amount\n  \n    Averages\n  \n  Frequency\n  Utilization\n  \n    % of premium\n  \n\n\n  Total\n  Periods\n  w/ trx\n  all\n  w/ trx\n  all\n\n\n\n  Base\n  1\n  7,447\n  3,514\n  119,877\n  34\n  6\n  2.1\n  19.0%\n  2.5%\n  0.5%\n\n\n  2\n  7,274\n  3,422\n  116,967\n  34\n  7\n  2.1\n  20.2%\n  2.5%\n  0.5%\n\n\n  3\n  7,061\n  3,309\n  116,357\n  35\n  8\n  2.1\n  21.5%\n  2.6%\n  0.6%\n\n\n  4\n  6,596\n  3,080\n  114,987\n  37\n  8\n  2.1\n  22.3%\n  2.8%\n  0.6%\n\n\n  5\n  6,093\n  2,847\n  109,918\n  39\n  9\n  2.1\n  23.3%\n  2.8%\n  0.7%\n\n\n  6\n  5,543\n  2,572\n  97,455\n  38\n  9\n  2.2\n  24.0%\n  2.8%\n  0.7%\n\n\n  7\n  4,921\n  2,297\n  92,797\n  40\n  10\n  2.1\n  24.7%\n  2.9%\n  0.7%\n\n\n  8\n  4,200\n  1,964\n  85,740\n  44\n  11\n  2.1\n  25.2%\n  3.1%\n  0.8%\n\n\n  9\n  3,579\n  1,655\n  70,715\n  43\n  11\n  2.2\n  26.0%\n  3.0%\n  0.8%\n\n\n  10\n  3,004\n  1,376\n  57,935\n  42\n  11\n  2.2\n  27.2%\n  3.0%\n  0.8%\n\n\n  11\n  2,428\n  1,115\n  53,809\n  48\n  14\n  2.2\n  28.6%\n  3.4%\n  1.0%\n\n\n  12\n  1,320\n  605\n  30,425\n  50\n  13\n  2.2\n  26.7%\n  3.2%\n  0.9%\n\n\n  13\n  700\n  319\n  17,809\n  56\n  14\n  2.2\n  24.9%\n  3.3%\n  0.9%\n\n\n  14\n  315\n  141\n  8,883\n  63\n  15\n  2.2\n  24.6%\n  3.6%\n  1.0%\n\n\n  15\n  19\n  8\n  225\n  28\n  11\n  2.4\n  38.1%\n  3.0%\n  1.0%\n\n\n  Rider\n  1\n  8,077\n  3,778\n  265,312\n  70\n  14\n  2.1\n  20.4%\n  5.3%\n  1.1%\n\n\n  2\n  8,232\n  3,834\n  288,114\n  75\n  17\n  2.1\n  22.6%\n  5.7%\n  1.3%\n\n\n  3\n  8,204\n  3,817\n  294,795\n  77\n  19\n  2.1\n  24.8%\n  5.8%\n  1.4%\n\n\n  4\n  7,960\n  3,715\n  283,763\n  76\n  21\n  2.1\n  26.9%\n  5.8%\n  1.5%\n\n\n  5\n  7,536\n  3,521\n  264,939\n  75\n  22\n  2.1\n  28.8%\n  5.7%\n  1.6%\n\n\n  6\n  7,118\n  3,342\n  264,516\n  79\n  25\n  2.1\n  31.2%\n  5.9%\n  1.8%\n\n\n  7\n  6,631\n  3,097\n  251,502\n  81\n  27\n  2.1\n  33.3%\n  6.1%\n  2.0%\n\n\n  8\n  5,952\n  2,773\n  226,770\n  82\n  29\n  2.1\n  35.6%\n  6.1%\n  2.1%\n\n\n  9\n  5,173\n  2,406\n  204,000\n  85\n  32\n  2.2\n  37.8%\n  6.3%\n  2.3%\n\n\n  10\n  4,331\n  1,998\n  174,457\n  87\n  35\n  2.2\n  39.5%\n  6.5%\n  2.5%\n\n\n  11\n  3,468\n  1,597\n  139,620\n  87\n  36\n  2.2\n  41.0%\n  6.5%\n  2.6%\n\n\n  12\n  2,398\n  1,076\n  90,469\n  84\n  40\n  2.2\n  47.4%\n  6.2%\n  2.8%\n\n\n  13\n  1,486\n  662\n  62,880\n  95\n  49\n  2.2\n  51.7%\n  6.7%\n  3.2%\n\n\n  14\n  736\n  316\n  30,648\n  97\n  53\n  2.3\n  55.1%\n  7.1%\n  3.6%\n\n\n  15\n  19\n  9\n  944\n  105\n  45\n  2.1\n  42.9%\n  9.0%\n  4.2%\n\n\n  \n  \n  \n    Study range: 1900-01-01 to 2019-12-31"
  },
  {
    "objectID": "reference/SplitExposedDF.html",
    "href": "reference/SplitExposedDF.html",
    "title": "SplitExposedDF",
    "section": "",
    "text": "expose_split.SplitExposedDF(self, expo)\nSplit calendar exposures by policy year\nSplit calendar period exposures that cross a policy anniversary into a pre-anniversary record and a post-anniversary record."
  },
  {
    "objectID": "reference/SplitExposedDF.html#parameters",
    "href": "reference/SplitExposedDF.html#parameters",
    "title": "SplitExposedDF",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nexpo\nactxps.ExposedDF\nAn exposure data frame class with calendar-based exposure periods\nrequired"
  },
  {
    "objectID": "reference/SplitExposedDF.html#notes",
    "href": "reference/SplitExposedDF.html#notes",
    "title": "SplitExposedDF",
    "section": "Notes",
    "text": "Notes\nThe ExposedDF must have calendar year, quarter, month, or week exposure records. Calendar year exposures are created by passing cal_expo = True to ExposedDF (or alternatively, with the class methods ExposedDF.expose_cy(), ExposedDF.expose_cq(), ExposedDF.expose_cm(), and ExposedDF.expose_cw()).\nAfter splitting, the resulting data will contain both calendar exposures and policy year exposures. These columns will be named ‘exposure_cal’ and ‘exposure_pol’, respectively. Calendar exposures will be in the original units passed to SplitExposedDF(). Policy exposures will always be expressed in years. Downstream functions like exp_stats() and exp_shiny() will require clarification as to which exposure basis should be used to summarize results.\nAfter splitting, the column ‘pol_yr’ will contain policy years."
  },
  {
    "objectID": "reference/SplitExposedDF.html#examples",
    "href": "reference/SplitExposedDF.html#examples",
    "title": "SplitExposedDF",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\ntoy_census = xp.load_toy_census()\nexpo = xp.ExposedDF.expose_cy(toy_census, \"2022-12-31\")\nxp.SplitExposedDF(expo)\n\nExposure data\n\nExposure type: split_year\nTarget status: None\nStudy range: 1900-01-01 to 2022-12-31\n\nA DataFrame: 58 x 9\n   pol_num  status issue_date term_date     cal_yr cal_yr_end  pol_yr  \\\n0        1  Active 2010-01-01       NaT 2010-01-01 2010-12-31       1   \n1        1  Active 2010-01-01       NaT 2011-01-01 2011-12-31       2   \n2        1  Active 2010-01-01       NaT 2012-01-01 2012-12-31       3   \n3        1  Active 2010-01-01       NaT 2013-01-01 2013-12-31       4   \n4        1  Active 2010-01-01       NaT 2014-01-01 2014-12-31       5   \n5        1  Active 2010-01-01       NaT 2015-01-01 2015-12-31       6   \n6        1  Active 2010-01-01       NaT 2016-01-01 2016-12-31       7   \n7        1  Active 2010-01-01       NaT 2017-01-01 2017-12-31       8   \n8        1  Active 2010-01-01       NaT 2018-01-01 2018-12-31       9   \n9        1  Active 2010-01-01       NaT 2019-01-01 2019-12-31      10   \n\n   exposure_pol  exposure_cal  \n0           1.0           1.0  \n1           1.0           1.0  \n2           1.0           1.0  \n3           1.0           1.0  \n4           1.0           1.0  \n5           1.0           1.0  \n6           1.0           1.0  \n7           1.0           1.0  \n8           1.0           1.0  \n9           1.0           1.0"
  },
  {
    "objectID": "reference/SplitExposedDF.html#see-also",
    "href": "reference/SplitExposedDF.html#see-also",
    "title": "SplitExposedDF",
    "section": "See Also",
    "text": "See Also\nExposedDF() for more information on exposure data."
  },
  {
    "objectID": "reference/qx_iamb.html",
    "href": "reference/qx_iamb.html",
    "title": "load_qx_iamb",
    "section": "",
    "text": "datasets.load_qx_iamb()\n2012 Individual Annuity Mortality Table\nMortality rates from the 2012 Individual Annuity Mortality Basic (IAMB) Table and Projection Scale G2.\nA data frame with 242 rows and 3 columns:\n\nage - attained age\nqx - mortality rate\ngender - Female or Male\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame\n\n\n\n\n\n\n\n\nmort.soa.org\n2012 Individual Annuity Reserving Table"
  },
  {
    "objectID": "reference/qx_iamb.html#returns",
    "href": "reference/qx_iamb.html#returns",
    "title": "load_qx_iamb",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/qx_iamb.html#references",
    "href": "reference/qx_iamb.html#references",
    "title": "load_qx_iamb",
    "section": "",
    "text": "mort.soa.org\n2012 Individual Annuity Reserving Table"
  },
  {
    "objectID": "reference/qx_iamb.html#returns-1",
    "href": "reference/qx_iamb.html#returns-1",
    "title": "load_qx_iamb",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/qx_iamb.html#references-1",
    "href": "reference/qx_iamb.html#references-1",
    "title": "load_qx_iamb",
    "section": "References",
    "text": "References\n\nmort.soa.org\n2012 Individual Annuity Reserving Table"
  },
  {
    "objectID": "reference/pol_wk.html",
    "href": "reference/pol_wk.html",
    "title": "pol_wk",
    "section": "",
    "text": "dates.pol_wk(dates, issue_date)\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_wk.html#parameters",
    "href": "reference/pol_wk.html#parameters",
    "title": "pol_wk",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_wk.html#returns",
    "href": "reference/pol_wk.html#returns",
    "title": "pol_wk",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_wk.html#see-also",
    "href": "reference/pol_wk.html#see-also",
    "title": "pol_wk",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/pol_mth.html",
    "href": "reference/pol_mth.html",
    "title": "pol_mth",
    "section": "",
    "text": "dates.pol_mth(dates, issue_date)\nCalculate policy months\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_mth.html#parameters",
    "href": "reference/pol_mth.html#parameters",
    "title": "pol_mth",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_mth.html#returns",
    "href": "reference/pol_mth.html#returns",
    "title": "pol_mth",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_mth.html#see-also",
    "href": "reference/pol_mth.html#see-also",
    "title": "pol_mth",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/pol_durations.html",
    "href": "reference/pol_durations.html",
    "title": "pol_interval",
    "section": "",
    "text": "dates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks."
  },
  {
    "objectID": "reference/pol_durations.html#parameters",
    "href": "reference/pol_durations.html#parameters",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nPolicy duration length\n'year'"
  },
  {
    "objectID": "reference/pol_durations.html#returns",
    "href": "reference/pol_durations.html#returns",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also",
    "href": "reference/pol_durations.html#see-also",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_yr, pol_qtr, pol_mth, pol_wk"
  },
  {
    "objectID": "reference/pol_durations.html#examples",
    "href": "reference/pol_durations.html#examples",
    "title": "pol_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.pol_interval(['2024-05-01', '2024-02-01'], \n                ['2008-03-14', '2008-03-14'], \n                'year')\n\narray([17, 16])"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-1",
    "href": "reference/pol_durations.html#parameters-1",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-1",
    "href": "reference/pol_durations.html#returns-1",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-1",
    "href": "reference/pol_durations.html#see-also-1",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_durations.html#examples-1",
    "href": "reference/pol_durations.html#examples-1",
    "title": "pol_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.pol_yr(['2024-05-01', '2024-02-01'], \n          ['2008-03-14', '2008-03-14'])\n\narray([17, 16])"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-2",
    "href": "reference/pol_durations.html#parameters-2",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-2",
    "href": "reference/pol_durations.html#returns-2",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-2",
    "href": "reference/pol_durations.html#see-also-2",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_durations.html#examples-2",
    "href": "reference/pol_durations.html#examples-2",
    "title": "pol_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.pol_qtr(['2024-05-01', '2024-02-01'], \n           ['2008-03-14', '2008-03-14'])\n\narray([65, 64])"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-3",
    "href": "reference/pol_durations.html#parameters-3",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-3",
    "href": "reference/pol_durations.html#returns-3",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-3",
    "href": "reference/pol_durations.html#see-also-3",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_durations.html#examples-3",
    "href": "reference/pol_durations.html#examples-3",
    "title": "pol_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.pol_mth(['2024-05-01', '2024-02-01'], \n           ['2008-03-14', '2008-03-14'])\n\narray([194, 191])"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-4",
    "href": "reference/pol_durations.html#parameters-4",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-4",
    "href": "reference/pol_durations.html#returns-4",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-4",
    "href": "reference/pol_durations.html#see-also-4",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_durations.html#examples-4",
    "href": "reference/pol_durations.html#examples-4",
    "title": "pol_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.pol_wk(['2024-05-01', '2024-02-01'], \n          ['2008-03-14', '2008-03-14'])\n\narray([842, 829], dtype=int64)"
  },
  {
    "objectID": "reference/load_toy_census.html",
    "href": "reference/load_toy_census.html",
    "title": "load_toy_census",
    "section": "",
    "text": "datasets.load_toy_census()\nToy policy census data\nA tiny dataset containing 3 policies: one active, one terminated due to death, and one terminated due to surrender.\nA data frame with 3 rows and 4 columns:\n- `pol_num` = policy number\n- `status` = policy status\n- `issue_date` = issue date\n- `term_date` = termination date\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/load_toy_census.html#returns",
    "href": "reference/load_toy_census.html#returns",
    "title": "load_toy_census",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/load_qx_iamb.html",
    "href": "reference/load_qx_iamb.html",
    "title": "load_qx_iamb",
    "section": "",
    "text": "datasets.load_qx_iamb()"
  },
  {
    "objectID": "reference/load_qx_iamb.html#returns",
    "href": "reference/load_qx_iamb.html#returns",
    "title": "load_qx_iamb",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/load_qx_iamb.html#references",
    "href": "reference/load_qx_iamb.html#references",
    "title": "load_qx_iamb",
    "section": "References",
    "text": "References\n\nhttps://mort.soa.org/\nhttps://www.actuary.org/sites/default/files/files/publications/Payout_Annuity_Report_09-28-11.pdf"
  },
  {
    "objectID": "reference/load_account_vals.html",
    "href": "reference/load_account_vals.html",
    "title": "load_account_vals",
    "section": "",
    "text": "load_account_vals\ndatasets.load_account_vals()"
  },
  {
    "objectID": "reference/frac_durations.html",
    "href": "reference/frac_durations.html",
    "title": "frac_interval",
    "section": "",
    "text": "dates.frac_interval(start, end, dur_length)\nCalculate fractional years, quarters, months, or weeks between two dates"
  },
  {
    "objectID": "reference/frac_durations.html#parameters",
    "href": "reference/frac_durations.html#parameters",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nDuration length\n'year'"
  },
  {
    "objectID": "reference/frac_durations.html#returns",
    "href": "reference/frac_durations.html#returns",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also",
    "href": "reference/frac_durations.html#see-also",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_yr, frac_qtr, frac_mth, frac_wk"
  },
  {
    "objectID": "reference/frac_durations.html#examples",
    "href": "reference/frac_durations.html#examples",
    "title": "frac_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.frac_interval(['2008-03-14', '2008-03-14'],\n                 ['2024-05-01', '2024-02-01'], \n                 'year')\n\narray([16.13150685, 15.8852459 ])"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-1",
    "href": "reference/frac_durations.html#parameters-1",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-1",
    "href": "reference/frac_durations.html#returns-1",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-1",
    "href": "reference/frac_durations.html#see-also-1",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/frac_durations.html#examples-1",
    "href": "reference/frac_durations.html#examples-1",
    "title": "frac_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.frac_yr(['2008-03-14', '2008-03-14'],\n           ['2024-05-01', '2024-02-01'])\n\narray([16.13150685, 15.8852459 ])"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-2",
    "href": "reference/frac_durations.html#parameters-2",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-2",
    "href": "reference/frac_durations.html#returns-2",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-2",
    "href": "reference/frac_durations.html#see-also-2",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/frac_durations.html#examples-2",
    "href": "reference/frac_durations.html#examples-2",
    "title": "frac_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.frac_qtr(['2008-03-14', '2008-03-14'],\n            ['2024-05-01', '2024-02-01'])\n\narray([64.52173913, 63.53846154])"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-3",
    "href": "reference/frac_durations.html#parameters-3",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-3",
    "href": "reference/frac_durations.html#returns-3",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-3",
    "href": "reference/frac_durations.html#see-also-3",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/frac_durations.html#examples-3",
    "href": "reference/frac_durations.html#examples-3",
    "title": "frac_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.frac_mth(['2008-03-14', '2008-03-14'],\n            ['2024-05-01', '2024-02-01'])\n\narray([193.56666667, 190.58064516])"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-4",
    "href": "reference/frac_durations.html#parameters-4",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-4",
    "href": "reference/frac_durations.html#returns-4",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-4",
    "href": "reference/frac_durations.html#see-also-4",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/frac_durations.html#examples-4",
    "href": "reference/frac_durations.html#examples-4",
    "title": "frac_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.frac_wk(['2008-03-14', '2008-03-14'],\n           ['2024-05-01', '2024-02-01'])\n\narray([841.71428571, 828.85714286])"
  },
  {
    "objectID": "reference/exp_shiny.html",
    "href": "reference/exp_shiny.html",
    "title": "exp_shiny",
    "section": "",
    "text": "exp_shiny.exp_shiny(self, predictors=None, expected=None, distinct_max=25, title=None, credibility=True, conf_level=0.95, cred_r=0.05, bootswatch_theme=None, col_exposure='exposure')\nInteractively explore experience data\nLaunch a Shiny application to interactively explore drivers of experience."
  },
  {
    "objectID": "reference/exp_shiny.html#parameters",
    "href": "reference/exp_shiny.html#parameters",
    "title": "exp_shiny",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\ntitle\nstr\nTitle of the Shiny app. If no title is provided, a descriptive title will be generated based on attributes of the ExposedDF object.\nNone\n\n\ncredibility\nbool\nIf True, future calls to summary() will include partial credibility weights and credibility-weighted termination rates.\nFalse\n\n\nconf_level\nfloat\nConfidence level used for the Limited Fluctuation credibility method and confidence intervals.\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method.\n0.05\n\n\nbootswatch_theme\nstr\nThe name of a preset bootswatch theme passed to shinyswatch.get_theme.\nNone\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures. This input is only used to clarify the exposure basis when the ExposedDF is also a SplitExposedDF object. For more information on split exposures, see ExposedDF.expose_split().\n'exposure'"
  },
  {
    "objectID": "reference/exp_shiny.html#notes",
    "href": "reference/exp_shiny.html#notes",
    "title": "exp_shiny",
    "section": "Notes",
    "text": "Notes\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets organized by data type for all variables passed to the predictors argument.\nAt the top of the sidebar, information is shown on the percentage of records remaining after applying filters. A description of all active filters is also provided.\nThe top of the sidebar also includes a “play / pause” switch that can pause reactivity of the application. Pausing is a good option when multiple changes are made in quick succession, especially when the underlying data set is large.\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box includes a toggle to switch between termination studies and transaction studies (if available). Different options are available for each study type.\nTermination studies\nThe expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies\nThe transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\nOutput\nPlot\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing: activate to plot loess curves\nConfidence intervals: If available, add error bars for confidence intervals around the selected y variable\nFree y Scales: activate to enable separate y scales in each plot\nLog y-axis: activate to plot all y-axes on a log-10 scale\n\nThe gear icon above the plot contains a pop-up menu that can be used to change the size of the plot for exporting.\nTable\nThe gear icon above the table contains a pop-up menu that can be used to change the appearance of the table:\n\nThe “Confidence intervals” and “Credibility-weighted termination rates” switches add these outputs to the table. These values are hidden as a default to prevent over-crowding.\nThe “Include color scales” switch disables or re-enables conditional color formatting.\nThe “Decimals” slider controls the number of decimals displayed for percentage fields.\nThe “Font size multiple” slider impacts the table’s font size\n\nExport\nThis pop-up menu contains options for saving summarized experience data or the plot. Data is saved as a CSV file. The plot is saved as a png file."
  },
  {
    "objectID": "reference/exp_shiny.html#examples",
    "href": "reference/exp_shiny.html#examples",
    "title": "exp_shiny",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\naccount_vals = xp.load_account_vals()\n\nexpo = xp.ExposedDF(census_dat, \"2019-12-31\",\n                    target_status = \"Surrender\")\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10),\n                                [.2, .15], np.repeat(0.05, 3)))\nexpo.data['expected_1'] = expected_table[expo.data.pol_yr - 1]\nexpo.data['expected_2'] = np.where(expo.data.inc_guar, 0.015, 0.03)\nexpo.add_transactions(withdrawals)\nexpo.data = expo.data.merge(account_vals, how='left',\n                            on=[\"pol_num\", \"pol_date_yr\"])\n\napp = expo.exp_shiny(expected=['expected_1', 'expected_2'])"
  },
  {
    "objectID": "reference/ExposedDF.html",
    "href": "reference/ExposedDF.html",
    "title": "ExposedDF",
    "section": "",
    "text": "expose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records."
  },
  {
    "objectID": "reference/ExposedDF.html#parameters",
    "href": "reference/ExposedDF.html#parameters",
    "title": "ExposedDF",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code. If None, the most common status is assumed.\nNone"
  },
  {
    "objectID": "reference/ExposedDF.html#attributes",
    "href": "reference/ExposedDF.html#attributes",
    "title": "ExposedDF",
    "section": "Attributes",
    "text": "Attributes\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length, default_status\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method."
  },
  {
    "objectID": "reference/ExposedDF.html#notes",
    "href": "reference/ExposedDF.html#notes",
    "title": "ExposedDF",
    "section": "Notes",
    "text": "Notes\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the most common status will be assumed.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object."
  },
  {
    "objectID": "reference/ExposedDF.html#references",
    "href": "reference/ExposedDF.html#references",
    "title": "ExposedDF",
    "section": "References",
    "text": "References\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf"
  },
  {
    "objectID": "reference/ExposedDF.html#examples",
    "href": "reference/ExposedDF.html#examples",
    "title": "ExposedDF",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\n\nxp.ExposedDF(xp.load_toy_census(), \"2020-12-31\", \n             target_status='Surrender')\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2020-12-31\n\nA DataFrame: 33 x 8\n   pol_num  status issue_date term_date  pol_yr pol_date_yr pol_date_yr_end  \\\n0        1  Active 2010-01-01       NaT       1  2010-01-01      2010-12-31   \n1        1  Active 2010-01-01       NaT       2  2011-01-01      2011-12-31   \n2        1  Active 2010-01-01       NaT       3  2012-01-01      2012-12-31   \n3        1  Active 2010-01-01       NaT       4  2013-01-01      2013-12-31   \n4        1  Active 2010-01-01       NaT       5  2014-01-01      2014-12-31   \n5        1  Active 2010-01-01       NaT       6  2015-01-01      2015-12-31   \n6        1  Active 2010-01-01       NaT       7  2016-01-01      2016-12-31   \n7        1  Active 2010-01-01       NaT       8  2017-01-01      2017-12-31   \n8        1  Active 2010-01-01       NaT       9  2018-01-01      2018-12-31   \n9        1  Active 2010-01-01       NaT      10  2019-01-01      2019-12-31   \n\n   exposure  \n0       1.0  \n1       1.0  \n2       1.0  \n3       1.0  \n4       1.0  \n5       1.0  \n6       1.0  \n7       1.0  \n8       1.0  \n9       1.0"
  },
  {
    "objectID": "reference/ExposedDF.html#methods",
    "href": "reference/ExposedDF.html#methods",
    "title": "ExposedDF",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nexpose_split\nSplit calendar exposures by policy year\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\nadd_transactions\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\nNotes\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\nA DataFrame: 141,252 x 19\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \\\n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000   \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000   \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000   \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000   \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000   \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984   \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000   \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000   \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000   \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000   \n\n   trx_amt_Base  trx_amt_Rider  trx_n_Base  trx_n_Rider  \n0           0.0            0.0         0.0          0.0  \n1           0.0            0.0         0.0          0.0  \n2           0.0            0.0         0.0          0.0  \n3           0.0            0.0         0.0          0.0  \n4           0.0            0.0         0.0          0.0  \n5           0.0            0.0         0.0          0.0  \n6          25.0            0.0         1.0          0.0  \n7          12.0            0.0         1.0          0.0  \n8           7.0            0.0         1.0          0.0  \n9          52.0            0.0         1.0          0.0  \n\n\n\n\n\nexp_stats\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, conf_int=False, credibility=False, conf_level=0.95, cred_r=0.05, col_exposure='exposure')\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\nconf_int\nbool\nIf True, the output will include confidence intervals around the observed termination rates and any actual-to-expected ratios.\nFalse\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\nconf_level\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\ncol_exposure\nstr\nName of the column in data containing exposures. Only necessary for SplitExposedDF objects.\n'exposure'\n\n\n\n\n\nNotes\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nConfidence intervals\nIf conf_int is set to True, the output will contain lower and upper confidence interval limits for the observed termination rate and any actual-to-expected ratios. The confidence level is dictated by conf_level. If no weighting variable is passed to wt, confidence intervals will be constructed assuming a binomial distribution of claims. Otherwise, confidence intervals will be calculated assuming that the aggregate claims distribution is normal with a mean equal to observed claims and a variance equal to:\nVar(S) = E(N) * Var(X) + E(X)**2 * Var(N),\nWhere S is the aggregate claim random variable, X is the weighting variable assumed to follow a normal distribution, and N is a binomial random variable for the number of claims.\nIf credibility is True and expected values are passed to expected, the output will also contain confidence intervals for any credibility-weighted termination rates.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected). If conf_int is set to True, additional columns are added for lower and upper confidence interval limits around the observed termination rates and any actual-to-expected ratios. Additionally, if credibility is True and expected values are passed to expected, the output will contain confidence intervals around credibility-weighted termination rates. Confidence interval columns include the name of the original output column suffixed by either _lower or _upper. If a value is passed to wt, additional columns are created containing the the sum of weights (.weight), the sum of squared weights (.weight_qs), and the number of records (.weight_n).\n\n\n\n\n\nReferences\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\nExamples\n\nimport actxps as xp\n\n(xp.ExposedDF(xp.load_census_dat(),\n              \"2019-12-31\", \n              target_status=\"Surrender\").\n           groupby('pol_yr', 'inc_guar').\n           exp_stats(conf_int=True))\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 8\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs  q_obs_lower  \\\n0       1     False        56      56   7719.807740  0.007254     0.005441   \n1       1      True        46      46  11532.404626  0.003989     0.002862   \n2       2     False        92      92   7102.813160  0.012953     0.010418   \n3       2      True        68      68  10611.967258  0.006408     0.004900   \n4       3     False        67      67   6446.916146  0.010393     0.008066   \n5       3      True        57      57   9650.221229  0.005907     0.004456   \n6       4     False       123     123   5798.909986  0.021211     0.017590   \n7       4      True        45      45   8736.954420  0.005151     0.003663   \n8       5     False        97      97   5105.875799  0.018998     0.015277   \n9       5      True        67      67   7809.650445  0.008579     0.006658   \n\n   q_obs_upper  \n0     0.009197  \n1     0.005203  \n2     0.015628  \n3     0.008010  \n4     0.012874  \n5     0.007461  \n6     0.025005  \n7     0.006753  \n8     0.022915  \n9     0.010628  \n\n\n\n\n\nexpose_cm\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\nexpose_split\nexpose.ExposedDF.expose_split()\nSplit calendar exposures by policy year\nSplit calendar period exposures that cross a policy anniversary into a pre-anniversary record and a post-anniversary record.\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nSplitExposedDF\nA subclass of ExposedDF with calendar period exposures split by policy year.\n\n\n\n\n\nNotes\nThe ExposedDF must have calendar year, quarter, month, or week exposure records. Calendar year exposures are created by passing cal_expo = True to ExposedDF (or alternatively, with the class methods ExposedDF.expose_cy(), ExposedDF.expose_cq(), ExposedDF.expose_cm(), and ExposedDF.expose_cw()).\nAfter splitting, the resulting data will contain both calendar exposures and policy year exposures. These columns will be named ‘exposure_cal’ and ‘exposure_pol’, respectively. Calendar exposures will be in the original units passed to SplitExposedDF(). Policy exposures will always be expressed in years. Downstream functions like exp_stats() and exp_shiny() will require clarification as to which exposure basis should be used to summarize results.\nAfter splitting, the column ‘pol_yr’ will contain policy years.\n\n\nExamples\n\nimport actxps as xp\ntoy_census = xp.load_toy_census()\nexpo = xp.ExposedDF.expose_cy(toy_census, \"2022-12-31\")\nexpo.expose_split()\n\nExposure data\n\nExposure type: split_year\nTarget status: None\nStudy range: 1900-01-01 to 2022-12-31\n\nA DataFrame: 58 x 9\n   pol_num  status issue_date term_date     cal_yr cal_yr_end  pol_yr  \\\n0        1  Active 2010-01-01       NaT 2010-01-01 2010-12-31       1   \n1        1  Active 2010-01-01       NaT 2011-01-01 2011-12-31       2   \n2        1  Active 2010-01-01       NaT 2012-01-01 2012-12-31       3   \n3        1  Active 2010-01-01       NaT 2013-01-01 2013-12-31       4   \n4        1  Active 2010-01-01       NaT 2014-01-01 2014-12-31       5   \n5        1  Active 2010-01-01       NaT 2015-01-01 2015-12-31       6   \n6        1  Active 2010-01-01       NaT 2016-01-01 2016-12-31       7   \n7        1  Active 2010-01-01       NaT 2017-01-01 2017-12-31       8   \n8        1  Active 2010-01-01       NaT 2018-01-01 2018-12-31       9   \n9        1  Active 2010-01-01       NaT 2019-01-01 2019-12-31      10   \n\n   exposure_pol  exposure_cal  \n0           1.0           1.0  \n1           1.0           1.0  \n2           1.0           1.0  \n3           1.0           1.0  \n4           1.0           1.0  \n5           1.0           1.0  \n6           1.0           1.0  \n7           1.0           1.0  \n8           1.0           1.0  \n9           1.0           1.0  \n\n\n\n\nSee Also\nSplitExposedDF() for full information on SplitExposedDF class.\n\n\n\nfrom_DataFrame\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_', default_status=None)\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nactxps.expose.ExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\ngroupby\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\nNotes\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\ntrx_stats\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, full_exposures_only=True, conf_int=False, conf_level=0.95, col_exposure='exposure')\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\nconf_int\nbool\nIf True, the output will include confidence intervals around the observed utilization rate and any percent_of output columns.\nFalse\n\n\nconf_level\nfloat\nConfidence level for confidence intervals\n0.95\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures. Only necessary for SplitExposedDF objects.\n'exposure'\n\n\n\n\n\nNotes\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nConfidence intervals\nIf conf_int is set to True, the output will contain lower and upper confidence interval limits for the observed utilization rate and any percent_of output columns. The confidence level is dictated by conf_level.\n\nIntervals for the utilization rate (trx_util) assume a binomial distribution.\nIntervals for transactions as a percentage of another column with non-zero transactions (pct_of_{*}_w_trx) are constructed using a normal distribution\nIntervals for transactions as a percentage of another column regardless of transaction utilization (pct_of_{*}_all) are calculated assuming that the aggregate distribution is normal with a mean equal to observed transactions and a variance equal to:\nVar(S) = E(N) * Var(X) + E(X)**2 * Var(N),\n\nWhere S is the aggregate transactions random variable, X is an individual transaction amount assumed to follow a normal distribution, and N is a binomial random variable for transaction utilization.\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*} If conf_int is set to True, additional columns are added for lower and upper confidence interval limits around the observed utilization rate and any percent_of output columns. Confidence interval columns include the name of the original output column suffixed by either _lower or _upper. If values are passed to percent_of, an additional column is created containing the the sum of squared transaction amounts (trx_amt_sq).\n\n\n\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status=\"Surrender\")\nexpo.add_transactions(withdrawals)\n\nexpo.groupby('inc_guar').trx_stats(percent_of=\"premium\",\n                                   combine_trx=True,\n                                   conf_int=True)\n\nTransaction study results\n\nGroups: inc_guar\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\nTransactions as % of: premium\n\n\nA DataFrame: 2 x 21\n   inc_guar trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx  \\\n0     False      All  52939.0     24703   952629.0   48938.0  38.563292   \n1      True      All  84882.0     39462  2983999.0   75235.0  75.617024   \n\n     avg_all  trx_freq  trx_util  ...  premium_w_trx  pct_of_premium_all  \\\n0  19.466039  2.143019  0.504782  ...     33915201.0            0.014557   \n1  39.662378  2.150981  0.524517  ...     52828206.0            0.029566   \n\n   pct_of_premium_w_trx  trx_util_lower  trx_util_upper   trx_amt_sq  \\\n0              0.028089        0.500347        0.509216  121475735.0   \n1              0.056485        0.520954        0.528079  785237847.0   \n\n   pct_of_premium_w_trx_lower  pct_of_premium_w_trx_upper  \\\n0                    0.027557                    0.028621   \n1                    0.055607                    0.057363   \n\n   pct_of_premium_all_lower  pct_of_premium_all_upper  \n0                  0.014253                  0.014861  \n1                  0.029064                  0.030067  \n\n[2 rows x 21 columns]\n\n\n\n\n\nungroup\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html",
    "href": "reference/ExposedDF.exp_stats.html",
    "title": "ExposedDF.exp_stats",
    "section": "",
    "text": "expose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, conf_int=False, credibility=False, conf_level=0.95, cred_r=0.05, col_exposure='exposure')\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object)."
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#parameters",
    "href": "reference/ExposedDF.exp_stats.html#parameters",
    "title": "ExposedDF.exp_stats",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\nconf_int\nbool\nIf True, the output will include confidence intervals around the observed termination rates and any actual-to-expected ratios.\nFalse\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\nconf_level\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\ncol_exposure\nstr\nName of the column in data containing exposures. Only necessary for SplitExposedDF objects.\n'exposure'"
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#notes",
    "href": "reference/ExposedDF.exp_stats.html#notes",
    "title": "ExposedDF.exp_stats",
    "section": "Notes",
    "text": "Notes\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nConfidence intervals\nIf conf_int is set to True, the output will contain lower and upper confidence interval limits for the observed termination rate and any actual-to-expected ratios. The confidence level is dictated by conf_level. If no weighting variable is passed to wt, confidence intervals will be constructed assuming a binomial distribution of claims. Otherwise, confidence intervals will be calculated assuming that the aggregate claims distribution is normal with a mean equal to observed claims and a variance equal to:\nVar(S) = E(N) * Var(X) + E(X)**2 * Var(N),\nWhere S is the aggregate claim random variable, X is the weighting variable assumed to follow a normal distribution, and N is a binomial random variable for the number of claims.\nIf credibility is True and expected values are passed to expected, the output will also contain confidence intervals for any credibility-weighted termination rates.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims."
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#returns",
    "href": "reference/ExposedDF.exp_stats.html#returns",
    "title": "ExposedDF.exp_stats",
    "section": "Returns",
    "text": "Returns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected). If conf_int is set to True, additional columns are added for lower and upper confidence interval limits around the observed termination rates and any actual-to-expected ratios. Additionally, if credibility is True and expected values are passed to expected, the output will contain confidence intervals around credibility-weighted termination rates. Confidence interval columns include the name of the original output column suffixed by either _lower or _upper. If a value is passed to wt, additional columns are created containing the the sum of weights (.weight), the sum of squared weights (.weight_qs), and the number of records (.weight_n)."
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#references",
    "href": "reference/ExposedDF.exp_stats.html#references",
    "title": "ExposedDF.exp_stats",
    "section": "References",
    "text": "References\nHerzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#examples",
    "href": "reference/ExposedDF.exp_stats.html#examples",
    "title": "ExposedDF.exp_stats",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\n\n(xp.ExposedDF(xp.load_census_dat(),\n              \"2019-12-31\", \n              target_status=\"Surrender\").\n           groupby('pol_yr', 'inc_guar').\n           exp_stats(conf_int=True))\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 8\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs  q_obs_lower  \\\n0       1     False        56      56   7719.807740  0.007254     0.005441   \n1       1      True        46      46  11532.404626  0.003989     0.002862   \n2       2     False        92      92   7102.813160  0.012953     0.010418   \n3       2      True        68      68  10611.967258  0.006408     0.004900   \n4       3     False        67      67   6446.916146  0.010393     0.008066   \n5       3      True        57      57   9650.221229  0.005907     0.004456   \n6       4     False       123     123   5798.909986  0.021211     0.017590   \n7       4      True        45      45   8736.954420  0.005151     0.003663   \n8       5     False        97      97   5105.875799  0.018998     0.015277   \n9       5      True        67      67   7809.650445  0.008579     0.006658   \n\n   q_obs_upper  \n0     0.009197  \n1     0.005203  \n2     0.015628  \n3     0.008010  \n4     0.012874  \n5     0.007461  \n6     0.025005  \n7     0.006753  \n8     0.022915  \n9     0.010628"
  },
  {
    "objectID": "reference/ExposedDF.expose_pw.html",
    "href": "reference/ExposedDF.expose_pw.html",
    "title": "ExposedDF.expose_pw",
    "section": "",
    "text": "ExposedDF.expose_pw\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_pm.html",
    "href": "reference/ExposedDF.expose_pm.html",
    "title": "ExposedDF.expose_pm",
    "section": "",
    "text": "ExposedDF.expose_pm\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_cw.html",
    "href": "reference/ExposedDF.expose_cw.html",
    "title": "ExposedDF.expose_cw",
    "section": "",
    "text": "ExposedDF.expose_cw\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_cm.html",
    "href": "reference/ExposedDF.expose_cm.html",
    "title": "ExposedDF.expose_cm",
    "section": "",
    "text": "ExposedDF.expose_cm\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures"
  },
  {
    "objectID": "reference/expose.html",
    "href": "reference/expose.html",
    "title": "expose",
    "section": "",
    "text": "expose\n\n\n\n\n\nName\nDescription\n\n\n\n\nExposedDF\nExposed data frame class\n\n\n\n\n\nexpose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\n\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object.\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method.\n\n\n\n\n\n\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.html#classes",
    "href": "reference/expose.html#classes",
    "title": "expose",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nExposedDF\nExposed data frame class\n\n\n\n\n\nexpose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\n\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object.\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method.\n\n\n\n\n\n\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.ExposedDF.groupby.html",
    "href": "reference/expose.ExposedDF.groupby.html",
    "title": "expose.ExposedDF.groupby",
    "section": "",
    "text": "expose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.ExposedDF.groupby.html#parameters",
    "href": "reference/expose.ExposedDF.groupby.html#parameters",
    "title": "expose.ExposedDF.groupby",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()"
  },
  {
    "objectID": "reference/expose.ExposedDF.groupby.html#notes",
    "href": "reference/expose.ExposedDF.groupby.html#notes",
    "title": "expose.ExposedDF.groupby",
    "section": "",
    "text": "This function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/add_durations.html",
    "href": "reference/add_durations.html",
    "title": "add_interval",
    "section": "",
    "text": "dates.add_interval(dates, x, dur_length)\nAdd years, quarters, months, or weeks to a vector of dates"
  },
  {
    "objectID": "reference/add_durations.html#parameters",
    "href": "reference/add_durations.html#parameters",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\nint | pandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nDuration length\n'year'"
  },
  {
    "objectID": "reference/add_durations.html#returns",
    "href": "reference/add_durations.html#returns",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also",
    "href": "reference/add_durations.html#see-also",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_yr, add_qtr, add_mth, add_wk"
  },
  {
    "objectID": "reference/add_durations.html#examples",
    "href": "reference/add_durations.html#examples",
    "title": "add_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.add_interval(['2008-03-14', '2008-03-14'], [16, 15], 'year')\n\narray(['2024-03-14T00:00:00.000000000', '2023-03-14T00:00:00.000000000'],\n      dtype='datetime64[ns]')"
  },
  {
    "objectID": "reference/add_durations.html#parameters-1",
    "href": "reference/add_durations.html#parameters-1",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\nint | pandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-1",
    "href": "reference/add_durations.html#returns-1",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-1",
    "href": "reference/add_durations.html#see-also-1",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "reference/add_durations.html#examples-1",
    "href": "reference/add_durations.html#examples-1",
    "title": "add_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.add_yr(['2008-03-14', '2008-03-14'], [16, 15])\n\narray(['2024-03-14T00:00:00.000000000', '2023-03-14T00:00:00.000000000'],\n      dtype='datetime64[ns]')"
  },
  {
    "objectID": "reference/add_durations.html#parameters-2",
    "href": "reference/add_durations.html#parameters-2",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\nint | pandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-2",
    "href": "reference/add_durations.html#returns-2",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-2",
    "href": "reference/add_durations.html#see-also-2",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "reference/add_durations.html#examples-2",
    "href": "reference/add_durations.html#examples-2",
    "title": "add_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.add_qtr(['2008-03-14', '2008-03-14'], [64, 60])\n\narray(['2024-03-14T00:00:00.000000000', '2023-03-14T00:00:00.000000000'],\n      dtype='datetime64[ns]')"
  },
  {
    "objectID": "reference/add_durations.html#parameters-3",
    "href": "reference/add_durations.html#parameters-3",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\nint | pandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-3",
    "href": "reference/add_durations.html#returns-3",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-3",
    "href": "reference/add_durations.html#see-also-3",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "reference/add_durations.html#examples-3",
    "href": "reference/add_durations.html#examples-3",
    "title": "add_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.add_mth(['2008-03-14', '2008-03-14'], [192, 180])\n\narray(['2024-03-14T00:00:00.000000000', '2023-03-14T00:00:00.000000000'],\n      dtype='datetime64[ns]')"
  },
  {
    "objectID": "reference/add_durations.html#parameters-4",
    "href": "reference/add_durations.html#parameters-4",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\nint | pandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-4",
    "href": "reference/add_durations.html#returns-4",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-4",
    "href": "reference/add_durations.html#see-also-4",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "reference/add_durations.html#examples-4",
    "href": "reference/add_durations.html#examples-4",
    "title": "add_interval",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\nxp.add_wk(['2008-03-14', '2008-03-14'], [835, 783])\n\narray(['2024-03-15T00:00:00.000000000', '2023-03-17T00:00:00.000000000'],\n      dtype='datetime64[ns]')"
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Several updates to align with the R version of actxps\n\nAdded optional confidence interval outputs to ExpStats and TrxStats objects\nAdded an expose_split() method to ExposedDF classes, which divides calendar period exposures into pre- and post-policy anniversary segments. This creates a SplitExposedDF object, which is a subclass of ExposedDF.\nAdded special plotting functions ExpStats.plot_termination_rates(), ExpStats.plot_actual_to_expected(), and TrxStats.plot_utilization_rates()\nAdded from_DataFrame class methods to ExpStats and TrxStats objects that enables the creation of experience summary objects pre-aggregated data sets.\nAdded the great_tables package as the backend for table() methods\nShiny UI updates\n\nAdded a ‘points’ geom, log 10 y-axis, and confidence interval options to plot methods\nAdded sample data for pre-aggregated exposures (load_agg_sim_dat())\nBug fix - the target status wasn’t being fully exposed when using calendar period exposures\nThe assumed default status on ExposedDF objects is now the most common status instead of the first observed status.\nAdded helper background functions for column selection\nAdded several articles to the package’s website\n\nCurrent differences from the R version are:\n\nNo support for plotting a second variable on the y-axis for .plot() methods\nNo predictive modeling support function (add_predictions(), step_expose())\nTable output cannot be saved to a png directly in the shiny app\nfunctions like pol_interval() don’t accept arbitrary durations. Only ‘year’, ‘quarter’, ‘month’, or ‘week’ are allowed."
  },
  {
    "objectID": "changelog.html#v0.0.1-2024-02-18",
    "href": "changelog.html#v0.0.1-2024-02-18",
    "title": "Changelog",
    "section": "",
    "text": "Several updates to align with the R version of actxps\n\nAdded optional confidence interval outputs to ExpStats and TrxStats objects\nAdded an expose_split() method to ExposedDF classes, which divides calendar period exposures into pre- and post-policy anniversary segments. This creates a SplitExposedDF object, which is a subclass of ExposedDF.\nAdded special plotting functions ExpStats.plot_termination_rates(), ExpStats.plot_actual_to_expected(), and TrxStats.plot_utilization_rates()\nAdded from_DataFrame class methods to ExpStats and TrxStats objects that enables the creation of experience summary objects pre-aggregated data sets.\nAdded the great_tables package as the backend for table() methods\nShiny UI updates\n\nAdded a ‘points’ geom, log 10 y-axis, and confidence interval options to plot methods\nAdded sample data for pre-aggregated exposures (load_agg_sim_dat())\nBug fix - the target status wasn’t being fully exposed when using calendar period exposures\nThe assumed default status on ExposedDF objects is now the most common status instead of the first observed status.\nAdded helper background functions for column selection\nAdded several articles to the package’s website\n\nCurrent differences from the R version are:\n\nNo support for plotting a second variable on the y-axis for .plot() methods\nNo predictive modeling support function (add_predictions(), step_expose())\nTable output cannot be saved to a png directly in the shiny app\nfunctions like pol_interval() don’t accept arbitrary durations. Only ‘year’, ‘quarter’, ‘month’, or ‘week’ are allowed."
  },
  {
    "objectID": "changelog.html#v0.0.0.9000-2023-12-14",
    "href": "changelog.html#v0.0.0.9000-2023-12-14",
    "title": "Changelog",
    "section": "v0.0.0.9000 (2023-12-14)",
    "text": "v0.0.0.9000 (2023-12-14)\n\nDevelopment version of actxps"
  },
  {
    "objectID": "articles/transactions.html",
    "href": "articles/transactions.html",
    "title": "Transaction studies",
    "section": "",
    "text": "This article walks through an example of creating a transaction study using the actxps package. Unlike a termination study, transaction studies track events that can occur multiple times over the life of a policy. Often, transactions are expected to reoccur; for example, the utilization of a guaranteed income stream.\nKey questions to answer in a transaction study are:\nThe example below walks through preparing data by adding transaction information to an ExposedDF object using the add_transactions() method. Next, study results are summarized using the trx_stats() method."
  },
  {
    "objectID": "articles/transactions.html#simulated-transaction-and-account-value-data",
    "href": "articles/transactions.html#simulated-transaction-and-account-value-data",
    "title": "Transaction studies",
    "section": "Simulated transaction and account value data",
    "text": "Simulated transaction and account value data\nIn this example, we’ll be using the census_dat, withdrawals, and account_vals data sets. Each data set is based on a theoretical block of deferred annuity business with a guaranteed lifetime income benefit.\n\ncensus_dat contains census-level information with one row per policy\nwithdrawals contains withdrawal transactions. There are 2 types of transactions in the data: “Base” (ordinary withdrawals) and “Rider” (guaranteed income payments).\naccount_vals contains historical account values on policy anniversaries. This data will be used to calculate withdrawal rates as a percentage of account values."
  },
  {
    "objectID": "articles/transactions.html#the-add_transactions-method",
    "href": "articles/transactions.html#the-add_transactions-method",
    "title": "Transaction studies",
    "section": "The add_transactions() method",
    "text": "The add_transactions() method\nThe add_transactions() method attaches transactions to an ExposedDF object, which contains a data frame with exposure-level records. For our example, we first need to convert census_dat into exposure records using ExposedDF().1 This example will use policy year exposures.\n\nimport actxps as xp\n\ncensus_dat = xp.load_census_dat()\nexposed_data = xp.ExposedDF(census_dat, \"2019-12-31\",\n                            target_status=\"Surrender\")\nexposed_data\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\nA DataFrame: 141,252 x 15\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000  \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000  \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000  \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000  \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000  \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984  \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000  \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000  \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000  \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000  \n\n\nThe withdrawals data has 4 columns that are required for attaching transactions:\n\npol_num: policy number\ntrx_date: transaction date\ntrx_type: transaction type\ntrx_amt: transaction amount\n\n\nwithdrawals = xp.load_withdrawals()\nwithdrawals\n\n\n\n\n\n\n\n\npol_num\ntrx_date\ntrx_type\ntrx_amt\n\n\n\n\n0\n2\n2007-10-05\nBase\n25.0\n\n\n1\n2\n2009-07-30\nBase\n12.0\n\n\n2\n2\n2010-02-22\nBase\n7.0\n\n\n3\n2\n2010-12-30\nBase\n52.0\n\n\n4\n2\n2012-05-07\nBase\n41.0\n\n\n...\n...\n...\n...\n...\n\n\n160125\n20000\n2015-08-08\nRider\n547.0\n\n\n160126\n20000\n2016-07-26\nRider\n106.0\n\n\n160127\n20000\n2017-12-29\nRider\n31.0\n\n\n160128\n20000\n2018-06-14\nRider\n75.0\n\n\n160129\n20000\n2019-12-09\nRider\n466.0\n\n\n\n\n160130 rows × 4 columns\n\n\n\nThe grain of this data is one row per policy per transaction. The expectation is that the number of records in the transaction data will not match the number of rows in the exposure data. That is because policies could have zero or several transactions in a given exposure period.\nThe add_transactions() method uses a non-equivalent join to associate each transaction with a policy number and a date interval found in the exposure data. Then, transaction counts and amounts are summarized such that there is one row per exposure period. In the event there are multiple transaction types found in the data, separate columns are created for each transaction type.\nUsing our example, we pass both the exposure and withdrawals data to add_transactions(). The resulting data has the same number of rows as original exposure data and 4 new columns:\n\ntrx_amt_Base: the sum of “Base” withdrawal transactions\ntrx_amt_Rider: the sum of “Rider” withdrawal transactions\ntrx_n_Base: the number of “Base” withdrawal transactions\ntrx_n_Rider: the number of “Rider” withdrawal transactions\n\n\nexposed_data.add_transactions(withdrawals)\nexposed_data.data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 141252 entries, 0 to 141251\nData columns (total 19 columns):\n #   Column           Non-Null Count   Dtype         \n---  ------           --------------   -----         \n 0   pol_num          141252 non-null  int32         \n 1   status           141252 non-null  category      \n 2   issue_date       141252 non-null  datetime64[ns]\n 3   inc_guar         141252 non-null  bool          \n 4   qual             141252 non-null  bool          \n 5   age              141252 non-null  int32         \n 6   product          141252 non-null  category      \n 7   gender           141252 non-null  category      \n 8   wd_age           141252 non-null  int32         \n 9   premium          141252 non-null  float64       \n 10  term_date        4639 non-null    datetime64[ns]\n 11  pol_yr           141252 non-null  int64         \n 12  pol_date_yr      141252 non-null  datetime64[ns]\n 13  pol_date_yr_end  141252 non-null  datetime64[ns]\n 14  exposure         141252 non-null  float64       \n 15  trx_amt_Base     141252 non-null  float64       \n 16  trx_amt_Rider    141252 non-null  float64       \n 17  trx_n_Base       141252 non-null  float64       \n 18  trx_n_Rider      141252 non-null  float64       \ndtypes: bool(2), category(3), datetime64[ns](4), float64(6), int32(3), int64(1)\nmemory usage: 14.1 MB\n\n\nIf we print exposed_data, we can see that it has an additional attribute for transaction types that have been attached.\n\nexposed_data\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\nA DataFrame: 141,252 x 19\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \\\n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000   \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000   \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000   \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000   \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000   \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984   \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000   \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000   \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000   \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000   \n\n   trx_amt_Base  trx_amt_Rider  trx_n_Base  trx_n_Rider  \n0           0.0            0.0         0.0          0.0  \n1           0.0            0.0         0.0          0.0  \n2           0.0            0.0         0.0          0.0  \n3           0.0            0.0         0.0          0.0  \n4           0.0            0.0         0.0          0.0  \n5           0.0            0.0         0.0          0.0  \n6          25.0            0.0         1.0          0.0  \n7          12.0            0.0         1.0          0.0  \n8           7.0            0.0         1.0          0.0  \n9          52.0            0.0         1.0          0.0"
  },
  {
    "objectID": "articles/transactions.html#the-trx_stats-method",
    "href": "articles/transactions.html#the-trx_stats-method",
    "title": "Transaction studies",
    "section": "The trx_stats() method",
    "text": "The trx_stats() method\nThe actxps package’s workhorse function for summarizing transaction experience is the trx_stats() method of the ExposedDF class. This function returns a TrxStats object, which is a type of data frame containing additional attributes about the transaction study.\nAt a minimum, a TrxStats includes the following for each transaction type (trx_type):\n\nThe number of transactions (trx_n)\nThe number of exposure periods with a transaction (trx_flag)\nThe sum of transactions (trx_amt)\nThe total exposure (exposure)\nThe average transaction amount when a transaction occurs (avg_trx)\nThe average transaction amount across all records (avg_all)\nThe transaction frequency when a transaction occurs (trx_freq = trx_n / trx_flag)\nThe transaction utilization (trx_util = trx_flag / exposure)\n\nOptionally, a TrxStats can also include:\n\nAny grouping variables attached to the input data\nTransaction amounts as a percentage of another value when a transaction occurs (pct_of_*_w_trx)\nTransaction amounts as a percentage of another value across all records (pct_of_*_all)\n\nTo use trx_stats(), we simply need to call the method from an ExposedDF object with transactions attached.\n\nexposed_data.trx_stats()\n\nTransaction study results\n\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\n\nA DataFrame: 2 x 9\n  trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx    avg_all  \\\n0     Base  60500.0     28224  1093899.0  124173.0  38.757759   8.809475   \n1    Rider  77321.0     35941  2842729.0  124173.0  79.094321  22.893294   \n\n   trx_freq  trx_util  \n0  2.143566  0.227296  \n1  2.151331  0.289443  \n\n\nThe results show us that we specified no groups, which is why the output data contains a single row for each transaction type.\n\nGrouped data\nIf the data is grouped using the groupby() method, future calls to exp_stats() will contain one record for each unique group.\nIf the data is grouped using the groupby() method, future calls to trx_stats() will contain one record for each unique group.\nIn the following, exposed_data is grouped by the presence of an income guarantee (inc_guar) before being passed to trx_stats(). This results in four rows because we have two types of transactions and two distinct values of inc_guar.\n\n(exposed_data.\n    groupby('inc_guar').\n    trx_stats())\n\nTransaction study results\n\nGroups: inc_guar\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\n\nA DataFrame: 4 x 10\n   inc_guar trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx  \\\n0     False     Base  52939.0     24703   952629.0   48938.0  38.563292   \n1     False    Rider      0.0         0        0.0   48938.0        NaN   \n2      True     Base   7561.0      3521   141270.0   75235.0  40.122124   \n3      True    Rider  77321.0     35941  2842729.0   75235.0  79.094321   \n\n     avg_all  trx_freq  trx_util  \n0  19.466039  2.143019  0.504782  \n1   0.000000       NaN  0.000000  \n2   1.877716  2.147401  0.046800  \n3  37.784661  2.151331  0.477716  \n\n\nMultiple grouping variables are allowed. Below, policy year (pol_yr) is added as a second grouping variable.\n\n(exposed_data.\n    groupby('inc_guar', 'pol_yr').\n    trx_stats())\n\nTransaction study results\n\nGroups: inc_guar, pol_yr\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\n\nA DataFrame: 60 x 11\n   inc_guar  pol_yr trx_type   trx_n  trx_flag  trx_amt  exposure    avg_trx  \\\n0     False       1     Base  6077.0      2881  98287.0    7435.0  34.115585   \n1     False       1    Rider     0.0         0      0.0    7435.0        NaN   \n2     False       2     Base  6091.0      2863  98413.0    6813.0  34.374083   \n3     False       2    Rider     0.0         0      0.0    6813.0        NaN   \n4     False       3     Base  6016.0      2813  97285.0    6176.0  34.584074   \n5     False       3    Rider     0.0         0      0.0    6176.0        NaN   \n6     False       4     Base  5719.0      2664  99847.0    5490.0  37.480105   \n7     False       4    Rider     0.0         0      0.0    5490.0        NaN   \n8     False       5     Base  5354.0      2492  95070.0    4852.0  38.150080   \n9     False       5    Rider     0.0         0      0.0    4852.0        NaN   \n\n     avg_all  trx_freq  trx_util  \n0  13.219502  2.109337  0.387492  \n1   0.000000       NaN  0.000000  \n2  14.444885  2.127489  0.420226  \n3   0.000000       NaN  0.000000  \n4  15.752105  2.138642  0.455473  \n5   0.000000       NaN  0.000000  \n6  18.187067  2.146772  0.485246  \n7   0.000000       NaN  0.000000  \n8  19.593982  2.148475  0.513603  \n9   0.000000       NaN  0.000000"
  },
  {
    "objectID": "articles/transactions.html#expressing-transactions-as-a-percentage-of-another-value",
    "href": "articles/transactions.html#expressing-transactions-as-a-percentage-of-another-value",
    "title": "Transaction studies",
    "section": "Expressing transactions as a percentage of another value",
    "text": "Expressing transactions as a percentage of another value\nIn a transaction study, we often want to express transaction amounts as a percentage of another value. For example, in a withdrawal study, withdrawal amounts divided by account values provides a withdrawal rate. In a study of benefit utilization, transactions can be divided by a maximum benefit amount to derive a benefit utilization rate. In addition, actual-to-expected rates can be calculated by dividing transactions by expected values.\nIf column names are passed to the percent_of argument of trx_stats(), the output will contain 4 additional columns for each “percent of” variable:\n\nThe sum of each “percent of” variable\nThe sum of each “percent of” variable when a transaction occurs. These columns include the suffix _w_trx.\nTransaction amounts divided by each “percent of” variable (pct_of_{*}_all)\nTransaction amounts divided by each “percent of” variable when a transaction occurs (pct_of_{*}_w_trx)\n\nFor our example, let’s assume we’re interested in examining withdrawal transactions as a percentage of account values, which are available in the account_vals data frame in the column av_anniv.\n\n# attach account values data\naccount_vals = xp.load_account_vals()\nexposed_data.data = \\\n    exposed_data.data.merge(account_vals,\n                            on=['pol_num', 'pol_date_yr'],\n                            how='left')\n\ntrx_res = (exposed_data.\n           groupby('pol_yr', 'inc_guar').\n           trx_stats(percent_of=\"av_anniv\"))\n\ntrx_res.data.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 60 entries, 0 to 59\nData columns (total 15 columns):\n #   Column                 Non-Null Count  Dtype  \n---  ------                 --------------  -----  \n 0   pol_yr                 60 non-null     int64  \n 1   inc_guar               60 non-null     bool   \n 2   trx_type               60 non-null     object \n 3   trx_n                  60 non-null     float64\n 4   trx_flag               60 non-null     int64  \n 5   trx_amt                60 non-null     float64\n 6   exposure               60 non-null     float64\n 7   avg_trx                44 non-null     float64\n 8   avg_all                60 non-null     float64\n 9   trx_freq               44 non-null     float64\n 10  trx_util               60 non-null     float64\n 11  av_anniv               60 non-null     float64\n 12  av_anniv_w_trx         60 non-null     float64\n 13  pct_of_av_anniv_all    60 non-null     float64\n 14  pct_of_av_anniv_w_trx  44 non-null     float64\ndtypes: bool(1), float64(11), int64(2), object(1)\nmemory usage: 6.8+ KB"
  },
  {
    "objectID": "articles/transactions.html#confidence-intervals",
    "href": "articles/transactions.html#confidence-intervals",
    "title": "Transaction studies",
    "section": "Confidence intervals",
    "text": "Confidence intervals\nIf conf_int is set to True, trx_stats() will produce lower and upper confidence interval limits for the observed utilization rate. Confidence intervals are constructed assuming a binomial distribution.\n\n(exposed_data.\n    groupby('pol_yr').\n    trx_stats(conf_int=True).\n    data[['pol_yr', 'trx_util', 'trx_util_lower', 'trx_util_upper']])\n\n\n\n\n\n\n\n\npol_yr\ntrx_util\ntrx_util_lower\ntrx_util_upper\n\n\n\n\n0\n1\n0.189526\n0.183917\n0.195189\n\n\n1\n1\n0.203765\n0.197994\n0.209590\n\n\n2\n2\n0.201638\n0.195628\n0.207707\n\n\n3\n2\n0.225915\n0.219610\n0.232220\n\n\n4\n3\n0.214912\n0.208417\n0.221407\n\n\n...\n...\n...\n...\n...\n\n\n25\n13\n0.516784\n0.489461\n0.544106\n\n\n26\n14\n0.245645\n0.210801\n0.280488\n\n\n27\n14\n0.550523\n0.510453\n0.590592\n\n\n28\n15\n0.380952\n0.190476\n0.571429\n\n\n29\n15\n0.428571\n0.238095\n0.619048\n\n\n\n\n30 rows × 4 columns\n\n\n\nThe default confidence level is 95%. This can be changed using the conf_level argument. Below, tighter confidence intervals are constructed by decreasing the confidence level to 90%.\n\n(exposed_data.\n    groupby('pol_yr').\n    trx_stats(conf_int=True, conf_level=0.9).\n    data[['pol_yr', 'trx_util', 'trx_util_lower', 'trx_util_upper']])\n\n\n\n\n\n\n\n\npol_yr\ntrx_util\ntrx_util_lower\ntrx_util_upper\n\n\n\n\n0\n1\n0.189526\n0.184780\n0.194272\n\n\n1\n1\n0.203765\n0.198911\n0.208619\n\n\n2\n2\n0.201638\n0.196571\n0.206706\n\n\n3\n2\n0.225915\n0.220671\n0.231218\n\n\n4\n3\n0.214912\n0.209456\n0.220368\n\n\n...\n...\n...\n...\n...\n\n\n25\n13\n0.516784\n0.494145\n0.539422\n\n\n26\n14\n0.245645\n0.216028\n0.275261\n\n\n27\n14\n0.550523\n0.515679\n0.585366\n\n\n28\n15\n0.380952\n0.190476\n0.571429\n\n\n29\n15\n0.428571\n0.238095\n0.619048\n\n\n\n\n30 rows × 4 columns\n\n\n\nIf any column names are passed to percent_of, trx_stats() will produce additional confidence intervals:\n\nIntervals for transactions as a percentage of another column when transactions occur (pct_of_{*}_w_trx) are constructed using a normal distribution.\nIntervals for transactions as a percentage of another column regardless of transaction utilization (pct_of_{*}_all) are calculated assuming that the aggregate distribution is normal with a mean equal to observed transactions and a variance equal to:\n\n\\[\n     Var(S) = E(N) \\times Var(X) + E(X)^2 \\times Var(N),\n\\] Where S is the aggregate transactions random variable, X is an individual transaction amount assumed to follow a normal distribution, and N is a binomial random variable for transaction utilization.\n\n(exposed_data.\n    groupby('pol_yr').\n    trx_stats(conf_int=True, percent_of=\"av_anniv\").\n    data[['pol_yr', 'pct_of_av_anniv_all', 'pct_of_av_anniv_w_trx',\n          'pct_of_av_anniv_w_trx_lower', 'pct_of_av_anniv_w_trx_upper',\n          'pct_of_av_anniv_all_lower', 'pct_of_av_anniv_all_upper']].\n    info())\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 30 entries, 0 to 29\nData columns (total 7 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   pol_yr                       30 non-null     int64  \n 1   pct_of_av_anniv_all          30 non-null     float64\n 2   pct_of_av_anniv_w_trx        30 non-null     float64\n 3   pct_of_av_anniv_w_trx_lower  30 non-null     float64\n 4   pct_of_av_anniv_w_trx_upper  30 non-null     float64\n 5   pct_of_av_anniv_all_lower    30 non-null     float64\n 6   pct_of_av_anniv_all_upper    30 non-null     float64\ndtypes: float64(6), int64(1)\nmemory usage: 1.8 KB"
  },
  {
    "objectID": "articles/transactions.html#plot-and-table",
    "href": "articles/transactions.html#plot-and-table",
    "title": "Transaction studies",
    "section": "plot() and table()",
    "text": "plot() and table()\nThe plot() and table() methods create visualizations and summary tables from TrxStats objects. See See Visualizations for full details on these functions.\n\ntrx_res.plot(y='pct_of_av_anniv_w_trx')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# first 10 rows showed for brevity\ntrx_res.table()"
  },
  {
    "objectID": "articles/transactions.html#miscellaneous",
    "href": "articles/transactions.html#miscellaneous",
    "title": "Transaction studies",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nSelecting and combining transaction types\nThe trx_types argument of trx_stats() selects a subset of transaction types that will appear in the output.\n\nexposed_data.trx_stats(trx_types=\"Base\")\n\nTransaction study results\n\nGroups: pol_yr\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base\n\n\nA DataFrame: 15 x 10\n   pol_yr trx_type   trx_n  trx_flag   trx_amt  exposure    avg_trx  \\\n0       1     Base  7447.0      3514  119877.0   18541.0  34.114115   \n1       2     Base  7274.0      3422  116967.0   16971.0  34.180888   \n2       3     Base  7061.0      3309  116357.0   15397.0  35.163796   \n3       4     Base  6596.0      3080  114987.0   13790.0  37.333442   \n4       5     Base  6093.0      2847  109918.0   12234.0  38.608360   \n5       6     Base  5543.0      2572   97455.0   10697.0  37.890747   \n6       7     Base  4921.0      2297   92797.0    9294.0  40.399216   \n7       8     Base  4200.0      1964   85740.0    7783.0  43.655804   \n8       9     Base  3579.0      1655   70715.0    6372.0  42.728097   \n9      10     Base  3004.0      1376   57935.0    5052.0  42.103924   \n\n     avg_all  trx_freq  trx_util  \n0   6.465509  2.119237  0.189526  \n1   6.892169  2.125658  0.201638  \n2   7.557122  2.133877  0.214912  \n3   8.338434  2.141558  0.223350  \n4   8.984633  2.140148  0.232712  \n5   9.110498  2.155132  0.240441  \n6   9.984614  2.142360  0.247149  \n7  11.016318  2.138493  0.252345  \n8  11.097772  2.162538  0.259730  \n9  11.467736  2.183140  0.272367  \n\n\nIf the combine_trx argument is set to True, all transaction types will be combined in a group called “All” in the output.\n\nexposed_data.trx_stats(combine_trx=True)\n\nTransaction study results\n\nGroups: pol_yr\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\n\nA DataFrame: 15 x 10\n   pol_yr trx_type    trx_n  trx_flag   trx_amt  exposure    avg_trx  \\\n0       1      All  15524.0      7292  385189.0   18541.0  52.823505   \n1       2      All  15506.0      7256  405081.0   16971.0  55.827040   \n2       3      All  15265.0      7126  411152.0   15397.0  57.697446   \n3       4      All  14556.0      6795  398750.0   13790.0  58.682855   \n4       5      All  13629.0      6368  374857.0   12234.0  58.865735   \n5       6      All  12661.0      5914  361971.0   10697.0  61.205783   \n6       7      All  11552.0      5394  344299.0    9294.0  63.829996   \n7       8      All  10152.0      4737  312510.0    7783.0  65.972134   \n8       9      All   8752.0      4061  274715.0    6372.0  67.647131   \n9      10      All   7335.0      3374  232392.0    5052.0  68.877297   \n\n     avg_all  trx_freq  trx_util  \n0  20.774985  2.128908  0.393291  \n1  23.869012  2.136990  0.427553  \n2  26.703384  2.142155  0.462817  \n3  28.915881  2.142163  0.492748  \n4  30.640592  2.140232  0.520517  \n5  33.838553  2.140852  0.552865  \n6  37.045298  2.141639  0.580374  \n7  40.152897  2.143129  0.608634  \n8  43.112837  2.155134  0.637320  \n9  46.000000  2.173977  0.667854  \n\n\n\n\nPartial exposures are removed as a default\nAs a default, trx_stats() removes partial exposures before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set the full_exposures_only argument to False.\n\nexposed_data.trx_stats(full_exposures_only=False)\n\nTransaction study results\n\nGroups: pol_yr\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\n\nA DataFrame: 30 x 10\n   pol_yr trx_type   trx_n  trx_flag   trx_amt      exposure    avg_trx  \\\n0       1     Base  8123.0      3818  129155.0  19252.212366  33.827920   \n1       1    Rider  8819.0      4103  290608.0  19252.212366  70.828175   \n2       2     Base  7924.0      3737  128258.0  17714.780418  34.321113   \n3       2    Rider  8976.0      4186  312661.0  17714.780418  74.692069   \n4       3     Base  7668.0      3603  127202.0  16097.137376  35.304468   \n5       3    Rider  9011.0      4193  322147.0  16097.137376  76.829716   \n6       4     Base  7299.0      3427  127108.0  14535.864406  37.090166   \n7       4    Rider  8894.0      4148  313402.0  14535.864406  75.554966   \n8       5     Base  6777.0      3166  121709.0  12915.526244  38.442514   \n9       5    Rider  8576.0      3987  298753.0  12915.526244  74.931778   \n\n     avg_all  trx_freq  trx_util  \n0   6.708580  2.127554  0.198315  \n1  15.094785  2.149403  0.213118  \n2   7.240169  2.120417  0.210954  \n3  17.649725  2.144290  0.236300  \n4   7.902150  2.128226  0.223829  \n5  20.012689  2.149058  0.260481  \n6   8.744440  2.129851  0.235762  \n7  21.560603  2.144166  0.285363  \n8   9.423464  2.140556  0.245131  \n9  23.131307  2.150991  0.308698  \n\n\n\n\nSummary method\nAs noted above, the result of trx_stats() is a TrxStats object. If the summary() function is applied to a TrxStats object, the data will be summarized again and return a higher level TrxStats object.\nIf no additional arguments are passed, summary() returns a single row of aggregate results for each transaction type.\n\ntrx_res.summary()\n\nTransaction study results\n\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\nTransactions as % of: av_anniv\n\n\nA DataFrame: 2 x 13\n  trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx    avg_all  \\\n0     Base  60500.0     28224  1093899.0  124173.0  38.757759   8.809475   \n1    Rider  77321.0     35941  2842729.0  124173.0  79.094321  22.893294   \n\n   trx_freq  trx_util     av_anniv  av_anniv_w_trx  pct_of_av_anniv_all  \\\n0  2.143566  0.227296  184065396.0      43514812.0             0.005943   \n1  2.151331  0.289443  184065396.0      47684258.0             0.015444   \n\n   pct_of_av_anniv_w_trx  \n0               0.025139  \n1               0.059616  \n\n\nIf additional variable names are passed to the summary() function, then the output will group the data by those variables. In our example, if pol_yr is passed to summary(), the output will contain one row per policy year for each transaction type.\n\ntrx_res.summary('pol_yr')\n\nTransaction study results\n\nGroups: pol_yr\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\nTransactions as % of: av_anniv\n\n\nA DataFrame: 30 x 14\n   pol_yr trx_type   trx_n  trx_flag   trx_amt  exposure    avg_trx  \\\n0       1     Base  7447.0      3514  119877.0   18541.0  34.114115   \n1       1    Rider  8077.0      3778  265312.0   18541.0  70.225516   \n2       2     Base  7274.0      3422  116967.0   16971.0  34.180888   \n3       2    Rider  8232.0      3834  288114.0   16971.0  75.147105   \n4       3     Base  7061.0      3309  116357.0   15397.0  35.163796   \n5       3    Rider  8204.0      3817  294795.0   15397.0  77.232119   \n6       4     Base  6596.0      3080  114987.0   13790.0  37.333442   \n7       4    Rider  7960.0      3715  283763.0   13790.0  76.383042   \n8       5     Base  6093.0      2847  109918.0   12234.0  38.608360   \n9       5    Rider  7536.0      3521  264939.0   12234.0  75.245385   \n\n     avg_all  trx_freq  trx_util    av_anniv  av_anniv_w_trx  \\\n0   6.465509  2.119237  0.189526  24365915.0       4740352.0   \n1  14.309476  2.137904  0.203765  24365915.0       4982082.0   \n2   6.892169  2.125658  0.201638  23013944.0       4707718.0   \n3  16.976843  2.147105  0.225915  23013944.0       5022297.0   \n4   7.557122  2.133877  0.214912  21474409.0       4637509.0   \n5  19.146262  2.149332  0.247905  21474409.0       5021453.0   \n6   8.338434  2.141558  0.223350  19831268.0       4468860.0   \n7  20.577447  2.142665  0.269398  19831268.0       4839690.0   \n8   8.984633  2.140148  0.232712  18168403.0       4293638.0   \n9  21.655959  2.140301  0.287804  18168403.0       4610865.0   \n\n   pct_of_av_anniv_all  pct_of_av_anniv_w_trx  \n0             0.004920               0.025289  \n1             0.010889               0.053253  \n2             0.005082               0.024846  \n3             0.012519               0.057367  \n4             0.005418               0.025090  \n5             0.013728               0.058707  \n6             0.005798               0.025731  \n7             0.014309               0.058632  \n8             0.006050               0.025600  \n9             0.014582               0.057460  \n\n\nSimilarly, if inc_guar is passed to summary(), the output will contain a row for each transaction type and unique value in inc_guar.\n\ntrx_res.summary('inc_guar')\n\nTransaction study results\n\nGroups: inc_guar\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\nTransactions as % of: av_anniv\n\n\nA DataFrame: 4 x 14\n   inc_guar trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx  \\\n0     False     Base  52939.0     24703   952629.0   48938.0  38.563292   \n1     False    Rider      0.0         0        0.0   48938.0        NaN   \n2      True     Base   7561.0      3521   141270.0   75235.0  40.122124   \n3      True    Rider  77321.0     35941  2842729.0   75235.0  79.094321   \n\n     avg_all  trx_freq  trx_util     av_anniv  av_anniv_w_trx  \\\n0  19.466039  2.143019  0.504782   74673495.0      37938943.0   \n1   0.000000       NaN  0.000000   74673495.0             0.0   \n2   1.877716  2.147401  0.046800  109391901.0       5575869.0   \n3  37.784661  2.151331  0.477716  109391901.0      47684258.0   \n\n   pct_of_av_anniv_all  pct_of_av_anniv_w_trx  \n0             0.012757               0.025110  \n1             0.000000                    NaN  \n2             0.001291               0.025336  \n3             0.025987               0.059616  \n\n\n\n\nColumn names\nAs a default, add_transactions() assumes the transaction data frame (trx_data) uses the following naming conventions:\n\nThe policy number column is called pol_num\nThe transaction date column is called trx_date\nThe transaction type column is called trx_type\nThe transaction amount column is called trx_amt\n\nThese default names can be overridden using the col_pol_num, col_trx_date, col_trx_type, and col_trx_amt arguments.\nFor example, if the transaction type column was called transaction_code in our data, we could write:\n\nexposed_data.add_transactions(withdrawals, col_trx_type=\"transaction_code\")\n\nSimilarly, trx_stats() assumes the input data uses the name exposure for exposures. This default can be overridden using the argument col_exposure.\n\n\nLimitations\nThe trx_stats() function does not produce any calculations related to the persistence of transactions from exposure period to exposure period."
  },
  {
    "objectID": "articles/transactions.html#footnotes",
    "href": "articles/transactions.html#footnotes",
    "title": "Transaction studies",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee Exposures for more information on creating ExposedDF objects.↩︎"
  },
  {
    "objectID": "articles/exp_summary.html",
    "href": "articles/exp_summary.html",
    "title": "Experience summaries",
    "section": "",
    "text": "After experience data has been prepared for analysis, the next step is to summarize results. The actxps package’s workhorse function for summarizing termination experience is the exp_stats() method of the ExposedDF class. This function returns an ExpStats object, which is a type of data frame containing additional attributes about the experience study.\nAt a minimum, an ExpStats includes:\nOptionally, an ExpStats can also include:\nTo demonstrate this function, we’re going to use a data frame containing simulated census data for a theoretical deferred annuity product that has an optional guaranteed income rider. Before exp_stats() can be used, we must convert our census data into exposure records using the ExposedDF() class1. In addition, let’s assume we’re interested in studying surrender rates, so we’ll pass the argument target_status = 'Surrender' to ExposedDF().\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\nexposed_data = xp.ExposedDF(census_dat, end_date=\"2019-12-31\",\n                            target_status=\"Surrender\")"
  },
  {
    "objectID": "articles/exp_summary.html#the-exp_stats-method",
    "href": "articles/exp_summary.html#the-exp_stats-method",
    "title": "Experience summaries",
    "section": "The exp_stats() method",
    "text": "The exp_stats() method\nTo use exp_stats(), simply call the method from an ExposedDF object.\n\nexposed_data.exp_stats()\n\nExperience study results\n\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 1 x 4\n   n_claims  claims       exposure     q_obs\n0      2869    2869  132633.995658  0.021631\n\n\nThe results show us that we specified no groups, which is why the output data is a single row. In addition, we can see that we’re looking at surrender rates through the end of 2019, which exp_stats() inferred from exposed_data.\nThe number of claims (n_claims) is equal to the number of “Surrender” statuses in exposed_data. Since we didn’t specify any weighting variable, the amount of claims (claims) equals the number of claims.\n\namount = sum(exposed_data.data.status == \"Surrender\")\namount\n\n2869\n\n\nThe total exposure (exposure) is equal to the sum of the exposures in exposed_data. Had we specified a weighting variable, this would be equal to the sum of weighted exposures.\n\nsum_expo = sum(exposed_data.data.exposure)\nsum_expo\n\n132633.99565835952\n\n\nLastly, the observed termination rate (q_obs) equals the amount of claims divided by the exposures.\n\namount / sum_expo\n\n0.021630955063662638\n\n\n\nGrouped data\nIf the data is grouped using the groupby() method, future calls to exp_stats() will contain one record for each unique group.\nIn the following, exposed_data is grouped by policy year before exp_stats() is called. This results in one row per policy year found in the data.\n\n(exposed_data.\n    groupby('pol_yr').\n    exp_stats())\n\nExperience study results\n\nGroups: pol_yr\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 15 x 5\n   pol_yr  n_claims  claims      exposure     q_obs\n0       1       102     102  19252.212366  0.005298\n1       2       160     160  17714.780418  0.009032\n2       3       124     124  16097.137376  0.007703\n3       4       168     168  14535.864406  0.011558\n4       5       164     164  12915.526244  0.012698\n5       6       152     152  11375.931769  0.013362\n6       7       164     164   9916.841762  0.016538\n7       8       190     190   8447.895074  0.022491\n8       9       181     181   6959.806363  0.026006\n9      10       152     152   5604.283330  0.027122\n\n\nMultiple grouping variables are allowed. Below, the presence of an income guarantee (inc_guar) is added as a second grouping variable.\n\n(exposed_data.\n    groupby('inc_guar', 'pol_yr').\n    exp_stats())\n\nExperience study results\n\nGroups: inc_guar, pol_yr\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 6\n   inc_guar  pol_yr  n_claims  claims     exposure     q_obs\n0     False       1        56      56  7719.807740  0.007254\n1     False       2        92      92  7102.813160  0.012953\n2     False       3        67      67  6446.916146  0.010393\n3     False       4       123     123  5798.909986  0.021211\n4     False       5        97      97  5105.875799  0.018998\n5     False       6        96      96  4493.780156  0.021363\n6     False       7        92      92  3899.012179  0.023596\n7     False       8       103     103  3287.113197  0.031334\n8     False       9        87      87  2684.492110  0.032408\n9     False      10        60      60  2156.379362  0.027824\n\n\nGrouping persists after groupby() is called. To remove groups, the ungroup() method can be used.\n\n# check groups\nprint(exposed_data.groups)\n\n['inc_guar', 'pol_yr']\n\n\n\n# ungroup, then check groups again\nexposed_data.ungroup()\nprint(exposed_data.groups is None)\n\nTrue\n\n\n\n\nTarget status\nThe target_status argument of exp_stats() specifies which status levels count as claims in the experience study summary. If the ExposedDF object already has a specified target status (from the original call to ExposedDF()), then this argument is not necessary because the target status is automatically inferred.\nEven if the target status exists, it can be overridden. However care should be taken to ensure that exposure values in the data are appropriate for the new status.\nUsing the example data, a total termination rate can be estimated by including both death and surrender statuses in target_status. To ensure exposures are accurate, an adjustment is made to fully expose deaths prior to calling exp_stats()2.\n\nfrom copy import deepcopy\n\nexposed_data2 = deepcopy(exposed_data)\nexposed_data2.data['exposure'] = np.where(\n    exposed_data2.data.status == \"Death\", 1,\n    exposed_data2.data.exposure)\n\n(exposed_data2.groupby('pol_yr').\n    exp_stats(target_status=[\"Surrender\", \"Death\"]))\n\nExperience study results\n\nGroups: pol_yr\nTarget status: Surrender, Death\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 15 x 5\n   pol_yr  n_claims  claims      exposure     q_obs\n0       1       290     290  19348.986084  0.014988\n1       2       325     325  17796.251718  0.018262\n2       3       292     292  16180.430159  0.018046\n3       4       329     329  14611.270484  0.022517\n4       5       329     329  12997.512119  0.025313\n5       6       334     334  11471.385164  0.029116\n6       7       297     297   9984.937046  0.029745\n7       8       340     340   8524.699236  0.039884\n8       9       308     308   7032.227891  0.043798\n9      10       260     260   5663.139973  0.045911"
  },
  {
    "objectID": "articles/exp_summary.html#weighted-results",
    "href": "articles/exp_summary.html#weighted-results",
    "title": "Experience summaries",
    "section": "Weighted results",
    "text": "Weighted results\nExperience studies often weight output by key policy values. Examples include account values, cash values, face amount, premiums, and more. Weighting can be accomplished by passing the name of a weighting column to the wt argument of exp_stats().\nOur sample data contains a column called premium that we can weight by. When weights are supplied, the claims, exposure, and q_obs columns will be weighted. If expected termination rates are supplied (see below), these rates and A/E values will also be weighted.3\n\n#  label: weight-res\n(exposed_data.\n    groupby('pol_yr').\n    exp_stats(wt='premium'))\n\nExperience study results\n\nGroups: pol_yr\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nWeighted by: premium\n\n\nA DataFrame: 15 x 8\n   pol_yr  n_claims    claims      exposure     q_obs      weight  \\\n0       1       102   83223.0  2.531281e+07  0.003288  26301746.0   \n1       2       160  170058.0  2.335248e+07  0.007282  24275265.0   \n2       3       124  123554.0  2.124677e+07  0.005815  22201817.0   \n3       4       168  176751.0  1.927087e+07  0.009172  20200019.0   \n4       5       164  173273.0  1.722898e+07  0.010057  18134795.0   \n5       6       152  163034.0  1.524652e+07  0.010693  16192950.0   \n6       7       164  153238.0  1.332878e+07  0.011497  14159437.0   \n7       8       190  174200.0  1.147644e+07  0.015179  12346124.0   \n8       9       181  187337.0  9.546258e+06  0.019624  10420172.0   \n9      10       152  157603.0  7.707064e+06  0.020449   8543150.0   \n\n      weight_sq  weight_n  \n0  6.074299e+10     19995  \n1  5.623285e+10     18434  \n2  5.174683e+10     16806  \n3  4.714244e+10     15266  \n4  4.288792e+10     13618  \n5  3.882895e+10     12067  \n6  3.429145e+10     10541  \n7  3.012131e+10      9130  \n8  2.578114e+10      7591  \n9  2.088264e+10      6185"
  },
  {
    "objectID": "articles/exp_summary.html#expected-values-and-ae-ratios",
    "href": "articles/exp_summary.html#expected-values-and-ae-ratios",
    "title": "Experience summaries",
    "section": "Expected values and A/E ratios",
    "text": "Expected values and A/E ratios\nAs common metric in experience studies is the actual-to-expected, or A/E ratio.\n\\[\nA/E\\ ratio = \\frac{observed\\ value}{expected\\ value}\n\\]\nIf the data passed to exp_stats() has one or more columns containing expected termination rates, A/E ratios can be calculated by passing the names of these columns to the expected argument.\nLet’s assume we have two sets of expected rates. The first set is a vector that varies by policy year. The second set is either 1.5% or 3.0% depending on whether the policy has a guaranteed income benefit. First, we need to attach these assumptions to our exposure data. We will use the names expected_1 and expected_2. Then we pass these names to the expected argument when we call exp_stats().\nIn the output, 4 new columns are created for expected rates and A/E ratios.\n\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10),\n                                 [.2, .15], np.repeat(0.05, 3)))\n\n# using 2 different expected termination rates\nexposed_data.data['expected_1'] = \\\n    expected_table[exposed_data.data.pol_yr - 1]\nexposed_data.data['expected_2'] = \\\n    np.where(exposed_data.data.inc_guar, 0.015, 0.03)\n\nexp_res = (exposed_data.\n           groupby(\"pol_yr\", \"inc_guar\").\n           exp_stats(expected=[\"expected_1\", \"expected_2\"]))\n\nexp_res.data[['pol_yr', 'inc_guar', 'q_obs', 'expected_1', 'expected_2',\n              'ae_expected_1', 'ae_expected_2']]\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nq_obs\nexpected_1\nexpected_2\nae_expected_1\nae_expected_2\n\n\n\n\n0\n1\nFalse\n0.007254\n0.005000\n0.030\n1.450813\n0.241802\n\n\n1\n1\nTrue\n0.003989\n0.005000\n0.015\n0.797752\n0.265917\n\n\n2\n2\nFalse\n0.012953\n0.007778\n0.030\n1.665336\n0.431754\n\n\n3\n2\nTrue\n0.006408\n0.007778\n0.015\n0.823868\n0.427191\n\n\n4\n3\nFalse\n0.010393\n0.010556\n0.030\n0.984559\n0.346419\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n0.043862\n0.050000\n0.015\n0.877242\n2.924141\n\n\n26\n14\nFalse\n0.125656\n0.050000\n0.030\n2.513115\n4.188525\n\n\n27\n14\nTrue\n0.047602\n0.050000\n0.015\n0.952043\n3.173475\n\n\n28\n15\nFalse\n0.108035\n0.050000\n0.030\n2.160699\n3.601165\n\n\n29\n15\nTrue\n0.046361\n0.050000\n0.015\n0.927220\n3.090735\n\n\n\n\n30 rows × 7 columns\n\n\n\nAs noted above, if weights are passed to exp_stats() then A/E ratios will also be weighted.\n\nexp_res_wt = (exposed_data.\n              groupby('pol_yr', 'inc_guar').\n              exp_stats(expected=[\"expected_1\", \"expected_2\"],\n                        wt=\"premium\"))\n\nexp_res_wt.data[['pol_yr', 'inc_guar', 'q_obs', 'expected_1', 'expected_2',\n                 'ae_expected_1', 'ae_expected_2']]\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nq_obs\nexpected_1\nexpected_2\nae_expected_1\nae_expected_2\n\n\n\n\n0\n1\nFalse\n0.004709\n0.005000\n0.030\n0.941820\n0.156970\n\n\n1\n1\nTrue\n0.002351\n0.005000\n0.015\n0.470113\n0.156704\n\n\n2\n2\nFalse\n0.010540\n0.007778\n0.030\n1.355163\n0.351339\n\n\n3\n2\nTrue\n0.005132\n0.007778\n0.015\n0.659867\n0.342153\n\n\n4\n3\nFalse\n0.007373\n0.010556\n0.030\n0.698464\n0.245756\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n0.038539\n0.050000\n0.015\n0.770787\n2.569291\n\n\n26\n14\nFalse\n0.096951\n0.050000\n0.030\n1.939013\n3.231688\n\n\n27\n14\nTrue\n0.036829\n0.050000\n0.015\n0.736585\n2.455285\n\n\n28\n15\nFalse\n0.066549\n0.050000\n0.030\n1.330984\n2.218307\n\n\n29\n15\nTrue\n0.039654\n0.050000\n0.015\n0.793086\n2.643620\n\n\n\n\n30 rows × 7 columns"
  },
  {
    "objectID": "articles/exp_summary.html#credibility",
    "href": "articles/exp_summary.html#credibility",
    "title": "Experience summaries",
    "section": "Credibility",
    "text": "Credibility\nIf the credibility argument is set to True, exp_stats() will produce an estimate of partial credibility under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.4\n\n(exposed_data.\n    groupby('pol_yr', 'inc_guar').\n    exp_stats(credibility=True).\n    data[['pol_yr', 'inc_guar', 'claims', 'q_obs', 'credibility']])\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nclaims\nq_obs\ncredibility\n\n\n\n\n0\n1\nFalse\n56\n0.007254\n0.191601\n\n\n1\n1\nTrue\n46\n0.003989\n0.173368\n\n\n2\n2\nFalse\n92\n0.012953\n0.246290\n\n\n3\n2\nTrue\n68\n0.006408\n0.211044\n\n\n4\n3\nFalse\n67\n0.010393\n0.209907\n\n\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n49\n0.043862\n0.182625\n\n\n26\n14\nFalse\n33\n0.125656\n0.156725\n\n\n27\n14\nTrue\n29\n0.047602\n0.140771\n\n\n28\n15\nFalse\n8\n0.108035\n0.076400\n\n\n29\n15\nTrue\n9\n0.046361\n0.078370\n\n\n\n\n30 rows × 5 columns\n\n\n\nUnder the default arguments, credibility calculations assume a 95% confidence of being within 5% of the true value. These parameters can be overridden using the conf_level and cred_r arguments, respectively.\n\n(exposed_data.\n    groupby('pol_yr', 'inc_guar').\n    exp_stats(credibility=True, conf_level=0.98, cred_r=0.03).\n    data[['pol_yr', 'inc_guar', 'claims', 'q_obs', 'credibility']])\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nclaims\nq_obs\ncredibility\n\n\n\n\n0\n1\nFalse\n56\n0.007254\n0.096855\n\n\n1\n1\nTrue\n46\n0.003989\n0.087638\n\n\n2\n2\nFalse\n92\n0.012953\n0.124501\n\n\n3\n2\nTrue\n68\n0.006408\n0.106683\n\n\n4\n3\nFalse\n67\n0.010393\n0.106109\n\n\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n49\n0.043862\n0.092318\n\n\n26\n14\nFalse\n33\n0.125656\n0.079225\n\n\n27\n14\nTrue\n29\n0.047602\n0.071160\n\n\n28\n15\nFalse\n8\n0.108035\n0.038620\n\n\n29\n15\nTrue\n9\n0.046361\n0.039616\n\n\n\n\n30 rows × 5 columns\n\n\n\nIf expected values are passed to exp_stats() and credibility is set to True, then the output will also contain credibility-weighted expected values:\n\\[\nq^{adj} = Z^{cred} \\times q^{obs} + (1-Z^{cred}) \\times q^{exp}\n\\] where,\n\n\\(q^{adj}\\) = credibility-weighted estimate\n\\(Z^{cred}\\) = partial credibility factor\n\\(q^{obs}\\) = observed termination rate\n\\(q^{exp}\\) = expected termination rate\n\n\n(exposed_data.\n    groupby('pol_yr', 'inc_guar').\n    exp_stats(credibility=True, expected='expected_1').\n    data[['pol_yr', 'inc_guar', 'claims', 'q_obs', 'credibility',\n       'adj_expected_1', 'expected_1', 'ae_expected_1']])\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nclaims\nq_obs\ncredibility\nadj_expected_1\nexpected_1\nae_expected_1\n\n\n\n\n0\n1\nFalse\n56\n0.007254\n0.191601\n0.005432\n0.005000\n1.450813\n\n\n1\n1\nTrue\n46\n0.003989\n0.173368\n0.004825\n0.005000\n0.797752\n\n\n2\n2\nFalse\n92\n0.012953\n0.246290\n0.009052\n0.007778\n1.665336\n\n\n3\n2\nTrue\n68\n0.006408\n0.211044\n0.007489\n0.007778\n0.823868\n\n\n4\n3\nFalse\n67\n0.010393\n0.209907\n0.010521\n0.010556\n0.984559\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n49\n0.043862\n0.182625\n0.048879\n0.050000\n0.877242\n\n\n26\n14\nFalse\n33\n0.125656\n0.156725\n0.061857\n0.050000\n2.513115\n\n\n27\n14\nTrue\n29\n0.047602\n0.140771\n0.049662\n0.050000\n0.952043\n\n\n28\n15\nFalse\n8\n0.108035\n0.076400\n0.054434\n0.050000\n2.160699\n\n\n29\n15\nTrue\n9\n0.046361\n0.078370\n0.049715\n0.050000\n0.927220\n\n\n\n\n30 rows × 8 columns"
  },
  {
    "objectID": "articles/exp_summary.html#confidence-intervals",
    "href": "articles/exp_summary.html#confidence-intervals",
    "title": "Experience summaries",
    "section": "Confidence intervals",
    "text": "Confidence intervals\nIf conf_int is set to True, exp_stats() will produce lower and upper confidence interval limits for the observed termination rate.\n\n(exposed_data.\n    groupby('pol_yr', 'inc_guar').\n    exp_stats(conf_int=True).\n    data[['pol_yr', 'inc_guar', 'q_obs', 'q_obs_lower', 'q_obs_upper']])\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nq_obs\nq_obs_lower\nq_obs_upper\n\n\n\n\n0\n1\nFalse\n0.007254\n0.005441\n0.009197\n\n\n1\n1\nTrue\n0.003989\n0.002862\n0.005203\n\n\n2\n2\nFalse\n0.012953\n0.010418\n0.015628\n\n\n3\n2\nTrue\n0.006408\n0.004900\n0.008010\n\n\n4\n3\nFalse\n0.010393\n0.008066\n0.012874\n\n\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n0.043862\n0.032225\n0.056394\n\n\n26\n14\nFalse\n0.125656\n0.087578\n0.167541\n\n\n27\n14\nTrue\n0.047602\n0.031188\n0.065658\n\n\n28\n15\nFalse\n0.108035\n0.040513\n0.189061\n\n\n29\n15\nTrue\n0.046361\n0.020605\n0.077268\n\n\n\n\n30 rows × 5 columns\n\n\n\nIf no weighting variable is passed to wt, confidence intervals will be constructed assuming a binomial distribution of claims. However, if a weighting variable is supplied, a normal distribution for aggregate claims will be assumed with a mean equal to observed claims and a variance equal to:\n\\[\nVar(S) = E(N) \\times Var(X) + E(X)^2 \\times Var(N)\n\\]\nWhere S is the aggregate claim random variable, X is the weighting variable assumed to follow a normal distribution, and N is a binomial random variable for the number of claims.\nThe default confidence level is 95%. This can be changed using the conf_level argument. Below, tighter confidence intervals are constructed by decreasing the confidence level to 90%.\n\n(exposed_data.\n    groupby('pol_yr', 'inc_guar').\n    exp_stats(conf_int = True, conf_level = 0.9).\n    data[['pol_yr', 'inc_guar', 'q_obs', 'q_obs_lower', 'q_obs_upper']])\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nq_obs\nq_obs_lower\nq_obs_upper\n\n\n\n\n0\n1\nFalse\n0.007254\n0.005700\n0.008938\n\n\n1\n1\nTrue\n0.003989\n0.003035\n0.004943\n\n\n2\n2\nFalse\n0.012953\n0.010841\n0.015205\n\n\n3\n2\nTrue\n0.006408\n0.005183\n0.007727\n\n\n4\n3\nFalse\n0.010393\n0.008376\n0.012564\n\n\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n0.043862\n0.034016\n0.053709\n\n\n26\n14\nFalse\n0.125656\n0.091386\n0.159926\n\n\n27\n14\nTrue\n0.047602\n0.034471\n0.062375\n\n\n28\n15\nFalse\n0.108035\n0.054017\n0.175557\n\n\n29\n15\nTrue\n0.046361\n0.020605\n0.072117\n\n\n\n\n30 rows × 5 columns\n\n\n\nIf expected values are passed to expected, the output will also contain confidence intervals around any actual-to-expected ratios.\n\n(exposed_data.\n    groupby('pol_yr', 'inc_guar').\n    exp_stats(conf_int = True, expected='expected_1').\n    data[['pol_yr', 'inc_guar', 'ae_expected_1', \n          'ae_expected_1_lower', 'ae_expected_1_lower']])\n\n\n\n\n\n\n\n\npol_yr\ninc_guar\nae_expected_1\nae_expected_1_lower\nae_expected_1_lower\n\n\n\n\n0\n1\nFalse\n1.450813\n1.088110\n1.088110\n\n\n1\n1\nTrue\n0.797752\n0.572300\n0.572300\n\n\n2\n2\nFalse\n1.665336\n1.339510\n1.339510\n\n\n3\n2\nTrue\n0.823868\n0.630016\n0.630016\n\n\n4\n3\nFalse\n0.984559\n0.764135\n0.764135\n\n\n...\n...\n...\n...\n...\n...\n\n\n25\n13\nTrue\n0.877242\n0.644504\n0.644504\n\n\n26\n14\nFalse\n2.513115\n1.751565\n1.751565\n\n\n27\n14\nTrue\n0.952043\n0.623752\n0.623752\n\n\n28\n15\nFalse\n2.160699\n0.810262\n0.810262\n\n\n29\n15\nTrue\n0.927220\n0.412098\n0.412098\n\n\n\n\n30 rows × 5 columns\n\n\n\nLastly, if credibility is True and expected values are passed to expected, confidence intervals will also be calculated for any credibility-weighted termination rates."
  },
  {
    "objectID": "articles/exp_summary.html#miscellaneous",
    "href": "articles/exp_summary.html#miscellaneous",
    "title": "Experience summaries",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nSummary method\nAs noted above, the result of exp_stats() is an ExpStats object. If the summary() function is applied to an ExpStats object, the data will be summarized again and return a higher level ExpStats object.\nIf no additional arguments are passed, summary() returns a single row of aggregate results.\n\nexp_res.summary()\n\nExperience study results\n\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 1 x 8\n   n_claims  claims       exposure     q_obs  expected_1  expected_2  \\\n0      2869    2869  132633.995658  0.021631    0.024242    0.020895   \n\n   ae_expected_1  ae_expected_2  \n0       0.892303       1.035232  \n\n\nIf additional variable names are passed to the summary() method, then the output will group the data by those variables. In our example, if pol_yr is passed to summary(), the output will contain one row per policy year.\n\nexp_res.summary('pol_yr')\n\nExperience study results\n\nGroups: pol_yr\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 15 x 9\n   pol_yr  n_claims  claims      exposure     q_obs  expected_1  expected_2  \\\n0       1       102     102  19252.212366  0.005298    0.005000    0.021015   \n1       2       160     160  17714.780418  0.009032    0.007778    0.021014   \n2       3       124     124  16097.137376  0.007703    0.010556    0.021008   \n3       4       168     168  14535.864406  0.011558    0.013333    0.020984   \n4       5       164     164  12915.526244  0.012698    0.016111    0.020930   \n5       6       152     152  11375.931769  0.013362    0.018889    0.020925   \n6       7       164     164   9916.841762  0.016538    0.021667    0.020898   \n7       8       190     190   8447.895074  0.022491    0.024444    0.020837   \n8       9       181     181   6959.806363  0.026006    0.027222    0.020786   \n9      10       152     152   5604.283330  0.027122    0.030000    0.020772   \n\n   ae_expected_1  ae_expected_2  \n0       1.059618       0.252113  \n1       1.161258       0.429803  \n2       0.729780       0.366689  \n3       0.866822       0.550781  \n4       0.788145       0.606686  \n5       0.707376       0.638533  \n6       0.763270       0.791361  \n7       0.920079       1.079391  \n8       0.955340       1.251171  \n9       0.904070       1.305730  \n\n\nSimilarly, if inc_guar is passed to summary(), the output will contain a row for each unique value in inc_guar.\n\nexp_res.summary('inc_guar')\n\nExperience study results\n\nGroups: inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 2 x 9\n   inc_guar  n_claims  claims      exposure     q_obs  expected_1  expected_2  \\\n0     False      1601    1601  52123.245243  0.030716    0.023481       0.030   \n1      True      1268    1268  80510.750415  0.015749    0.024734       0.015   \n\n   ae_expected_1  ae_expected_2  \n0       1.308098       1.023855  \n1       0.636751       1.049963  \n\n\n\n\nColumn names\nAs a default, exp_stats() assumes the input data frame uses the following naming conventions:\n\nThe exposure column is called exposure\nThe status column is called status\n\nThese default names can be overridden using the col_exposure and col_status arguments.\nFor example, if the status column was called curr_stat in our data, we could write:\n\nexposed_data.exp_stats(col_status=\"curr_stat\")\n\n\n\nLimitations\nThe exp_stats() method only supports termination studies. It does not contain support for transaction studies or studies with multiple changes from an active to an inactive status. For information on transaction studies, see Transactions."
  },
  {
    "objectID": "articles/exp_summary.html#footnotes",
    "href": "articles/exp_summary.html#footnotes",
    "title": "Experience summaries",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSee Exposures for more information on creating exposure records.↩︎\nThis adjustment is not necessary on surrenders because the expose() function previously did this for us.↩︎\nWhen weights are supplied, additional columns are created containing the sum of weights, the sum of squared weights, and the number of records. These columns are used for re-summarizing the data (see the “Summary method” section on this page).↩︎\nSee Herzog, Thomas (1999). Introduction to Credibility Theory for more information on Limited Fluctuation Credibility.↩︎"
  },
  {
    "objectID": "articles/actxps.html",
    "href": "articles/actxps.html",
    "title": "Getting started with actxps",
    "section": "",
    "text": "This article is based on creating a termination study using sample data that comes with the actxps package. For information on transaction studies, see Transactions."
  },
  {
    "objectID": "articles/actxps.html#simulated-data-set",
    "href": "articles/actxps.html#simulated-data-set",
    "title": "Getting started with actxps",
    "section": "Simulated data set",
    "text": "Simulated data set\nThe actxps package includes a data frame containing simulated census data for a theoretical deferred annuity product with an optional guaranteed income rider. The grain of this data is one row per policy.\n\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\ncensus_dat\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\ninc_guar\nqual\nage\nproduct\ngender\nwd_age\npremium\nterm_date\n\n\n\n\n0\n1\nActive\n2014-12-17\nTrue\nFalse\n56\nb\nF\n77\n370.0\nNaT\n\n\n1\n2\nSurrender\n2007-09-24\nFalse\nFalse\n71\na\nF\n71\n708.0\n2019-03-08\n\n\n2\n3\nActive\n2012-10-06\nFalse\nTrue\n62\nb\nF\n63\n466.0\nNaT\n\n\n3\n4\nSurrender\n2005-06-27\nTrue\nTrue\n62\nc\nM\n62\n485.0\n2018-11-29\n\n\n4\n5\nActive\n2019-11-22\nFalse\nFalse\n62\nc\nF\n67\n978.0\nNaT\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n19995\n19996\nActive\n2014-08-11\nTrue\nTrue\n55\nb\nF\n75\n3551.0\nNaT\n\n\n19996\n19997\nSurrender\n2006-11-20\nFalse\nFalse\n68\nc\nF\n77\n336.0\n2017-07-09\n\n\n19997\n19998\nSurrender\n2017-02-20\nTrue\nFalse\n68\nc\nF\n68\n1222.0\n2018-08-03\n\n\n19998\n19999\nActive\n2015-04-11\nFalse\nTrue\n67\na\nM\n78\n2138.0\nNaT\n\n\n19999\n20000\nActive\n2009-04-29\nTrue\nTrue\n72\nc\nM\n72\n5751.0\nNaT\n\n\n\n\n20000 rows × 11 columns\n\n\n\nThe data includes 3 policy statuses: Active, Death, and Surrender.\n\nstatus_counts = census_dat.value_counts('status')\nstatus_counts\n\nstatus\nActive       15212\nSurrender     2972\nDeath         1816\nName: count, dtype: int64\n\n\nLet’s assume we’re interested in calculating the probability of surrender over one policy year. We cannot simply calculate the proportion of policies in a surrendered status as this does not represent an annualized surrender rate.\n\n# incorrect\nstatus_counts / sum(status_counts)\n\nstatus\nActive       0.7606\nSurrender    0.1486\nDeath        0.0908\nName: count, dtype: float64"
  },
  {
    "objectID": "articles/actxps.html#creating-exposed-data",
    "href": "articles/actxps.html#creating-exposed-data",
    "title": "Getting started with actxps",
    "section": "Creating exposed data",
    "text": "Creating exposed data\nIn order to calculate annual surrender rates, we need to break each policy into multiple records. There should be one row per policy per year.\nThe ExposedDF() class is used to perform this transformation.\n\nexposed_data = xp.ExposedDF(census_dat, end_date=\"2019-12-31\",\n                            target_status=\"Surrender\")\n\nexposed_data\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\nA DataFrame: 141,252 x 15\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000  \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000  \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000  \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000  \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000  \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984  \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000  \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000  \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000  \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000  \n\n\nExposedDF objects include an exposure data frame in the data property and some additional attributes related to the experience study.\nNow that the data has been “exposed” by policy year, the observed annual surrender probability can be calculated as:\n\n(sum(exposed_data.data.status == \"Surrender\") /\n    sum(exposed_data.data.exposure))\n\n0.021630955063662638\n\n\nAs a default, ExposedDF() calculates exposures by policy year. This can also be accomplished with the class method ExposedDF.expose_py(). Other implementations of ExposedDF() include:\n\nExposedDF.expose_cy = exposures by calendar year\nExposedDF.expose_cq = exposures by calendar quarter\nExposedDF.expose_cm = exposures by calendar month\nExposedDF.expose_cw = exposures by calendar week\nExposedDF.expose_pq = exposures by policy quarter\nExposedDF.expose_pm = exposures by policy month\nExposedDF.expose_pw = exposures by policy week\n\nSee Exposures for further details on exposure calculations."
  },
  {
    "objectID": "articles/actxps.html#experience-study-summary-function",
    "href": "articles/actxps.html#experience-study-summary-function",
    "title": "Getting started with actxps",
    "section": "Experience study summary function",
    "text": "Experience study summary function\nThe exp_stats() method creates a summary of observed experience data. The output of this function is an ExpStats object.\n\nexposed_data.exp_stats()\n\nExperience study results\n\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 1 x 4\n   n_claims  claims       exposure     q_obs\n0      2869    2869  132633.995658  0.021631\n\n\nSee Experience Summaries for further details on exposure calculations.\n\nGrouped experience data\nExposedDF objects contain a groupby() method that is used to specify grouping variables for downstream methods like exp_stats(). Below, the data is grouped by policy year (pol_yr) and an indicator for the presence of a guaranteed income rider (inc_guar). After exp_stats() is called, the resulting output contains one record for each unique group.\n\nexp_res = (exposed_data.\n    groupby(\"pol_yr\", \"inc_guar\").\n    exp_stats())\n\nexp_res\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 6\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs\n0       1     False        56      56   7719.807740  0.007254\n1       1      True        46      46  11532.404626  0.003989\n2       2     False        92      92   7102.813160  0.012953\n3       2      True        68      68  10611.967258  0.006408\n4       3     False        67      67   6446.916146  0.010393\n5       3      True        57      57   9650.221229  0.005907\n6       4     False       123     123   5798.909986  0.021211\n7       4      True        45      45   8736.954420  0.005151\n8       5     False        97      97   5105.875799  0.018998\n9       5      True        67      67   7809.650445  0.008579\n\n\n\n\nActual-to-expected rates\nTo derive actual-to-expected rates, first attach one or more columns of expected termination rates to the exposure data. Then, pass these column names to the expected argument of exp_stats().\n\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10),\n                                 [.2, .15], np.repeat(0.05, 3)))\n\n# using 2 different expected termination rates\nexposed_data.data['expected_1'] = \\\n    expected_table[exposed_data.data.pol_yr - 1]\nexposed_data.data['expected_2'] = \\\n    np.where(exposed_data.data.inc_guar, 0.015, 0.03)\n\nexp_res = (exposed_data.\n           groupby(\"pol_yr\", \"inc_guar\").\n           exp_stats(expected=[\"expected_1\", \"expected_2\"]))\n\nexp_res\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 30 x 10\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs  expected_1  \\\n0       1     False        56      56   7719.807740  0.007254    0.005000   \n1       1      True        46      46  11532.404626  0.003989    0.005000   \n2       2     False        92      92   7102.813160  0.012953    0.007778   \n3       2      True        68      68  10611.967258  0.006408    0.007778   \n4       3     False        67      67   6446.916146  0.010393    0.010556   \n5       3      True        57      57   9650.221229  0.005907    0.010556   \n6       4     False       123     123   5798.909986  0.021211    0.013333   \n7       4      True        45      45   8736.954420  0.005151    0.013333   \n8       5     False        97      97   5105.875799  0.018998    0.016111   \n9       5      True        67      67   7809.650445  0.008579    0.016111   \n\n   expected_2  ae_expected_1  ae_expected_2  \n0       0.030       1.450813       0.241802  \n1       0.015       0.797752       0.265917  \n2       0.030       1.665336       0.431754  \n3       0.015       0.823868       0.427191  \n4       0.030       0.984559       0.346419  \n5       0.015       0.559573       0.393773  \n6       0.030       1.590816       0.707029  \n7       0.015       0.386290       0.343369  \n8       0.030       1.179169       0.633257  \n9       0.015       0.532498       0.571942  \n\n\n\n\nplot() and table() methods\nExpStats objects have plot() and table() methods that create visualizations and summary tables. See Data visualizations for full details on these functions.\n\nexp_res.plot()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# first 10 rows showed for brevity\nexp_res.table()\n\n\n\n\n\n\nsummary()\nCalling the summary() method on an ExpStats object re-summarizes experience results. This also produces an ExpStats object.\n\nexp_res.summary()\n\nExperience study results\n\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 1 x 8\n   n_claims  claims       exposure     q_obs  expected_1  expected_2  \\\n0      2869    2869  132633.995658  0.021631    0.024242    0.020895   \n\n   ae_expected_1  ae_expected_2  \n0       0.892303       1.035232  \n\n\nIf additional variables are passed to *by, these variables become groups in the re-summarized ExpStats object.\n\nexp_res.summary('inc_guar')\n\nExperience study results\n\nGroups: inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 2 x 9\n   inc_guar  n_claims  claims      exposure     q_obs  expected_1  expected_2  \\\n0     False      1601    1601  52123.245243  0.030716    0.023481       0.030   \n1      True      1268    1268  80510.750415  0.015749    0.024734       0.015   \n\n   ae_expected_1  ae_expected_2  \n0       1.308098       1.023855  \n1       0.636751       1.049963"
  },
  {
    "objectID": "articles/actxps.html#shiny-app",
    "href": "articles/actxps.html#shiny-app",
    "title": "Getting started with actxps",
    "section": "Shiny App",
    "text": "Shiny App\nExposedDF objects have an exp_shiny() method that launches a Shiny app to enable interactive exploration of experience data.\n\nexposed_data.exp_shiny()"
  },
  {
    "objectID": "articles/exposures.html",
    "href": "articles/exposures.html",
    "title": "Exposure calculations",
    "section": "",
    "text": "Census-level data refers to a data set wherein there is one row per policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\nA common step in experience studies is converting census-level data into exposure-level data. The ExposedDF class performs this task. Specifically, this class:\nIf you already have exposure-level data available, the class method ExposedDF.from_DataFrame() can be used to convert a data frame into an ExposedDF object."
  },
  {
    "objectID": "articles/exposures.html#toy-census-data",
    "href": "articles/exposures.html#toy-census-data",
    "title": "Exposure calculations",
    "section": "Toy census data",
    "text": "Toy census data\nTo get started, we’re going to use a toy census data frame from the actxps package that contains 3 policies: one active, one that terminated due to death, and one that terminated due to surrender.\ntoy_census contains the 4 columns necessary to compute exposures:\n\npol_num: a unique identifier for individual policies\nstatus: the policy status\nissue_date: issue date\nterm_date: termination date, if any. Otherwise NA\n\n\nimport actxps as xp\n\ntoy_census = xp.load_toy_census()\ntoy_census\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\nterm_date\n\n\n\n\n0\n1\nActive\n2010-01-01\nNaT\n\n\n1\n2\nDeath\n2011-05-27\n2020-09-14\n\n\n2\n3\nSurrender\n2009-11-10\n2022-02-25"
  },
  {
    "objectID": "articles/exposures.html#policy-year-exposures",
    "href": "articles/exposures.html#policy-year-exposures",
    "title": "Exposure calculations",
    "section": "Policy year exposures",
    "text": "Policy year exposures\nLet’s assume we’re performing an experience study as of 2022-12-31 and we’re interested in policy year exposures. Here’s what we should expect for our 3 policies.\n\nPolicy 1 was issued on January 1, 2010 and has not terminated. Therefore we expect 13 exposure years.\nPolicy 2 was issued on May 27, 2011 and was terminated in 2020 due to death. The death occurred after the 9th policy anniversary, therefore we expect 9 fully exposed years and a partial exposure in the 10th year.\nPolicy 3 was issued on November 10, 2009 and was terminated in 2022 due to surrender. The surrender occurred after the 12th policy anniversary, therefore we expect 12 fully exposed years and a partial exposure in the 13th year.\n\nTo calculate exposures, we pass our data to ExposedDF() and we specify a study end_date.\n\nexposed_data = xp.ExposedDF(toy_census, end_date=\"2022-12-31\")\n\nThis creates a new ExposedDF object, which contains a data property and additional attributes related to the experience study.\nLet’s examine what happened to each policy.\nPolicy 1: As expected, there are 13 rows for this policy. New columns were added for the policy year (pol_yr), date ranges (pol_date_yr, pol_date_yr_end), and exposure. All exposures are 100% since this policy was active for all 13 years.\nWhen the data is printed, additional attributes from the ExposedDF class are displayed.\n\nexposed_data.data.query('pol_num == 1')\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\nterm_date\npol_yr\npol_date_yr\npol_date_yr_end\nexposure\n\n\n\n\n0\n1\nActive\n2010-01-01\nNaT\n1\n2010-01-01\n2010-12-31\n1.0\n\n\n1\n1\nActive\n2010-01-01\nNaT\n2\n2011-01-01\n2011-12-31\n1.0\n\n\n2\n1\nActive\n2010-01-01\nNaT\n3\n2012-01-01\n2012-12-31\n1.0\n\n\n3\n1\nActive\n2010-01-01\nNaT\n4\n2013-01-01\n2013-12-31\n1.0\n\n\n4\n1\nActive\n2010-01-01\nNaT\n5\n2014-01-01\n2014-12-31\n1.0\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n8\n1\nActive\n2010-01-01\nNaT\n9\n2018-01-01\n2018-12-31\n1.0\n\n\n9\n1\nActive\n2010-01-01\nNaT\n10\n2019-01-01\n2019-12-31\n1.0\n\n\n10\n1\nActive\n2010-01-01\nNaT\n11\n2020-01-01\n2020-12-31\n1.0\n\n\n11\n1\nActive\n2010-01-01\nNaT\n12\n2021-01-01\n2021-12-31\n1.0\n\n\n12\n1\nActive\n2010-01-01\nNaT\n13\n2022-01-01\n2022-12-31\n1.0\n\n\n\n\n13 rows × 8 columns\n\n\n\nPolicy 2: There are 10 rows for this policy. The first 9 periods show the policy in an active status and the termination date (term_date) is set to NA. The last period includes the final status of “Death” and the actual termination date. The last exposure is less than one because roughly a third of a year elapsed between the last anniversary date on 2020-05-27 and the termination date on 2020-09-14.\n\nexposed_data.data.query('pol_num == 2')\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\nterm_date\npol_yr\npol_date_yr\npol_date_yr_end\nexposure\n\n\n\n\n13\n2\nActive\n2011-05-27\nNaT\n1\n2011-05-27\n2012-05-26\n1.00000\n\n\n14\n2\nActive\n2011-05-27\nNaT\n2\n2012-05-27\n2013-05-26\n1.00000\n\n\n15\n2\nActive\n2011-05-27\nNaT\n3\n2013-05-27\n2014-05-26\n1.00000\n\n\n16\n2\nActive\n2011-05-27\nNaT\n4\n2014-05-27\n2015-05-26\n1.00000\n\n\n17\n2\nActive\n2011-05-27\nNaT\n5\n2015-05-27\n2016-05-26\n1.00000\n\n\n18\n2\nActive\n2011-05-27\nNaT\n6\n2016-05-27\n2017-05-26\n1.00000\n\n\n19\n2\nActive\n2011-05-27\nNaT\n7\n2017-05-27\n2018-05-26\n1.00000\n\n\n20\n2\nActive\n2011-05-27\nNaT\n8\n2018-05-27\n2019-05-26\n1.00000\n\n\n21\n2\nActive\n2011-05-27\nNaT\n9\n2019-05-27\n2020-05-26\n1.00000\n\n\n22\n2\nDeath\n2011-05-27\n2020-09-14\n10\n2020-05-27\n2021-05-26\n0.30411\n\n\n\n\n\n\n\nPolicy 3: There are 13 rows for this policy. The first 12 periods show the policy in an active status and the termination date (term_date) is set to NA. The last period includes the final status of “Surrender” and the actual termination date. The last exposure is less than one because the roughly a third of a year elapsed between the last anniversary date on 2021-11-10 and the termination date on 2022-02-25.\n\nexposed_data.data.query('pol_num == 3')\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\nterm_date\npol_yr\npol_date_yr\npol_date_yr_end\nexposure\n\n\n\n\n23\n3\nActive\n2009-11-10\nNaT\n1\n2009-11-10\n2010-11-09\n1.00000\n\n\n24\n3\nActive\n2009-11-10\nNaT\n2\n2010-11-10\n2011-11-09\n1.00000\n\n\n25\n3\nActive\n2009-11-10\nNaT\n3\n2011-11-10\n2012-11-09\n1.00000\n\n\n26\n3\nActive\n2009-11-10\nNaT\n4\n2012-11-10\n2013-11-09\n1.00000\n\n\n27\n3\nActive\n2009-11-10\nNaT\n5\n2013-11-10\n2014-11-09\n1.00000\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n31\n3\nActive\n2009-11-10\nNaT\n9\n2017-11-10\n2018-11-09\n1.00000\n\n\n32\n3\nActive\n2009-11-10\nNaT\n10\n2018-11-10\n2019-11-09\n1.00000\n\n\n33\n3\nActive\n2009-11-10\nNaT\n11\n2019-11-10\n2020-11-09\n1.00000\n\n\n34\n3\nActive\n2009-11-10\nNaT\n12\n2020-11-10\n2021-11-09\n1.00000\n\n\n35\n3\nSurrender\n2009-11-10\n2022-02-25\n13\n2021-11-10\n2022-11-09\n0.29589\n\n\n\n\n13 rows × 8 columns\n\n\n\n\nStudy start date\nThe previous section only supplied data and a study end_date to ExposedDF(). This is the minimum required arguments for the function. Optionally, a start_date can be supplied that will drop exposure periods that begin before a specified date.\n\nxp.ExposedDF(toy_census, end_date=\"2022-12-31\", start_date=\"2019-12-31\")\n\nExposure data\n\nExposure type: policy_year\nTarget status: None\nStudy range: 2019-12-31 to 2022-12-31\n\nA DataFrame: 6 x 8\n    pol_num     status issue_date  term_date  pol_yr pol_date_yr  \\\n10        1     Active 2010-01-01        NaT      11  2020-01-01   \n11        1     Active 2010-01-01        NaT      12  2021-01-01   \n12        1     Active 2010-01-01        NaT      13  2022-01-01   \n22        2      Death 2011-05-27 2020-09-14      10  2020-05-27   \n34        3     Active 2009-11-10        NaT      12  2020-11-10   \n35        3  Surrender 2009-11-10 2022-02-25      13  2021-11-10   \n\n   pol_date_yr_end  exposure  \n10      2020-12-31   1.00000  \n11      2021-12-31   1.00000  \n12      2022-12-31   1.00000  \n22      2021-05-26   0.30411  \n34      2021-11-09   1.00000  \n35      2022-11-09   0.29589  \n\n\n\n\nTarget status\nMost experience studies use the annual exposure method which allocates a full period of exposure for the particular termination event of interest in the scope of the study.\nThe intuition for this approach is simple: let’s assume we have an unrealistically small study with a single data point for one policy over the course of one year. Let’s assume that policy terminated due to surrender half way through the year.\nIf we don’t apply the annual exposure method, we would calculate a termination rate as:\n\\[\nq^{surr} = \\frac{claims}{exposures} = \\frac{1}{0.5} = 200\\%\n\\]\nA termination rate of 200% doesn’t make any sense. Under the annual exposure method we would see a rate of 100%, which is intuitive.\n\\[\nq^{surr} = \\frac{claims}{exposures} = \\frac{1}{1} = 100\\%\n\\]\nThe annual exposure method can be applied by passing a character vector of target statuses to the ExposedDF() class.\nLet’s assume we are performing a surrender study.\n\nexposed_data2 = xp.ExposedDF(toy_census, end_date=\"2022-12-31\",\n                             target_status=\"Surrender\")\n\nNow let’s verify that the exposure on the surrendered policy increased to 100% in the last exposure period.\n\nexposed_data2.data.groupby('pol_num').tail(1)\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\nterm_date\npol_yr\npol_date_yr\npol_date_yr_end\nexposure\n\n\n\n\n12\n1\nActive\n2010-01-01\nNaT\n13\n2022-01-01\n2022-12-31\n1.00000\n\n\n22\n2\nDeath\n2011-05-27\n2020-09-14\n10\n2020-05-27\n2021-05-26\n0.30411\n\n\n35\n3\nSurrender\n2009-11-10\n2022-02-25\n13\n2021-11-10\n2022-11-09\n1.00000"
  },
  {
    "objectID": "articles/exposures.html#other-exposure-periods",
    "href": "articles/exposures.html#other-exposure-periods",
    "title": "Exposure calculations",
    "section": "Other exposure periods",
    "text": "Other exposure periods\nThe default exposure basis used by ExposedDF() is policy years. Using the arguments cal_expo and expo_length other exposure periods can be used.\n\nCalendar years\nIf cal_expo is set to True, calendar year exposures will be calculated.\nLooking at the second policy, we can see that the first year is left-censored because the policy was issued two-fifths of the way through the year, and the last period is right-censored because the policy terminated roughly seven-tenths of the way through the year.\n\nexposed_cal = xp.ExposedDF(toy_census, end_date=\"2022-12-31\",\n                           cal_expo=True, target_status=\"Surrender\")\n\nexposed_cal.data.query('pol_num == 2')\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\nterm_date\ncal_yr\ncal_yr_end\nexposure\n\n\n\n\n13\n2\nActive\n2011-05-27\nNaT\n2011-01-01\n2011-12-31\n0.600000\n\n\n14\n2\nActive\n2011-05-27\nNaT\n2012-01-01\n2012-12-31\n1.000000\n\n\n15\n2\nActive\n2011-05-27\nNaT\n2013-01-01\n2013-12-31\n1.000000\n\n\n16\n2\nActive\n2011-05-27\nNaT\n2014-01-01\n2014-12-31\n1.000000\n\n\n17\n2\nActive\n2011-05-27\nNaT\n2015-01-01\n2015-12-31\n1.000000\n\n\n18\n2\nActive\n2011-05-27\nNaT\n2016-01-01\n2016-12-31\n1.000000\n\n\n19\n2\nActive\n2011-05-27\nNaT\n2017-01-01\n2017-12-31\n1.000000\n\n\n20\n2\nActive\n2011-05-27\nNaT\n2018-01-01\n2018-12-31\n1.000000\n\n\n21\n2\nActive\n2011-05-27\nNaT\n2019-01-01\n2019-12-31\n1.000000\n\n\n22\n2\nDeath\n2011-05-27\n2020-09-14\n2020-01-01\n2020-12-31\n0.704918\n\n\n\n\n\n\n\n\n\nQuarters, months, and weeks\nThe length of the exposure period can be decreased by passing \"quarter\", \"month\", or \"week\" to the expo_length argument. This can be used with policy or calendar-based exposures.\n\n(xp.ExposedDF(toy_census, end_date=\"2022-12-31\", cal_expo=True,\n              expo_length=\"quarter\", target_status=\"Surrender\").\n              data.query('pol_num == 2'))\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\nterm_date\ncal_qtr\ncal_qtr_end\nexposure\n\n\n\n\n52\n2\nActive\n2011-05-27\nNaT\n2011-04-01\n2011-06-30\n0.384615\n\n\n53\n2\nActive\n2011-05-27\nNaT\n2011-07-01\n2011-09-30\n1.000000\n\n\n54\n2\nActive\n2011-05-27\nNaT\n2011-10-01\n2011-12-31\n1.000000\n\n\n55\n2\nActive\n2011-05-27\nNaT\n2012-01-01\n2012-03-31\n1.000000\n\n\n56\n2\nActive\n2011-05-27\nNaT\n2012-04-01\n2012-06-30\n1.000000\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n85\n2\nActive\n2011-05-27\nNaT\n2019-07-01\n2019-09-30\n1.000000\n\n\n86\n2\nActive\n2011-05-27\nNaT\n2019-10-01\n2019-12-31\n1.000000\n\n\n87\n2\nActive\n2011-05-27\nNaT\n2020-01-01\n2020-03-31\n1.000000\n\n\n88\n2\nActive\n2011-05-27\nNaT\n2020-04-01\n2020-06-30\n1.000000\n\n\n89\n2\nDeath\n2011-05-27\n2020-09-14\n2020-07-01\n2020-09-30\n0.826087\n\n\n\n\n38 rows × 7 columns\n\n\n\n\n\nConvenience functions\nThe following functions are class methods of ExposedDF() that target a specific exposure type without specifying cal_expo and expo_length.\n\nExposedDF.expose_py() = exposures by policy year\nExposedDF.expose_pq() = exposures by policy quarter\nExposedDF.expose_pm() = exposures by policy month\nExposedDF.expose_pw() = exposures by policy week\nExposedDF.expose_cy() = exposures by calendar year\nExposedDF.expose_cq() = exposures by calendar quarter\nExposedDF.expose_cm() = exposures by calendar month\nExposedDF.expose_cw() = exposures by calendar week"
  },
  {
    "objectID": "articles/exposures.html#split-exposures-by-calendar-period-and-policy-year",
    "href": "articles/exposures.html#split-exposures-by-calendar-period-and-policy-year",
    "title": "Exposure calculations",
    "section": "Split exposures by calendar period and policy year",
    "text": "Split exposures by calendar period and policy year\nA common technique used in experience studies is to split calendar years into two records: a pre-anniversary record and a post-anniversary record. In actxps, this can be accomplished using the expose_split() method.\nLet’s continue examining the second policy. exposed_cal, which contains calendar year exposures, is passed into expose_split(). The resulting data now contains 19 records instead of 10. There is one record for 2011 and 2 records for all other years. The year 2011 only has a single record because the policy was issued in this year, so there can only be a post-anniversary record.\n\nsplit = exposed_cal.expose_split()\n\nsplit.data.query('pol_num == 2')[\n    ['cal_yr', 'cal_yr_end', 'pol_yr', 'exposure_pol', 'exposure_cal']]\n\n\n\n\n\n\n\n\ncal_yr\ncal_yr_end\npol_yr\nexposure_pol\nexposure_cal\n\n\n\n\n13\n2011-05-27\n2011-12-31\n1\n0.598361\n0.600000\n\n\n14\n2012-01-01\n2012-05-26\n1\n0.401639\n0.401639\n\n\n14\n2012-05-27\n2012-12-31\n2\n0.600000\n0.598361\n\n\n15\n2013-01-01\n2013-05-26\n2\n0.400000\n0.400000\n\n\n15\n2013-05-27\n2013-12-31\n3\n0.600000\n0.600000\n\n\n...\n...\n...\n...\n...\n...\n\n\n20\n2018-05-27\n2018-12-31\n8\n0.600000\n0.600000\n\n\n21\n2019-01-01\n2019-05-26\n8\n0.400000\n0.400000\n\n\n21\n2019-05-27\n2019-12-31\n9\n0.598361\n0.600000\n\n\n22\n2020-01-01\n2020-05-26\n9\n0.401639\n0.401639\n\n\n22\n2020-05-27\n2020-12-31\n10\n0.304110\n0.303279\n\n\n\n\n19 rows × 5 columns\n\n\n\nThe output of expose_split() contains two exposure columns.\n\nexposure_pol contains policy year exposures\nexposure_cal contains calendar year exposures\n\nThe two exposure bases will often not match for two reasons:\n\nCalendar years and policy years have different start and end dates that may or may not include a leap day. In the first row, the calendar year exposure is 0.6 years of the year 2011, which does not include a leap day. In the second row, the policy year exposure is 0.5984 years of the policy year spanning 2011-05-27 to 2012-05-26, which does include a leap day.\nApplication of the annual exposure method. If the termination event of interest appears on a post-anniversary record, policy exposures will be 1 and calendar exposures will be the fraction of the year spanning the anniversary to December 31st. Conversely, if the termination event of interest appears on a pre-anniversary record, calendar exposures will be 1 and policy exposures will be the fraction of the policy year from January 1st to the last day of the current policy year. While it may sound confusing at first, these rules are important to ensure that the termination event of interest always has an exposure of 1 when the data is grouped on a calendar year or policy year basis.\n\nSome downstream methods like exp_stats() expect ExposedDF objects to have a single column for exposures. For split exposures, the exposure basis must be specified using the col_exposure argument.\n\nsplit.exp_stats()\n\n\n\nA `SplitExposedDF` was passed without clarifying which exposure basis should be used to summarize results. Hint: Pass \"exposure_pol\" to `col_exposure` for policy year exposures pass \"exposure_cal\" to `col_exposure` for calendar exposures.\n\n\n\nsplit.exp_stats(col_exposure=\"exposure_pol\")\n\nExperience study results\n\nTarget status: Surrender\nStudy range: 1900-01-01 to 2022-12-31\n\n\nA DataFrame: 1 x 4\n   n_claims  claims  exposure     q_obs\n0         1       1  35.30411  0.028325\n\n\nexpose_split() doesn’t just work with calendar year exposures. Calendar quarters, months, or weeks can also be split. For periods shorter than a year, a record is only split into pre- and post-anniversary segments if a policy anniversary appears in the middle of the period.\n\n(xp.ExposedDF.expose_cq(toy_census, \"2022-12-31\",\n                        target_status=\"Surrender\").\n    expose_split().\n    data.query('pol_num == 2')[\n    ['cal_qtr', 'cal_qtr_end', 'pol_yr', 'exposure_pol', 'exposure_cal']])\n\n\n\n\n\n\n\n\ncal_qtr\ncal_qtr_end\npol_yr\nexposure_pol\nexposure_cal\n\n\n\n\n52\n2011-05-27\n2011-06-30\n1\n0.095628\n0.384615\n\n\n53\n2011-07-01\n2011-09-30\n1\n0.251366\n1.000000\n\n\n54\n2011-10-01\n2011-12-31\n1\n0.251366\n1.000000\n\n\n55\n2012-01-01\n2012-03-31\n1\n0.248634\n1.000000\n\n\n56\n2012-04-01\n2012-05-26\n1\n0.153005\n0.615385\n\n\n...\n...\n...\n...\n...\n...\n\n\n86\n2019-10-01\n2019-12-31\n9\n0.251366\n1.000000\n\n\n87\n2020-01-01\n2020-03-31\n9\n0.248634\n1.000000\n\n\n88\n2020-04-01\n2020-05-26\n9\n0.153005\n0.615385\n\n\n88\n2020-05-27\n2020-06-30\n10\n0.095890\n0.384615\n\n\n89\n2020-07-01\n2020-09-30\n10\n0.304110\n1.206522\n\n\n\n\n47 rows × 5 columns\n\n\n\nNote, however, that calendar period exposures will always be expressed in the original units and policy exposures will always be expressed in years. Above, calendar exposures are quarters whereas policy exposures are years."
  },
  {
    "objectID": "articles/exposures.html#miscellaneous",
    "href": "articles/exposures.html#miscellaneous",
    "title": "Exposure calculations",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nColumn names\nAs a default, ExposedDF() assumes the census data frame uses the following naming conventions:\n\nThe policy number column is called pol_num\nThe status column is called status\nThe issue date column is called issue_date\nThe termination date column is called term_date\n\nThese default names can be overridden using the col_pol_num, col_status, col_issue_date, and col_term_date arguments.\nFor example, if the policy number column was called id in our census-level data, we could write:\n\nxp.ExposedDF(toy_census, end_date=\"2022-12-31\", target_status=\"Surrender\",\n             col_pol_num=\"id\")\n\n\n\nTreatment of additional columns in the census data\nIf the census-level data contains other policy attributes like plan type or policy values, they will be broadcast across all exposure periods. Depending on the nature of the data, this may or may not be desirable. Constant policy attributes like plan type make sense to broadcast, but numeric values may or may not depending on the circumstances.\n\ntoy_census2 = toy_census.copy()\ntoy_census2['plan_type'] = [\"X\", \"Y\", \"Z\"]\ntoy_census2['policy_value'] = [100, 125, 90]\n\nxp.ExposedDF(toy_census2, end_date=\"2022-12-31\", target_status=\"Surrender\")\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2022-12-31\n\nA DataFrame: 36 x 10\n   pol_num  status issue_date term_date plan_type  policy_value  pol_yr  \\\n0        1  Active 2010-01-01       NaT         X           100       1   \n1        1  Active 2010-01-01       NaT         X           100       2   \n2        1  Active 2010-01-01       NaT         X           100       3   \n3        1  Active 2010-01-01       NaT         X           100       4   \n4        1  Active 2010-01-01       NaT         X           100       5   \n5        1  Active 2010-01-01       NaT         X           100       6   \n6        1  Active 2010-01-01       NaT         X           100       7   \n7        1  Active 2010-01-01       NaT         X           100       8   \n8        1  Active 2010-01-01       NaT         X           100       9   \n9        1  Active 2010-01-01       NaT         X           100      10   \n\n  pol_date_yr pol_date_yr_end  exposure  \n0  2010-01-01      2010-12-31       1.0  \n1  2011-01-01      2011-12-31       1.0  \n2  2012-01-01      2012-12-31       1.0  \n3  2013-01-01      2013-12-31       1.0  \n4  2014-01-01      2014-12-31       1.0  \n5  2015-01-01      2015-12-31       1.0  \n6  2016-01-01      2016-12-31       1.0  \n7  2017-01-01      2017-12-31       1.0  \n8  2018-01-01      2018-12-31       1.0  \n9  2019-01-01      2019-12-31       1.0  \n\n\nIf your experience study requires a numeric feature that varies over time (ex: policy values, crediting rates, etc.), you can always attach it to an ExposedDF object’s data using a join function.\n\n# Illustrative example - assume `values` is a data frame containing the columns pol_num and pol_yr.\n\nexposed_data.data.merge(values, on=['pol_num', 'pol_yr'], how='left')\n\n\n\nLimitations\nExposedDF() does not support studies with multiple changes between an active status and an inactive status."
  },
  {
    "objectID": "articles/misc.html",
    "href": "articles/misc.html",
    "title": "Other functions",
    "section": "",
    "text": "This article features functions that are not covered in other articles.\nimport actxps as xp\nimport pandas as pd\nimport numpy as np"
  },
  {
    "objectID": "articles/misc.html#working-with-aggregate-experience-data",
    "href": "articles/misc.html#working-with-aggregate-experience-data",
    "title": "Other functions",
    "section": "Working with aggregate experience data",
    "text": "Working with aggregate experience data\nSeriatim-level policy experience data is often not available for analysis. This is almost always the case with industry studies that contain experience data submitted by multiple parties. In these cases, experience is grouped by a several common policy attributes and aggregated accordingly.\nThe typical workflow in actxps of ExposedDF().exp_stats() for termination studies or ExposedDF().add_transactions().trx_stats() for transaction studies doesn’t apply if the starting data is aggregated. That is because another party has already gone through the steps of creating exposure records and performing an initial level of aggregation.\nActxps provides two functions designed to work with aggregate experience data.\n\nFor termination studies, ExpStats.from_DataFrame() converts a data frame of aggregate experience into an ExpStats object. = For transaction studies, TrxStats.from_DataFrame() converts a data frame of aggregate experience into a TrxStats object.\n\nBoth object classes have a summary() method which summarizes experience across any grouping variables passed to the function. The output of summary() will always be another ExpStats (or TrxStats) object, and will look just like the results of exp_stats() (or trx_stats()). For downstream reporting, summary results can be passed to the visualization methods plot() and table().\nThe agg_sim_dat data set contains aggregate experience on a theoretical block of deferred annuity contracts. Below, ExpStats.from_DataFrame() is used to convert the data to an ExpStats, and summary() is called using multiple grouping variables.\n\nagg_sim_dat = xp.load_agg_sim_dat()\nagg_sim_ExpStats = xp.ExpStats.from_DataFrame(\n    agg_sim_dat,\n    col_exposure=\"exposure_n\",\n    col_claims=\"claims_n\",\n    conf_int=True,\n    start_date=2005,\n    end_date=2019,\n    target_status=\"Surrender\")\n\nResults summarized by policy year\n\nagg_sim_ExpStats.summary('pol_yr')\n\nExperience study results\n\nGroups: pol_yr\nTarget status: Surrender\nStudy range: 2005 to 2019\n\n\nA DataFrame: 15 x 7\n   pol_yr  n_claims  claims      exposure     q_obs  q_obs_lower  q_obs_upper\n0       1       102     102  19252.212366  0.005298     0.004311     0.006337\n1       2       160     160  17714.780418  0.009032     0.007677     0.010443\n2       3       124     124  16097.137376  0.007703     0.006399     0.009070\n3       4       168     168  14535.852953  0.011558     0.009838     0.013346\n4       5       164     164  12915.526244  0.012698     0.010840     0.014634\n5       6       152     152  11375.931769  0.013362     0.011252     0.015471\n6       7       164     164   9916.841762  0.016538     0.014117     0.019058\n7       8       190     190   8447.885912  0.022491     0.019413     0.025687\n8       9       181     181   6959.806363  0.026006     0.022271     0.029742\n9      10       152     152   5604.283330  0.027122     0.023018     0.031405\n\n\nResults summarized by income guarantee presence and product\n\nagg_sim_ExpStats.summary('inc_guar', 'product')\n\nExperience study results\n\nGroups: inc_guar, product\nTarget status: Surrender\nStudy range: 2005 to 2019\n\n\nA DataFrame: 6 x 8\n   inc_guar product  n_claims  claims      exposure     q_obs  q_obs_lower  \\\n0     False       a       449     449  12738.212621  0.035248     0.032108   \n1     False       b       392     392  13489.708578  0.029059     0.026242   \n2     False       c       760     760  25895.314881  0.029349     0.027302   \n3      True       a       361     361  19966.028820  0.018081     0.016278   \n4      True       b       273     273  19694.192761  0.013862     0.012237   \n5      True       c       634     634  40850.510510  0.015520     0.014345   \n\n   q_obs_upper  \n0     0.038467  \n1     0.031950  \n2     0.031434  \n3     0.019934  \n4     0.015538  \n5     0.016719  \n\n\nExpStats.from_DataFrame() and TrxStats.from_DataFrame() contain several arguments for optional calculations like confidence intervals, expected values, weighting variables, and more. These arguments mirror the functionality in exp_stats() and trx_stats(). Both functions also contain multiple arguments for specifying column names associated with required values like exposures and claims."
  },
  {
    "objectID": "articles/misc.html#policy-duration-functions",
    "href": "articles/misc.html#policy-duration-functions",
    "title": "Other functions",
    "section": "Policy duration functions",
    "text": "Policy duration functions\nThe pol_() family of functions calculates policy years, months, quarters, weeks, or any other arbitrary duration. Each function accepts a vector of dates and a vector of issue dates.\nExample: assume a policy was issued on 2022-05-10 and we are interested in calculating various policy duration values at the end of calendar years 2022-2032.\n\ndates = pd.to_datetime({\n    'year': 2022 + np.arange(11),\n    'month': 12,\n    'day': 31\n})\n\n# policy years\nxp.pol_yr(dates, \"2022-05-10\")\n\narray([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])\n\n\n\n# policy quarters\nxp.pol_qtr(dates, \"2022-05-10\")\n\narray([ 3,  7, 11, 15, 19, 23, 27, 31, 35, 39, 43])\n\n\n\n# policy months\nxp.pol_mth(dates, \"2022-05-10\")\n\narray([  8,  20,  32,  44,  56,  68,  80,  92, 104, 116, 128])\n\n\n\n# policy weeks\nxp.pol_wk(dates, \"2022-05-10\")\n\narray([ 34,  86, 139, 191, 243, 295, 347, 399, 452, 504, 556], dtype=int64)"
  },
  {
    "objectID": "articles/visualizations.html",
    "href": "articles/visualizations.html",
    "title": "Data visualizations",
    "section": "",
    "text": "This article describes the data visualization functions available in the actxps package."
  },
  {
    "objectID": "articles/visualizations.html#plotting-termination-studies",
    "href": "articles/visualizations.html#plotting-termination-studies",
    "title": "Data visualizations",
    "section": "Plotting termination studies",
    "text": "Plotting termination studies\nBefore we start plotting, we need to create experience study data. The examples below use the simulated census_dat and withdrawals data sets that come with the actxps package. First, exposure records are created using ExposedDF(). Then, illustrative expected values and withdrawal transactions are added to the data.\n\nimport actxps as xp\nimport numpy as np\n\n# create exposure records\ncensus_dat = xp.load_census_dat()\nexposed_data = xp.ExposedDF(census_dat, end_date=\"2019-12-31\",\n                            target_status=\"Surrender\")\n\n# add expected values\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10),\n                                 [.2, .15], np.repeat(0.05, 3)))\n\nexposed_data.data['expected_1'] = \\\n    expected_table[exposed_data.data.pol_yr - 1]\nexposed_data.data['expected_2'] = \\\n    np.where(exposed_data.data.inc_guar, 0.015, 0.03)\n\n# add transactions\nwithdrawals = xp.load_withdrawals()\nexposed_data.add_transactions(withdrawals)\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\nA DataFrame: 141,252 x 21\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium  ... pol_yr  pol_date_yr pol_date_yr_end  exposure  expected_1  \\\n0    370.0  ...      1   2014-12-17      2015-12-16  1.000000    0.005000   \n1    370.0  ...      2   2015-12-17      2016-12-16  1.000000    0.007778   \n2    370.0  ...      3   2016-12-17      2017-12-16  1.000000    0.010556   \n3    370.0  ...      4   2017-12-17      2018-12-16  1.000000    0.013333   \n4    370.0  ...      5   2018-12-17      2019-12-16  1.000000    0.016111   \n5    370.0  ...      6   2019-12-17      2020-12-16  0.040984    0.018889   \n6    708.0  ...      1   2007-09-24      2008-09-23  1.000000    0.005000   \n7    708.0  ...      2   2008-09-24      2009-09-23  1.000000    0.007778   \n8    708.0  ...      3   2009-09-24      2010-09-23  1.000000    0.010556   \n9    708.0  ...      4   2010-09-24      2011-09-23  1.000000    0.013333   \n\n   expected_2  trx_amt_Base  trx_amt_Rider  trx_n_Base  trx_n_Rider  \n0       0.015           0.0            0.0         0.0          0.0  \n1       0.015           0.0            0.0         0.0          0.0  \n2       0.015           0.0            0.0         0.0          0.0  \n3       0.015           0.0            0.0         0.0          0.0  \n4       0.015           0.0            0.0         0.0          0.0  \n5       0.015           0.0            0.0         0.0          0.0  \n6       0.030          25.0            0.0         1.0          0.0  \n7       0.030          12.0            0.0         1.0          0.0  \n8       0.030           7.0            0.0         1.0          0.0  \n9       0.030          52.0            0.0         1.0          0.0  \n\n[10 rows x 21 columns]\n\n\n\nExpStats.plot()\nThe actxps package provides a plot() method for ExpStats objects.\nBelow, an ExpStats object is created using exp_stats().\n\nexp_res = (exposed_data.\n           groupby('pol_yr').\n           exp_stats(conf_int=True))\n\nThe default plot produced by ExpStats.plot() is a line plot of the observed termination rate (q_obs). The x variable corresponds to the first grouping variable of the ExpStats object3.\n\nexp_res.plot()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nIf there is a second grouping variable, it is mapped onto color.\n\n(exposed_data.\n    groupby('pol_yr', 'inc_guar').\n    exp_stats().\n    plot())\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAny additional grouping variables beyond two are used to create facets.\n\nexp_res2 = (exposed_data. \n    groupby('pol_yr', 'product', 'inc_guar').\n    exp_stats())\n\nexp_res2.plot()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nExpStats.plot() arguments\nThere are two means of overriding the default aesthetics selected by ExpStats.plot().\n\nThe x, y, color, and ... arguments can be passed column names to use as the x, y, color / fill, and faceting variables, respectively.\nThe mapping argument can be passed an aesthetic mapping using plotnine.aes(). If this argument is supplied, the x, y, and color arguments are ignored.\n\nLet’s assume we want to plot the number of claims instead of the termination rate, and we want inc_guar to be the color variable instead of product.\nUsing the y, color, and ... arguments, we could write:\n\nexp_res2.plot(y='claims', color='inc_guar', facets='product')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nAlternatively, we could supply a mapping for more fine-grained control. Note that the example below adds an additional mapping for linetype which is otherwise unavailable under the defaults for ExpStats.plot().\n\nfrom plotnine import aes\n\nexp_res2.plot(mapping=aes(x='pol_yr', y='claims', color='inc_guar',\n                          linetype='inc_guar'),\n              facets='product')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe ExpStats.plot() function defaults to percentages for y-axis labels. As seen in the immediately preceding example, this will not always be appropriate. The y_labels function can be used to pass a different labeling function.\n\nexp_res2.plot(mapping=aes(x='pol_yr', y='claims', color='inc_guar',\n                          linetype='inc_guar'),\n              y_labels=lambda l: [f\"{v:,.0f}\" for v in l],\n              facets='product')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nTo set axis scales that vary by subplot, use the scales argument. This argument is subsequently forwarded to plotnine.facet_wrap(). Under the default value “fixed”, scales are identical across subplots. If “free_y” is passed as shown below, the y-scales will vary. If “free_x” is passed, the x-scales will vary. If “free” is passed, both the x- and y-scales will vary.\n\nexp_res2.plot(scales=\"free_y\")\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nThe geoms argument can be used to change the plotting geometry. Under the default value of “lines”, points and lines are displayed. If “bars” is passed, a bar plot will be drawn. If “points” is passed, a scatter plot will be drawn.\n\nexp_res.plot(geoms=\"bars\")\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nIf the y_log10 argument is set to True, the y-axis will be plotted on a logarithmic base ten scale.\n\nexp_res.plot(y_log10=True)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nConfidence interval error bars can be added to a plot by passing conf_int_bars=True. Confidence intervals will only be displayed if they are available for the selected y variable.\n\nexp_res.plot(conf_int_bars=True)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\nExpStats.plot_termination_rates()\nA limitation of ExpStats.plot() is that it doesn’t allow one to plot observed termination rates alongside one or more expected termination rates. This type of plot is common as an alternative to actual-to-expected ratio plots.\nThe plot_termination_rates() method produces a plot of the observed termination rates plus any expected termination rates that were passed to the expected argument of exp_stats().\nIn the example below, a new ExpStats object is created that contains two sets of expected surrender rates. This object is then passed into plot_termination_rates().\n\nexp_res3 = (exposed_data .\n            groupby('pol_yr').\n            exp_stats(expected=[\"expected_1\", \"expected_2\"], credibility=True))\n\nexp_res3.plot_termination_rates()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\nIn the plot above, termination rates are mapped to the y variable and the Series variable specifies a color scale. Similar to ExpStats.plot(), the x variable is the first grouping variable (here, pol_yr).\nIf the ExpStats object contains credibility-weighted termination rates4, these rates can be included in the plot using the argument include_cred_adj=True.\n\nexp_res3.plot_termination_rates(include_cred_adj=True)\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\nplot_actual_to_expected()\nThe plot_actual_to_expected() function is similar to plot_termination_rates() except that all actual-to-expected ratios are plotted on the y-axis instead.\n\nexp_res3.plot_actual_to_expected()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\nRelationship of ExpStats.plot_termination_rates() and ExpStats.plot_actual_to_expected() to ExpStats.plot()\nBehind the scenes, plot_termination_rates() and plot_actual_to_expected() call plot() after reshaping the ExpStats object. As such, all arguments passed to ExpStats.plot() described above can also be passed to these functions. However, there is an exception: the y variable is reserved and cannot be modified. In addition, while the color variable can be overridden, this is discouraged because it may result in odd-looking plots.\nSince these functions automatically create a color variable, any grouping variables beyond the first are used to create facets. This differs from ExpStats.plot() which uses grouping variables beyond the second to create facets"
  },
  {
    "objectID": "articles/visualizations.html#plotting-transaction-studies",
    "href": "articles/visualizations.html#plotting-transaction-studies",
    "title": "Data visualizations",
    "section": "Plotting transaction studies",
    "text": "Plotting transaction studies\nThe actxps package also provides a plot() method for TrxStats objects. The TrxStats.plot() method has the same arguments as ExpStats.plot(), so all options described in the previous section can be used for transaction studies as well.\nThe y variable defaults to the observed transaction frequency (trx_util). Like ExpStats.plot(), any numeric column can be mapped onto the y-axis using the y or mapping arguments.\nUnder the defaults, TrxStats.plot() handles grouping variables the same as ExpStats.plot():\n\nThe first grouping variable is mapped onto x\nThe second grouping variable is mapped onto color\nAny additional grouping variables are used to create subplots\n\nIn addition to the above, facets are also created for each transaction type found in the data.\n\ntrx_res = (exposed_data .\n           groupby('pol_yr', 'inc_guar').\n           trx_stats(percent_of=\"premium\"))\n\ntrx_res.plot(y='pct_of_premium_all')\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\nTrxStats.plot_utilization_rates()\nThe plot_utilization_rates() function creates a side-by-side view of both transaction frequency and severity. This type of plot is useful for answering questions like, “what percentage of customers are taking withdrawals each quarter, and of those taking withdrawals, what is the average percentage of account value taken out?”.\nTransaction frequency is represented by utilization rates (trx_util). Severity is represented by transaction amounts as a percentage of one or more other columns in the data. All severity series begin with the prefix pct_of_ and end with the suffix _w_trx. The suffix refers to the fact that the denominator only includes records with non-zero transactions. Severity series are automatically selected based on column names passed to the percent_of argument in trx_stats(). If no “percentage of” columns exist, this function will only plot utilization rates.\nLike plot_termination_rates() and plot_actual_to_expected(), this function calls plot() after reshaping the data. All arguments passed to TrxStats.plot() can be utilized by this function except y and scales. The y argument is reserved for utilization rates, and the scales argument is preset to allow differing scales between the frequency and severity subplots.\n\ntrx_res.plot_utilization_rates()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;"
  },
  {
    "objectID": "articles/visualizations.html#tables",
    "href": "articles/visualizations.html#tables",
    "title": "Data visualizations",
    "section": "Tables",
    "text": "Tables\nThe table() method creates summary tables of termination or transaction study results. This method is available for ExpStats and TrxStats objects.\n\nTermination study output example\n\n\n\n\n\nTransaction study output example\n\n\n\nArguments:\n\nfontsize is a multiple that increases or decreases the font size. Values less than 100 decrease the font size, and values greater than 100 increase the font size.\ndecimals controls the number of decimal places displayed for percentage columns (default=1)\nIf colorful is True, conditional color formatting will be added to the table.\n\nFor termination studies, color_q_obs and color_ae_ specify the color palettes used for observed termination rates and actual-to-expected ratios, respectively.\nFor transaction studies, color_util and color_pct_of specify the color palettes used for utilization rates and “percentage of” columns, respectively.\n\nThese inputs must be strings referencing a Matplotlib colormap. For a full list of available palettes, see matplotlob.colormaps.\n**rename_cols can be used to relabel columns. Names are equal to original column names and values equal the desired column labels. Most of the column names created by table() are presentation-ready, however, grouping variables on the left side of the table may require updates since they default to the variable names that appear in the data.\nshow_conf_int and show_cred_adj can be used to include any confidence intervals and credibility-weighted termination rates, if available. As a default, these columns are not included to avoid producing overcrowded tables."
  },
  {
    "objectID": "articles/visualizations.html#interactive-shiny-app",
    "href": "articles/visualizations.html#interactive-shiny-app",
    "title": "Data visualizations",
    "section": "Interactive Shiny app",
    "text": "Interactive Shiny app\nExposedDF.exp_shiny() is a powerful method that launches an interactive Shiny app containing filters, grouping variables, plots produced by plot(), tables produced by table(), and exporting capabilities.\nThe left sidebar of the app contains filtering widgets organized by data type for all variables passed to the predictors argument. If predictors is not specified, all columns in the data except policy numbers, statuses, termination dates, exposures, and transaction columns will be used. The type of widget will vary depending on the data type and number of unique values in each predictor.\nAt the top of the sidebar, information is shown on the percentage of records remaining after applying filters. A text description of all active filters is also provided.\nThe top of the sidebar also includes a “play / pause” switch that can pause reactivity of the app. Pausing is a good option when multiple changes are made in quick succession, especially when the underlying data set is large.\nThe “Grouping variables” box includes widgets to select grouping variables for summarizing experience. The “x” widget determines the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets. Multiple faceting variable selections are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which grouping variables are displayed.\nThe “Study type” box will always include a tab for termination studies. If transactions are attached to the ExposedDF object5, an additional section will be displayed for transaction studies.\n\nTermination study options include the ability to activate and deactivate expected values and the selection of an optional numeric weighting variable for claims and exposures. Available expected value choices are dictated by the expected argument. If this argument is not specified, any columns containing the word “expected” are assumed to be expected values.\nTransaction study options include the ability to activate and deactivate transaction types, optional numeric columns to use in “percentage of” statistics, and an option to lump all transaction types into a single category.\n\nThe output section includes tabs for plots, tables, and exporting results.\nThe plot tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry - bars, points and lines, or points only\nAdd Smoothing: plots smooth loess curves\nConfidence intervals: If available, add confidence intervals error bars for around the selected y variable\nFree y Scales: enables separate y scales in each plot\nLog y-axis: plots all y-axes on a log-10 scale\nThe gear icon above the plot contains a pop-up menu for updating the size of the plot.\n\nThe table tab includes the table itself plus a pop-up menu for changing the table’s appearance:\n\nThe “Confidence intervals” and “Credibility-weighted termination rates” switches add these outputs to the table. These values are hidden as a default to prevent over-crowding.\nThe “Include color scales” switch disables or re-enables conditional color formatting.\nThe “Decimals” slider controls the number of decimals displayed for percentage fields.\nThe “Font size multiple” slider impacts the table’s font size\n\nThe export pop-up menu contains options for saving summarized experience data or the plot. Data is saved as a CSV file. The plot is saved as a png file.\n\nOther arguments\n\ndistinct_max: an upper limit on the number of distinct values a variable is allowed to have to be included as a viable option for the color and facets grouping variables. Default=25.\ntitle: an optional title for the app\ncredibility, conf_level, cred_r: credibility options for termination studies. See exp_stats() for more information. Limited fluctuation credibility estimates at a 95% confidence within 5% of the theoretical mean assuming a binomial distribution are used as a default.\nThe conf_level argument is also used for confidence intervals for both termination and transaction studies."
  },
  {
    "objectID": "articles/visualizations.html#footnotes",
    "href": "articles/visualizations.html#footnotes",
    "title": "Data visualizations",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nExpStats objects are created by ExposedDF.exp_stats() see Experience summaries for more information↩︎\nTrxStats objects are created by ExposedDF.trx_stats() see Transactions for more information↩︎\nIf there are no grouping variables, a single point is plotted↩︎\nSee the credibility argument of exp_stats() for more information↩︎\nSee add_transactions() for information on attaching transactions to an ExposedDF object.↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "actxps ",
    "section": "",
    "text": "The actxps package provides a set of tools to assist with the creation of actuarial experience studies. Experience studies are used by actuaries to explore historical experience across blocks of business and to inform assumption setting for projection models."
  },
  {
    "objectID": "index.html#basic-usage",
    "href": "index.html#basic-usage",
    "title": "actxps ",
    "section": "Basic usage",
    "text": "Basic usage\nAn expanded version of this demo is available at Getting started with actxps.\nThe actxps package includes simulated census data for a theoretical deferred annuity product with an optional guaranteed income rider. The grain of this data is one row per policy.\n\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\nprint(census_dat)\n\n       pol_num     status issue_date  inc_guar   qual  age product gender  \\\n0            1     Active 2014-12-17      True  False   56       b      F   \n1            2  Surrender 2007-09-24     False  False   71       a      F   \n2            3     Active 2012-10-06     False   True   62       b      F   \n3            4  Surrender 2005-06-27      True   True   62       c      M   \n4            5     Active 2019-11-22     False  False   62       c      F   \n...        ...        ...        ...       ...    ...  ...     ...    ...   \n19995    19996     Active 2014-08-11      True   True   55       b      F   \n19996    19997  Surrender 2006-11-20     False  False   68       c      F   \n19997    19998  Surrender 2017-02-20      True  False   68       c      F   \n19998    19999     Active 2015-04-11     False   True   67       a      M   \n19999    20000     Active 2009-04-29      True   True   72       c      M   \n\n       wd_age  premium  term_date  \n0          77    370.0        NaT  \n1          71    708.0 2019-03-08  \n2          63    466.0        NaT  \n3          62    485.0 2018-11-29  \n4          67    978.0        NaT  \n...       ...      ...        ...  \n19995      75   3551.0        NaT  \n19996      77    336.0 2017-07-09  \n19997      68   1222.0 2018-08-03  \n19998      78   2138.0        NaT  \n19999      72   5751.0        NaT  \n\n[20000 rows x 11 columns]\n\n\nConvert census records to exposure records with one row per policy per year.\n\nexposed_data = xp.ExposedDF(census_dat,\n                            end_date=\"2019-12-31\",\n                            target_status=\"Surrender\")\n\nexposed_data\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\nA DataFrame: 141,252 x 15\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000  \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000  \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000  \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000  \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000  \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984  \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000  \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000  \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000  \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000  \n\n\nCreate a summary grouped by policy year and the presence of a guaranteed income rider.\n\nexp_res = (exposed_data.\n           groupby('pol_yr', 'inc_guar').\n           exp_stats())\n\nexp_res\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 6\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs\n0       1     False        56      56   7719.807740  0.007254\n1       1      True        46      46  11532.404626  0.003989\n2       2     False        92      92   7102.813160  0.012953\n3       2      True        68      68  10611.967258  0.006408\n4       3     False        67      67   6446.916146  0.010393\n5       3      True        57      57   9650.221229  0.005907\n6       4     False       123     123   5798.909986  0.021211\n7       4      True        45      45   8736.954420  0.005151\n8       5     False        97      97   5105.875799  0.018998\n9       5      True        67      67   7809.650445  0.008579\n\n\nCalculate actual-to-expected ratios.\nFirst, attach one or more columns of expected termination rates to the exposure data. Then, pass these column names to the expected argument of exp_stats().\n\nexpected_table = np.concatenate((\n    np.linspace(0.005, 0.03, 10), \n    np.array([0.2, 0.15]), \n    np.repeat(0.05, 3)\n    ))\n\n# using 2 different expected termination rates\nexposed_data.data['expected_1'] = \\\n    expected_table[exposed_data.data.pol_yr - 1]\nexposed_data.data['expected_2'] = \\\n    np.where(exposed_data.data.inc_guar, 0.015, 0.03)\n\nexp_res = (exposed_data.\n           groupby('pol_yr', 'inc_guar').\n           exp_stats(expected = [\"expected_1\", \"expected_2\"]))\n\nexp_res\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 30 x 10\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs  expected_1  \\\n0       1     False        56      56   7719.807740  0.007254    0.005000   \n1       1      True        46      46  11532.404626  0.003989    0.005000   \n2       2     False        92      92   7102.813160  0.012953    0.007778   \n3       2      True        68      68  10611.967258  0.006408    0.007778   \n4       3     False        67      67   6446.916146  0.010393    0.010556   \n5       3      True        57      57   9650.221229  0.005907    0.010556   \n6       4     False       123     123   5798.909986  0.021211    0.013333   \n7       4      True        45      45   8736.954420  0.005151    0.013333   \n8       5     False        97      97   5105.875799  0.018998    0.016111   \n9       5      True        67      67   7809.650445  0.008579    0.016111   \n\n   expected_2  ae_expected_1  ae_expected_2  \n0       0.030       1.450813       0.241802  \n1       0.015       0.797752       0.265917  \n2       0.030       1.665336       0.431754  \n3       0.015       0.823868       0.427191  \n4       0.030       0.984559       0.346419  \n5       0.015       0.559573       0.393773  \n6       0.030       1.590816       0.707029  \n7       0.015       0.386290       0.343369  \n8       0.030       1.179169       0.633257  \n9       0.015       0.532498       0.571942  \n\n\nCreate visualizations using the plot() and table() methods.\n\nprint(exp_res.plot())\n\n\n\n\n\n\n\n\n# first 10 rows showed for brevity\nexp_res.table()\n\n\n\n\nLaunch a shiny app to interactively explore experience data.\n\nexposed_data.exp_shiny()\n\n\n Logo\nImage by macrovector on Freepik"
  },
  {
    "objectID": "reference/dates.html",
    "href": "reference/dates.html",
    "title": "dates",
    "section": "",
    "text": "dates\n\n\n\n\n\nName\nDescription\n\n\n\n\nlen2\nLength function with non-iterables and strings returning 1\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_mth\nCalculate policy months\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_wk\nCalculate policy weeks\n\n\npol_yr\nCalculate policy years\n\n\n\n\n\ndates.len2(x)\nLength function with non-iterables and strings returning 1\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nAny\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\n1 if x is not iterable or if x is a string. Otherwise, the length of x.\n\n\n\n\n\n\n\ndates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_yr, pol_qtr, pol_mth, pol_wk\n\n\n\n\ndates.pol_mth(dates, issue_date)\nCalculate policy months\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_qtr(dates, issue_date)\nCalculate policy quarters\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_wk(dates, issue_date)\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_yr(dates, issue_date)\nCalculate policy years\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/dates.html#functions",
    "href": "reference/dates.html#functions",
    "title": "dates",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nlen2\nLength function with non-iterables and strings returning 1\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_mth\nCalculate policy months\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_wk\nCalculate policy weeks\n\n\npol_yr\nCalculate policy years\n\n\n\n\n\ndates.len2(x)\nLength function with non-iterables and strings returning 1\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nAny\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\n1 if x is not iterable or if x is a string. Otherwise, the length of x.\n\n\n\n\n\n\n\ndates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_yr, pol_qtr, pol_mth, pol_wk\n\n\n\n\ndates.pol_mth(dates, issue_date)\nCalculate policy months\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_qtr(dates, issue_date)\nCalculate policy quarters\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_wk(dates, issue_date)\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_yr(dates, issue_date)\nCalculate policy years\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/expose.ExposedDF.html",
    "href": "reference/expose.ExposedDF.html",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "expose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\n\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object.\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method.\n\n\n\n\n\n\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.ExposedDF.html#parameters",
    "href": "reference/expose.ExposedDF.html#parameters",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone"
  },
  {
    "objectID": "reference/expose.ExposedDF.html#notes",
    "href": "reference/expose.ExposedDF.html#notes",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Census-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object."
  },
  {
    "objectID": "reference/expose.ExposedDF.html#attributes",
    "href": "reference/expose.ExposedDF.html#attributes",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method."
  },
  {
    "objectID": "reference/expose.ExposedDF.html#references",
    "href": "reference/expose.ExposedDF.html#references",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Atkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf"
  },
  {
    "objectID": "reference/expose.ExposedDF.html#methods",
    "href": "reference/expose.ExposedDF.html#methods",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html",
    "href": "reference/ExposedDF.add_transactions.html",
    "title": "ExposedDF.add_transactions",
    "section": "",
    "text": "expose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study"
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html#parameters",
    "href": "reference/ExposedDF.add_transactions.html#parameters",
    "title": "ExposedDF.add_transactions",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'"
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html#notes",
    "href": "reference/ExposedDF.add_transactions.html#notes",
    "title": "ExposedDF.add_transactions",
    "section": "Notes",
    "text": "Notes\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF."
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html#examples",
    "href": "reference/ExposedDF.add_transactions.html#examples",
    "title": "ExposedDF.add_transactions",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\nA DataFrame: 141,252 x 19\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \\\n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000   \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000   \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000   \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000   \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000   \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984   \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000   \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000   \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000   \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000   \n\n   trx_amt_Base  trx_amt_Rider  trx_n_Base  trx_n_Rider  \n0           0.0            0.0         0.0          0.0  \n1           0.0            0.0         0.0          0.0  \n2           0.0            0.0         0.0          0.0  \n3           0.0            0.0         0.0          0.0  \n4           0.0            0.0         0.0          0.0  \n5           0.0            0.0         0.0          0.0  \n6          25.0            0.0         1.0          0.0  \n7          12.0            0.0         1.0          0.0  \n8           7.0            0.0         1.0          0.0  \n9          52.0            0.0         1.0          0.0"
  },
  {
    "objectID": "reference/ExposedDF.expose_cq.html",
    "href": "reference/ExposedDF.expose_cq.html",
    "title": "ExposedDF.expose_cq",
    "section": "",
    "text": "ExposedDF.expose_cq\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_cy.html",
    "href": "reference/ExposedDF.expose_cy.html",
    "title": "ExposedDF.expose_cy",
    "section": "",
    "text": "ExposedDF.expose_cy\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_pq.html",
    "href": "reference/ExposedDF.expose_pq.html",
    "title": "ExposedDF.expose_pq",
    "section": "",
    "text": "ExposedDF.expose_pq\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_py.html",
    "href": "reference/ExposedDF.expose_py.html",
    "title": "ExposedDF.expose_py",
    "section": "",
    "text": "ExposedDF.expose_py\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures"
  },
  {
    "objectID": "reference/ExposedDF.from_DataFrame.html",
    "href": "reference/ExposedDF.from_DataFrame.html",
    "title": "ExposedDF.from_DataFrame",
    "section": "",
    "text": "expose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_', default_status=None)\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nactxps.expose.ExposedDF\nAn ExposedDF object."
  },
  {
    "objectID": "reference/ExposedDF.from_DataFrame.html#parameters",
    "href": "reference/ExposedDF.from_DataFrame.html#parameters",
    "title": "ExposedDF.from_DataFrame",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\ndefault_status\nstr\nDefault active status code\nNone"
  },
  {
    "objectID": "reference/ExposedDF.from_DataFrame.html#returns",
    "href": "reference/ExposedDF.from_DataFrame.html#returns",
    "title": "ExposedDF.from_DataFrame",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nactxps.expose.ExposedDF\nAn ExposedDF object."
  },
  {
    "objectID": "reference/ExpStats.html",
    "href": "reference/ExpStats.html",
    "title": "ExpStats",
    "section": "",
    "text": "exp_stats.ExpStats(self, expo, target_status=None, expected=None, wt=None, conf_int=False, credibility=False, conf_level=0.95, cred_r=0.05, col_exposure='exposure')\nExperience study summary class\nCreate a summary of termination experience for a given target status (an ExpStats object).\nTypically, the ExpStats class constructor should not be called directly. The preferred method for creating an ExpStats object is to call the exp_stats() method on an ExposedDF object."
  },
  {
    "objectID": "reference/ExpStats.html#parameters",
    "href": "reference/ExpStats.html#parameters",
    "title": "ExpStats",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nexpo\nactxps.expose.ExposedDF\nAn exposed data frame class\nrequired\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nSingle string, list, or array of column names in the data property of expo with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property of expo containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\nconf_int\nbool\nIf True, the output will include confidence intervals around the observed termination rates and any actual-to-expected ratios.\nFalse\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\nconf_level\nfloat\nConfidence level under the Limited Fluctuation credibility method and confidence intervals\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'"
  },
  {
    "objectID": "reference/ExpStats.html#attributes",
    "href": "reference/ExpStats.html#attributes",
    "title": "ExpStats",
    "section": "Attributes",
    "text": "Attributes\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame containing experience study summary results that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\ntarget_status, groups, start_date, end_date, expected, wt, xp_params\n\nMetadata about the experience study inferred from the ExposedDF object (expo) or passed directly to ExpStats."
  },
  {
    "objectID": "reference/ExpStats.html#notes",
    "href": "reference/ExpStats.html#notes",
    "title": "ExpStats",
    "section": "Notes",
    "text": "Notes\nIf expo is grouped (see the ExposedDF.groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of expo will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in expo.data containing expected experience. More than one expected basis can be provided.\nConfidence intervals\nIf conf_int is set to True, the output will contain lower and upper confidence interval limits for the observed termination rate and any actual-to-expected ratios. The confidence level is dictated by conf_level. If no weighting variable is passed to wt, confidence intervals will be constructed assuming a binomial distribution of claims. Otherwise, confidence intervals will be calculated assuming that the aggregate claims distribution is normal with a mean equal to observed claims and a variance equal to:\nVar(S) = E(N) * Var(X) + E(X)**2 * Var(N),\nWhere S is the aggregate claim random variable, X is the weighting variable assumed to follow a normal distribution, and N is a binomial random variable for the number of claims.\nIf credibility is True and expected values are passed to expected, the output will also contain confidence intervals for any credibility-weighted termination rates.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\nAlternative class constructor\nExpStats.from_DataFrame() can be used to coerce a data frame containing pre-aggregated experience into an ExpStats object. This is most useful for working with industry study data where individual exposure records are not available."
  },
  {
    "objectID": "reference/ExpStats.html#see-also",
    "href": "reference/ExpStats.html#see-also",
    "title": "ExpStats",
    "section": "See Also",
    "text": "See Also\nHerzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/ExpStats.html#methods",
    "href": "reference/ExpStats.html#methods",
    "title": "ExpStats",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nfrom_DataFrame\nConvert a data frame containing aggregate termination experience study\n\n\nplot\nPlot experience study results\n\n\nplot_actual_to_expected\nPlot actual-to-expected termination rates for any expected termination\n\n\nplot_termination_rates\nPlot observed termination rates and any expected termination rates\n\n\nsummary\nRe-summarize termination experience data\n\n\ntable\nTabular experience study summary\n\n\n\n\nfrom_DataFrame\nexp_stats.ExpStats.from_DataFrame(data, target_status=None, expected=None, wt=None, conf_int=False, credibility=False, conf_level=0.95, cred_r=0.05, col_claims='claims', col_exposure='exposure', col_n_claims='n_claims', col_weight_sq='weight_sq', col_weight_n='weight_n', start_date=datetime(1900, 1, 1), end_date=None)\nConvert a data frame containing aggregate termination experience study results to the ExpStats class.\nfrom_DataFrame() is most useful for working with aggregate summaries of experience that were not created by actxps where individual policy information is not available. After converting the data to the ExpStats class, summary() can be used to summarize data by any grouping variables, and plot() and table() are available for reporting.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA DataFrame containing aggregate experience study results. See the Notes section for required columns that must be present.\nrequired\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nColumn names in x with expected values.\nNone\n\n\nwt\nstr\nName of the column in data containing weights to use in the calculation of claims, exposures, partial credibility, and confidence intervals.\nNone\n\n\nconf_int\nbool\nIf True, future calls to summary() will include confidence intervals around the observed termination rates and any actual-to-expected ratios.\nFalse\n\n\ncredibility\nbool\nIf True, future calls to summary() will include partial credibility weights and credibility-weighted termination rates.\nFalse\n\n\nconf_level\nfloat\nConfidence level used for the Limited Fluctuation credibility method and confidence intervals.\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method.\n0.05\n\n\ncol_claims\nstr\nName of the column in data containing claims.\n'claims'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_n_claims\nstr\nOnly used used when wt is passed. Name of the column in data containing the number of claims.\n'n_claims'\n\n\ncol_weight_sq\ndefault=’weight_sq\nOnly used used when wt is passed. Name of the column in data containing the sum of squared weights.\n'weight_sq'\n\n\ncol_weight_n\nstr\nOnly used used when wt is passed. Name of the column in data containing exposure record counts.\n'weight_n'\n\n\nstart_date\ndatetime.datetime | int | str\nExperience study start date\n'1900-01-01'\n\n\nend_date\ndatetime | int | str: default=None\nExperience study end date\nNone\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nactxps.exp_stats.ExpStats\nAn ExpStats object\n\n\n\n\n\nNotes\nIf nothing is passed to wt, the data frame data must include columns containing:\n\nExposures (exposure)\nClaim counts (claims)\n\nIf wt is passed, the data must include columns containing:\n\nWeighted exposures (exposure)\nWeighted claims (claims)\nClaim counts (n_claims)\nThe raw sum of weights NOT multiplied by exposures\nExposure record counts (.weight_n)\nThe raw sum of squared weights (.weight_sq)\n\nThe names in parentheses above are expected column names. If the data frame passed to from_DataFrame() uses different column names, these can be specified using the col_* arguments.\nWhen a column name is passed to wt, the columns .weight, .weight_n, and .weight_sq are used to calculate credibility and confidence intervals. If credibility and confidence intervals aren’t required, then it is not necessary to pass anything to wt. The resulting ExpStats class and any downstream summaries will still be weighted as long as the exposures and claims are pre-weighted.\ntarget_status, start_date, and end_date are optional arguments that are only used for printing the resulting ExpStats object.\n\n\nExamples\n\nimport actxps as xp\n\n# convert pre-aggregated experience into an ExpStats object\nagg_sim_dat = xp.load_agg_sim_dat()\ndat = xp.ExpStats.from_DataFrame(\n    agg_sim_dat,\n    col_exposure=\"exposure_n\",\n    col_claims=\"claims_n\",\n    target_status=\"Surrender\",\n    start_date=2005,\n    end_date=2019,\n    conf_int=True)\n\n# summary by policy year\ndat.summary('pol_yr')\n\n# repeat the prior exercise on a weighted basis\ndat_wt = xp.ExpStats.from_DataFrame(\n    agg_sim_dat, wt=\"av\",\n    col_exposure=\"exposure_amt\",\n    col_claims=\"claims_amt\",\n    col_n_claims=\"claims_n\",\n    col_weight_sq=\"av_sq\",\n    col_weight_n=\"n\",\n    target_status=\"Surrender\",\n    start_date=2005, end_date=2019,\n    conf_int=True)\ndat_wt\n\n# summary by policy year\ndat_wt.summary('pol_yr')\n\nExperience study results\n\nGroups: pol_yr\nTarget status: Surrender\nStudy range: 2005 to 2019\nWeighted by: av\n\n\nA DataFrame: 15 x 10\n   pol_yr  n_claims    claims      exposure     q_obs  q_obs_lower  \\\n0       1       102   83223.0  2.531281e+07  0.003288     0.001926   \n1       2       160  175428.0  2.401874e+07  0.007304     0.005451   \n2       3       124  132261.0  2.243529e+07  0.005895     0.004092   \n3       4       168  192473.0  2.085983e+07  0.009227     0.006907   \n4       5       164  197240.0  1.911454e+07  0.010319     0.007726   \n5       6       152  192088.0  1.732703e+07  0.011086     0.008227   \n6       7       164  186649.0  1.549636e+07  0.012045     0.008617   \n7       8       190  220055.0  1.362847e+07  0.016147     0.011809   \n8       9       181  232704.0  1.156279e+07  0.020125     0.014950   \n9      10       152  209249.0  9.510599e+06  0.022002     0.016094   \n\n   q_obs_upper      weight     weight_sq  weight_n  \n0     0.004650  26301746.0  6.074299e+10     19995  \n1     0.009156  24966449.0  5.962839e+10     18434  \n2     0.007699  23442831.0  5.796572e+10     16806  \n3     0.011547  21861723.0  5.570664e+10     15266  \n4     0.012911  20104670.0  5.338105e+10     13618  \n5     0.013945  18388593.0  5.103174e+10     12067  \n6     0.015473  16440062.0  4.752761e+10     10541  \n7     0.020484  14647775.0  4.408638e+10      9130  \n8     0.025301  12603553.0  3.952038e+10      7591  \n9     0.027910  10531703.0  3.383567e+10      6185  \n\n\n\n\nSee Also\nExposedDF.exp_stats() for information on how ExpStats objects are typically created from individual exposure records.\n\n\n\nplot\nexp_stats.ExpStats.plot(x=None, y='q_obs', color=None, facets=None, mapping=None, scales='fixed', geoms='lines', y_labels=lambda : [f'{v * 100}%' for v in l], y_log10=False, conf_int_bars=False)\nPlot experience study results\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nstr\nA column name in data to use as the x variable. If None, x will default to the first grouping variable. If there are no grouping variables, x will be set to “All”.\nNone\n\n\ny\nstr\nA column name in data to use as the y variable.\n'q_obs'\n\n\ncolor\nstr\nA column name in data to use as the color and fill variables. If None, y will default to the second grouping variable. If there are less than two grouping variables, the plot will not use a color aesthetic.\nNone\n\n\nfacets\nlist | str\nFaceting variables in data passed to plotnine.facet_wrap(). If None, grouping variables 3+ will be used (assuming there are more than two grouping variables).\nNone\n\n\nmapping\nplotnine.aes\nAesthetic mapping added to plotnine.ggplot(). NOTE: If mapping is supplied, the x, y, and color arguments will be ignored.\nNone\n\n\nscales\nstr\nThe scales argument passed to plotnine.facet_wrap().\n'fixed'\n\n\ngeoms\n(lines, bars, points)\nType of geometry. If “lines” is passed, the plot will display lines and points. If “bars”, the plot will display bars. If “points”, the plot will display points only.\n'lines'\n\n\ny_labels\ncallable\nLabel function passed to plotnine.scale_y_continuous().\nlambda l: [f\"{v * 100:.1f}%\" for v in l]\n\n\ny_log10\nbool\nIf True, the y-axes are plotted on a log-10 scale.\nFalse\n\n\nconf_int_bars\nbool\nIf True, confidence interval error bars are included in the plot. This option is only available for termination rates and actual-to-expected ratios.\nFalse\n\n\n\n\n\nNotes\nIf no aesthetic map is supplied, the plot will use the first grouping variable in the groups property on the x axis and q_obs on the y axis. In addition, the second grouping variable in groups will be used for color and fill.\nIf no faceting variables are supplied, the plot will use grouping variables 3 and up as facets. These variables are passed into plotnine.facet_wrap().\n\n\nExamples\n\nimport actxps as xp\n\nexp_res = (xp.ExposedDF(xp.load_census_dat(),\n                        \"2019-12-31\", \n                        target_status=\"Surrender\").\n           groupby('pol_yr').\n           exp_stats())\n\nexp_res.plot()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nplot_actual_to_expected\nexp_stats.ExpStats.plot_actual_to_expected(add_hline=True, **kwargs)\nPlot actual-to-expected termination rates for any expected termination rates found in the expected property.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nadd_hline\nbool\nIf True, a blue dashed horizontal line will be drawn at 100%.\nTrue\n\n\n**kwargs\n\nAdditional arguments passed to plot()\n{}\n\n\n\n\n\nExamples\n\nimport actxps as xp\nimport numpy as np\n\nexpo = xp.ExposedDF(xp.load_census_dat(),\n                    \"2019-12-31\", \n                    target_status=\"Surrender\")\n\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10), \n                                 np.array([0.2, 0.15]), \n                                 np.repeat(0.05, 3)))\nexpo.data['expected_1'] = expected_table[expo.data.pol_yr - 1]\nexpo.data['expected_2'] = np.where(expo.data.inc_guar, 0.015, 0.03)\n\nexp_res = (expo.\n           groupby('pol_yr').\n           exp_stats(expected=['expected_1', 'expected_2']))\n\nexp_res.plot_actual_to_expected()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nplot_termination_rates\nexp_stats.ExpStats.plot_termination_rates(include_cred_adj=False, **kwargs)\nPlot observed termination rates and any expected termination rates found in the expected property.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ninclude_cred_adj\nbool\nIf True, credibility-weighted termination rates will be plotted as well.\nFalse\n\n\n**kwargs\n\nAdditional arguments passed to plot()\n{}\n\n\n\n\n\nExamples\n\nimport actxps as xp\nimport numpy as np\n\nexpo = xp.ExposedDF(xp.load_census_dat(),\n                    \"2019-12-31\", \n                    target_status=\"Surrender\")\n\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10), \n                                 np.array([0.2, 0.15]), \n                                 np.repeat(0.05, 3)))\nexpo.data['expected_1'] = expected_table[expo.data.pol_yr - 1]\nexpo.data['expected_2'] = np.where(expo.data.inc_guar, 0.015, 0.03)\n\nexp_res = (expo.\n           groupby('pol_yr').\n           exp_stats(expected=['expected_1', 'expected_2']))\n\nexp_res.plot_termination_rates()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n\n\nsummary\nexp_stats.ExpStats.summary(*by)\nRe-summarize termination experience data\nRe-summarize the data while retaining any grouping variables passed to the *by argument.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\ntuple\nQuoted column names in data that will be used as grouping variables in the re-summarized object. Passing nothing is acceptable and will produce a 1-row experience summary.\n()\n\n\n\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nactxps.exp_stats.ExpStats\nA new ExpStats object with rows for all the unique groups in *by\n\n\n\n\n\nExamples\n\nimport actxps as xp\n\nexp_res = (xp.ExposedDF(xp.load_census_dat(),\n                        \"2019-12-31\", \n                        target_status=\"Surrender\").\n           groupby('pol_yr', 'inc_guar').\n           exp_stats())\n\nexp_res.summary('inc_guar')\n\nExperience study results\n\nGroups: inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 2 x 5\n   inc_guar  n_claims  claims      exposure     q_obs\n0     False      1601    1601  52123.245243  0.030716\n1      True      1268    1268  80510.750415  0.015749\n\n\n\n\n\ntable\nexp_stats.ExpStats.table(fontsize=100, decimals=1, colorful=True, color_q_obs='GnBu', color_ae_='RdBu', show_conf_int=False, show_cred_adj=False, decimals_amt=0, suffix_amt=False, **rename_cols)\nTabular experience study summary\nConvert experience study results to a presentation-friendly format.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfontsize\nint\nFont size percentage multiplier\n100\n\n\ndecimals\nint\nNumber of decimals to display for percentages\n1\n\n\ncolorful\nbool\nIf True, color will be added to the the observed decrement rate and actual-to-expected columns.\nTrue\n\n\ncolor_q_obs\nstr or colormap\nColorBrewer palette used for the observed decrement rate.\n'GnBu'\n\n\ncolor_ae_\nstr or colormap\nColorBrewer palette used for actual-to-expected rates.\n'RdBu'\n\n\nshow_conf_int\nbool\nIf True any confidence intervals will be displayed.\nFalse\n\n\nshow_cred_adj\nbool\nIf True any credibility-weighted termination rates will be displayed.\nFalse\n\n\ndecimals_amt\nint\nNumber of decimals to display for amount columns (number of claims, claim amounts, and exposures.\n0\n\n\nsuffix_amt\nbool\nThis argument has the same meaning as the compact argument in great_tables.gt.GT.fmt_number() for amount columns. If False, no scaling or suffixing are applied to amount columns. If True, all amount columns are automatically scaled and suffixed by “K” (thousands), “M” (millions), “B” (billions), or “T” (trillions).\nFalse\n\n\nrename_cols\nstr\nKey-value pairs where keys are column names and values are labels that will appear on the output table. This parameter is useful for renaming grouping variables that will appear under their original variable names if left unchanged.\nNone\n\n\n\n\n\nNotes\nFurther customizations can be added using great_tables.gt.GT methods. See the great_tables package documentation for more information.\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\ngreat_tables.great_tables.gt.great_tables.gt.GT\nA formatted HTML table\n\n\n\n\n\nExamples\n\nimport actxps as xp\nimport numpy as np\n\nexpo = xp.ExposedDF(xp.load_census_dat(),\n                    \"2019-12-31\", \n                    target_status=\"Surrender\")\n\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10), \n                                 np.array([0.2, 0.15]), \n                                 np.repeat(0.05, 3)))\nexpo.data['expected_1'] =             expected_table[expo.data.pol_yr - 1]\nexpo.data['expected_2'] =             np.where(expo.data.inc_guar, 0.015, 0.03)\n\nexp_res = (expo.\n           groupby('pol_yr').\n           exp_stats(expected=['expected_1', 'expected_2'],\n                     credibility=True))\n\nexp_res.table()\n\n\n\n\n\n  \n    Experience Study Results\n  \n  \n    Target status: Surrender\n  \n\n  pol_yr\n  Claims\n  Exposures\n  qobs\n  \n    expected_1\n  \n  \n    expected_2\n  \n  Zcred\n\n\n  qexp\n  A/E\n  qexp\n  A/E\n\n\n\n  1\n  102\n  19,252\n  0.5%\n  0.5%\n  106.0%\n  2.1%\n  25.2%\n  25.8%\n\n\n  2\n  160\n  17,715\n  0.9%\n  0.8%\n  116.1%\n  2.1%\n  43.0%\n  32.4%\n\n\n  3\n  124\n  16,097\n  0.8%\n  1.1%\n  73.0%\n  2.1%\n  36.7%\n  28.5%\n\n\n  4\n  168\n  14,536\n  1.2%\n  1.3%\n  86.7%\n  2.1%\n  55.1%\n  33.3%\n\n\n  5\n  164\n  12,916\n  1.3%\n  1.6%\n  78.8%\n  2.1%\n  60.7%\n  32.9%\n\n\n  6\n  152\n  11,376\n  1.3%\n  1.9%\n  70.7%\n  2.1%\n  63.9%\n  31.7%\n\n\n  7\n  164\n  9,917\n  1.7%\n  2.2%\n  76.3%\n  2.1%\n  79.1%\n  32.9%\n\n\n  8\n  190\n  8,448\n  2.2%\n  2.4%\n  92.0%\n  2.1%\n  107.9%\n  35.6%\n\n\n  9\n  181\n  6,960\n  2.6%\n  2.7%\n  95.5%\n  2.1%\n  125.1%\n  34.8%\n\n\n  10\n  152\n  5,604\n  2.7%\n  3.0%\n  90.4%\n  2.1%\n  130.6%\n  31.9%\n\n\n  11\n  804\n  4,390\n  18.3%\n  20.0%\n  91.6%\n  2.1%\n  881.0%\n  80.0%\n\n\n  12\n  330\n  2,663\n  12.4%\n  15.0%\n  82.6%\n  2.0%\n  618.2%\n  49.5%\n\n\n  13\n  99\n  1,620\n  6.1%\n  5.0%\n  122.2%\n  2.0%\n  310.9%\n  26.2%\n\n\n  14\n  62\n  872\n  7.1%\n  5.0%\n  142.2%\n  2.0%\n  364.3%\n  20.8%\n\n\n  15\n  17\n  268\n  6.3%\n  5.0%\n  126.8%\n  1.9%\n  331.2%\n  10.9%\n\n\n  \n  \n  \n    Study range: 1900-01-01 to 2019-12-31"
  },
  {
    "objectID": "reference/exp_stats.html",
    "href": "reference/exp_stats.html",
    "title": "exp_stats",
    "section": "",
    "text": "expose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/exp_stats.html#parameters",
    "href": "reference/exp_stats.html#parameters",
    "title": "exp_stats",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05"
  },
  {
    "objectID": "reference/exp_stats.html#notes",
    "href": "reference/exp_stats.html#notes",
    "title": "exp_stats",
    "section": "",
    "text": "If the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims."
  },
  {
    "objectID": "reference/exp_stats.html#returns",
    "href": "reference/exp_stats.html#returns",
    "title": "exp_stats",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected)."
  },
  {
    "objectID": "reference/exp_stats.html#references",
    "href": "reference/exp_stats.html#references",
    "title": "exp_stats",
    "section": "",
    "text": "Herzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Create exposure records from census records\n\n\n\nExposedDF\nExposed data frame class\n\n\nExposedDF.from_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\nSplitExposedDF\nSplit calendar exposures by policy year\n\n\n\n\n\n\nCreate termination study summaries and reports\n\n\n\nExposedDF.exp_stats\nSummarize experience study records\n\n\nExpStats\nExperience study summary class\n\n\n\n\n\n\nAdd transactions to exposure records, create summaries and reports\n\n\n\nExposedDF.add_transactions\nAdd transactions to an experience study\n\n\nTrxStats\nTransactions study summary class\n\n\n\n\n\n\nLaunch a Shiny application to interactively explore drivers of experience.\n\n\n\nexp_shiny\nInteractively explore experience data\n\n\n\n\n\n\nData sets for testing the functionality of actxps\n\n\n\n\n\nload_toy_census\nToy policy census data\n\n\n\n\n\n\n\n\n\nload_census_dat\nSimulated annuity census data\n\n\nload_withdrawals\nSimulated annuity withdrawal data\n\n\nload_account_vals\nSimulated annuity account value data\n\n\n\n\n\n\n\n\n\nload_qx_iamb\n2012 Individual Annuity Mortality Table\n\n\nload_scale_g2\nProjection Scale G2\n\n\n\n\n\n\n\nSupport functions used for various date calculations\n\n\n\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_yr\nCalculate policy years\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_mth\nCalculate policy months\n\n\npol_wk\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\nfrac_interval\nCalculate fractional years, quarters, months, or weeks between two dates\n\n\nfrac_yr\nCalculate fractional years between two dates\n\n\nfrac_qtr\nCalculate fractional quarters between two dates\n\n\nfrac_mth\nCalculate fractional months between two dates\n\n\nfrac_wk\nCalculate fractional weeks between two dates\n\n\n\n\n\n\n\n\n\nadd_interval\nAdd years, quarters, months, or weeks to a vector of dates\n\n\nadd_yr\nAdd years to a vector of dates\n\n\nadd_qtr\nAdd quarters to a vector of dates\n\n\nadd_mth\nAdd months to a vector of dates\n\n\nadd_wk\nAdd weeks to a vector of dates"
  },
  {
    "objectID": "reference/index.html#exposure-calculations",
    "href": "reference/index.html#exposure-calculations",
    "title": "Function reference",
    "section": "",
    "text": "Create exposure records from census records\n\n\n\nExposedDF\nExposed data frame class\n\n\nExposedDF.from_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\nSplitExposedDF\nSplit calendar exposures by policy year"
  },
  {
    "objectID": "reference/index.html#termination-studies",
    "href": "reference/index.html#termination-studies",
    "title": "Function reference",
    "section": "",
    "text": "Create termination study summaries and reports\n\n\n\nExposedDF.exp_stats\nSummarize experience study records\n\n\nExpStats\nExperience study summary class"
  },
  {
    "objectID": "reference/index.html#transaction-studies",
    "href": "reference/index.html#transaction-studies",
    "title": "Function reference",
    "section": "",
    "text": "Add transactions to exposure records, create summaries and reports\n\n\n\nExposedDF.add_transactions\nAdd transactions to an experience study\n\n\nTrxStats\nTransactions study summary class"
  },
  {
    "objectID": "reference/index.html#shiny-app",
    "href": "reference/index.html#shiny-app",
    "title": "Function reference",
    "section": "",
    "text": "Launch a Shiny application to interactively explore drivers of experience.\n\n\n\nexp_shiny\nInteractively explore experience data"
  },
  {
    "objectID": "reference/index.html#sample-data-sets",
    "href": "reference/index.html#sample-data-sets",
    "title": "Function reference",
    "section": "",
    "text": "Data sets for testing the functionality of actxps\n\n\n\n\n\nload_toy_census\nToy policy census data\n\n\n\n\n\n\n\n\n\nload_census_dat\nSimulated annuity census data\n\n\nload_withdrawals\nSimulated annuity withdrawal data\n\n\nload_account_vals\nSimulated annuity account value data\n\n\n\n\n\n\n\n\n\nload_qx_iamb\n2012 Individual Annuity Mortality Table\n\n\nload_scale_g2\nProjection Scale G2"
  },
  {
    "objectID": "reference/index.html#date-functions",
    "href": "reference/index.html#date-functions",
    "title": "Function reference",
    "section": "",
    "text": "Support functions used for various date calculations\n\n\n\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_yr\nCalculate policy years\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_mth\nCalculate policy months\n\n\npol_wk\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\nfrac_interval\nCalculate fractional years, quarters, months, or weeks between two dates\n\n\nfrac_yr\nCalculate fractional years between two dates\n\n\nfrac_qtr\nCalculate fractional quarters between two dates\n\n\nfrac_mth\nCalculate fractional months between two dates\n\n\nfrac_wk\nCalculate fractional weeks between two dates\n\n\n\n\n\n\n\n\n\nadd_interval\nAdd years, quarters, months, or weeks to a vector of dates\n\n\nadd_yr\nAdd years to a vector of dates\n\n\nadd_qtr\nAdd quarters to a vector of dates\n\n\nadd_mth\nAdd months to a vector of dates\n\n\nadd_wk\nAdd weeks to a vector of dates"
  },
  {
    "objectID": "reference/load_census_dat.html",
    "href": "reference/load_census_dat.html",
    "title": "load_census_dat",
    "section": "",
    "text": "load_census_dat\ndatasets.load_census_dat()"
  },
  {
    "objectID": "reference/load_scale_g2.html",
    "href": "reference/load_scale_g2.html",
    "title": "load_scale_g2",
    "section": "",
    "text": "datasets.load_scale_g2()"
  },
  {
    "objectID": "reference/load_scale_g2.html#returns",
    "href": "reference/load_scale_g2.html#returns",
    "title": "load_scale_g2",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/load_scale_g2.html#references",
    "href": "reference/load_scale_g2.html#references",
    "title": "load_scale_g2",
    "section": "References",
    "text": "References\n\nhttps://mort.soa.org/\nhttps://www.actuary.org/sites/default/files/files/publications/Payout_Annuity_Report_09-28-11.pdf"
  },
  {
    "objectID": "reference/load_withdrawals.html",
    "href": "reference/load_withdrawals.html",
    "title": "load_withdrawals",
    "section": "",
    "text": "load_withdrawals\ndatasets.load_withdrawals()"
  },
  {
    "objectID": "reference/pol_interval.html",
    "href": "reference/pol_interval.html",
    "title": "pol_interval",
    "section": "",
    "text": "dates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_yr, pol_qtr, pol_mth, pol_wk"
  },
  {
    "objectID": "reference/pol_interval.html#parameters",
    "href": "reference/pol_interval.html#parameters",
    "title": "pol_interval",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired"
  },
  {
    "objectID": "reference/pol_interval.html#returns",
    "href": "reference/pol_interval.html#returns",
    "title": "pol_interval",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_interval.html#see-also",
    "href": "reference/pol_interval.html#see-also",
    "title": "pol_interval",
    "section": "",
    "text": "pol_yr, pol_qtr, pol_mth, pol_wk"
  },
  {
    "objectID": "reference/pol_qtr.html",
    "href": "reference/pol_qtr.html",
    "title": "pol_qtr",
    "section": "",
    "text": "dates.pol_qtr(dates, issue_date)\nCalculate policy quarters\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_qtr.html#parameters",
    "href": "reference/pol_qtr.html#parameters",
    "title": "pol_qtr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_qtr.html#returns",
    "href": "reference/pol_qtr.html#returns",
    "title": "pol_qtr",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_qtr.html#see-also",
    "href": "reference/pol_qtr.html#see-also",
    "title": "pol_qtr",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/pol_yr.html",
    "href": "reference/pol_yr.html",
    "title": "pol_yr",
    "section": "",
    "text": "dates.pol_yr(dates, issue_date)\nCalculate policy years\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_yr.html#parameters",
    "href": "reference/pol_yr.html#parameters",
    "title": "pol_yr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_yr.html#returns",
    "href": "reference/pol_yr.html#returns",
    "title": "pol_yr",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_yr.html#see-also",
    "href": "reference/pol_yr.html#see-also",
    "title": "pol_yr",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/sim_data.html",
    "href": "reference/sim_data.html",
    "title": "load_census_dat",
    "section": "",
    "text": "datasets.load_census_dat()\nSimulated annuity census data\nSimulated data for a theoretical deferred annuity product with an optional guaranteed income rider. This data is theoretical only and does not represent the experience on any specific product.\nA data frame with 20,000 rows and 11 columns:\n\npol_num = policy number\nstatus - policy status: Active, Surrender, or Death\nissue_date - issue date\ninc_guar - indicates whether the policy was issued with an income guarantee\nqual - indicates whether the policy was purchased with tax-qualified funds\nage - issue age\nproduct - product: a, b, or c\ngender - M (Male) or F (Female)\nwd_age - Age that withdrawals commence\npremium - Single premium deposit\nterm_date - termination date upon death or surrender\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/sim_data.html#returns",
    "href": "reference/sim_data.html#returns",
    "title": "load_census_dat",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/sim_data.html#returns-1",
    "href": "reference/sim_data.html#returns-1",
    "title": "load_census_dat",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/sim_data.html#returns-2",
    "href": "reference/sim_data.html#returns-2",
    "title": "load_census_dat",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/tools.html",
    "href": "reference/tools.html",
    "title": "tools",
    "section": "",
    "text": "tools\n\n\n\n\n\nName\nDescription\n\n\n\n\narg_match\nVerify that an argument contains one of several allowed values.\n\n\ndocument\nDecorator function factory for adding docstrings\n\n\n\n\n\ntools.arg_match(name, x, allowed)\nVerify that an argument contains one of several allowed values.\nA ValueError exception is raised if the argument value x is not allowed.\n\n\n\n\nname: str Argument name x: Any Argument value allowed: Any A list of allowed argument values\n\n\n\nThis function is inspired by the R language’s arg.match() and rlang::arg_match() functions.\n\n\ntools.document(docstring)\nDecorator function factory for adding docstrings\n\n\n\n\ndocstring: str A docstring to add to a function\n\n\n\nA decorator function that adds a docstring to another function"
  },
  {
    "objectID": "reference/tools.html#functions",
    "href": "reference/tools.html#functions",
    "title": "tools",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\narg_match\nVerify that an argument contains one of several allowed values.\n\n\ndocument\nDecorator function factory for adding docstrings\n\n\n\n\n\ntools.arg_match(name, x, allowed)\nVerify that an argument contains one of several allowed values.\nA ValueError exception is raised if the argument value x is not allowed."
  },
  {
    "objectID": "reference/tools.html#parameters",
    "href": "reference/tools.html#parameters",
    "title": "tools",
    "section": "",
    "text": "name: str Argument name x: Any Argument value allowed: Any A list of allowed argument values"
  },
  {
    "objectID": "reference/tools.html#source",
    "href": "reference/tools.html#source",
    "title": "tools",
    "section": "",
    "text": "This function is inspired by the R language’s arg.match() and rlang::arg_match() functions.\n\n\ntools.document(docstring)\nDecorator function factory for adding docstrings"
  },
  {
    "objectID": "reference/tools.html#parameters-1",
    "href": "reference/tools.html#parameters-1",
    "title": "tools",
    "section": "",
    "text": "docstring: str A docstring to add to a function"
  },
  {
    "objectID": "reference/tools.html#returns",
    "href": "reference/tools.html#returns",
    "title": "tools",
    "section": "",
    "text": "A decorator function that adds a docstring to another function"
  }
]