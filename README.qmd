---
format: gfm
---

<!-- README.md is generated from README.Rmd. Please edit that file -->

# actxps <a href="https://github.com/mattheaphy/actxpspy/"><img src="doc/images/logo.png" align="right" height="138" /></a>
 

The actxps package provides a set of tools to assist with the creation
of actuarial experience studies. Experience studies are used by
actuaries to explore historical experience across blocks of business and
to inform assumption setting for projection models.

- The `ExposedDF` class converts census-level records into policy 
or calendar year exposure records.
- The `exp_stats()` method of `ExposedDF` creates `ExpStats` experience summary
objects containing observed termination rates and claims. Optionally, expected
termination rates, actual-to-expected ratios, and limited fluctuation 
credibility estimates can also be returned.
- The `add_transactions()` method attaches summarized transactions to an 
`ExposedDF` object.
- The `trx_stats()` method of `ExposedDF` creates `TrxStats` transaction summary 
objects containing transaction counts, amounts, frequencies, and utilization.
Optionally, transaction amounts can be expressed as a percentage of one or more
variables to calculate rates or actual-to-expected ratios.
- The `plot()` and `table()` methods of `ExpStats` and `TrxStats`
create plots and tables for reporting.


## Basic usage

The actxps package includes simulated census data for a theoretical 
deferred annuity product with an optional guaranteed income rider. 
The grain of this data is one row *per policy*.

```{python}
#| label: packages
import actxps as xp
import numpy as np

census_dat = xp.load_census_dat()
print(census_dat)
```

Convert census records to exposure records with one row *per policy per year*.

```{python}
#| label: example
exposed_data = xp.ExposedDF(census_dat,
                            end_date="2019-12-31",
                            target_status="Surrender")

exposed_data
```

Create a summary grouped by policy year and the presence of a guaranteed 
income rider.

```{python}
#| label: stats-grouped

exp_res = (exposed_data.
           groupby('pol_yr', 'inc_guar').
           exp_stats())

exp_res

```

Calculate actual-to-expected ratios.

First, attach one or more columns of expected termination rates to the exposure
data. Then, pass these column names to the `expected` argument of `exp_stats()`.

```{python}
#| label: stats-ae

expected_table = np.concatenate((
    np.linspace(0.005, 0.03, 10), 
    np.array([0.2, 0.15]), 
    np.repeat(0.05, 3)
    ))

# using 2 different expected termination rates
exposed_data.data['expected_1'] = \
    expected_table[exposed_data.data.pol_yr - 1]
exposed_data.data['expected_2'] = \
    np.where(exposed_data.data.inc_guar, 0.015, 0.03)

exp_res = (exposed_data.
           groupby('pol_yr', 'inc_guar').
           exp_stats(expected = ["expected_1", "expected_2"]))

exp_res


```

Create visualizations using the `plot()` and `table()` methods.

```{python}
#| label: plots

from plotnine import ggplot, scale_color_manual, labs
from plotnine.themes import theme_light

colors = ["#eb15e4", "#7515eb"]
# theme_set(theme_light())

(exp_res.plot() +
  scale_color_manual(values = colors) + 
  labs(title = "Observed Surrender Rates by Policy Year and Income Guarantee Presence"))


```

```{python}
#| label: table1
#| eval: false

exp_res.table()
```

<br> **Logo**

<a href="https://www.freepik.com/free-vector/shine-old-wooden-chest-realistic-composition-transparent-background-with-vintage-coffer-sparkling-particles_7497397.htm#query=treasure&position=7&from_view=search&track=sph">Image
by macrovector</a> on Freepik