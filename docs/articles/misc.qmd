---
title: "Other functions"
---

This article features functions that are not covered in other articles.

```{python}
#| label: setup
#| include: false
from actxps.tools import _set_actxps_plot_theme
_set_actxps_plot_theme()
```


```{python}
#| label: packages
import actxps as xp
import polars as pl
from datetime import date
```

## Working with aggregate experience data

Seriatim-level policy experience data is often not available for analysis. This is almost always the case with industry studies that contain experience data submitted by multiple parties. In these cases, experience is grouped by a several common policy attributes and aggregated accordingly.

The typical workflow in actxps of `ExposedDF().exp_stats()` for termination studies or `ExposedDF().add_transactions().trx_stats()` for transaction studies doesn't apply if the starting data is aggregated. That is because another party has already gone through the steps of creating exposure records and performing an initial level of aggregation.

Actxps provides two functions designed to work with aggregate experience data.

- For termination studies, `ExpStats.from_DataFrame()` converts a data frame of aggregate experience into an `ExpStats` object.
= For transaction studies, `TrxStats.from_DataFrame()` converts a data frame of aggregate experience into a `TrxStats` object.

Both object classes have a `summary()` method which summarizes experience across any grouping variables passed to the function. The output of `summary()` will always be another `ExpStats` (or `TrxStats`) object, and will look just like the results of `exp_stats()` (or `trx_stats()`). For downstream reporting, summary results can be passed to the visualization methods `plot()` and `table()`.

The `agg_sim_dat` data set contains aggregate experience on a theoretical block of deferred annuity contracts. Below, `ExpStats.from_DataFrame()` is used to convert the data to an `ExpStats`, and `summary()` is called using multiple grouping variables.

```{python}
#| label: agg-exp-1
agg_sim_dat = xp.load_agg_sim_dat()
agg_sim_ExpStats = xp.ExpStats.from_DataFrame(
    agg_sim_dat,
    col_exposure="exposure_n",
    col_claims="claims_n",
    conf_int=True,
    start_date=2005,
    end_date=2019,
    target_status="Surrender")
```

Results summarized by policy year

```{python}
#| label: agg-exp-2
agg_sim_ExpStats.summary('pol_yr')
```

Results summarized by income guarantee presence and product

```{python}
#| label: agg-exp-3
agg_sim_ExpStats.summary('inc_guar', 'product')
```

`ExpStats.from_DataFrame()` and `TrxStats.from_DataFrame()` contain several arguments for optional calculations like confidence intervals, expected values, weighting variables, and more. These arguments mirror the functionality in `exp_stats()` and `trx_stats()`. Both functions also contain multiple arguments for specifying column names associated with required values like exposures and claims.

## Policy duration functions

The `pol_()` family of functions calculates policy years, months, quarters, weeks, or any other arbitrary duration. Each function accepts strings, single dates, or Polars series of dates and issue dates.

**Example**: assume a policy was issued on 2022-05-10 and we are interested in calculating various policy duration values at the end of calendar years 2022-2032.

```{python}
#| label: pol-dur1

dates = pl.date_range(
    date(2022, 12, 31),
    date(2033, 12, 31),
    interval = '1y', 
    eager=True)

# policy years
xp.pol_yr(dates, "2022-05-10")
```

```{python}
#| label: pol-dur2
# policy quarters
xp.pol_qtr(dates, "2022-05-10")
```

```{python}
#| label: pol-dur3
# policy months
xp.pol_mth(dates, "2022-05-10")
```

```{python}
#| label: pol-dur4
# policy weeks
xp.pol_wk(dates, "2022-05-10")
```
