[
  {
    "objectID": "reference/TrxStats.html",
    "href": "reference/TrxStats.html",
    "title": "TrxStats",
    "section": "",
    "text": "trx_stats.TrxStats(self, expo, trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nTransactions study summary class\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\nTypically, the TrxStats class constructor should not be called directly. The preferred method for creating a TrxStats object is to call the trx_stats() method on an ExposedDF object."
  },
  {
    "objectID": "reference/TrxStats.html#parameters",
    "href": "reference/TrxStats.html#parameters",
    "title": "TrxStats",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nexpo\nactxps.expose.ExposedDF\nAn exposed data frame class\nrequired\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property of expo will be used.\nNone\n\n\npercent_of\nlist | str\nA optional list containing column names in the data property of expo to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False, the results will contain output rows for each transaction type. If True, the results will contain aggregated experience across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property of expo containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue"
  },
  {
    "objectID": "reference/TrxStats.html#attributes",
    "href": "reference/TrxStats.html#attributes",
    "title": "TrxStats",
    "section": "Attributes",
    "text": "Attributes\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data framethat includes columns for any grouping variables and transaction types, plus the following: trx_n (the number of unique transactions), trx_amt (total transaction amount), trx_flag (the number of observation periods with non-zero transaction amounts), exposure (total exposures), avg_trx (mean transaction amount {trx_amt / trx_flag}), avg_all (mean transaction amount over all records {trx_amt / exposure}), trx_freq (transaction frequency when a transaction occurs {trx_n / trx_flag}), trx_utilization (transaction utilization per observation period {trx_flag / exposure}). If percent_of is provided, the results will also include the sum of any columns passed to percent_of with non-zero transactions (these columns include the suffix _w_trx. - The sum of any columns passed to percent_of), pct_of_{*}_w_trx (total transactions as a percentage of column {*}_w_trx), pct_of_{*}_all (total transactions as a percentage of column {*})."
  },
  {
    "objectID": "reference/TrxStats.html#notes",
    "href": "reference/TrxStats.html#notes",
    "title": "TrxStats",
    "section": "Notes",
    "text": "Notes\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure .data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property of expo containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False."
  },
  {
    "objectID": "reference/TrxStats.html#methods",
    "href": "reference/TrxStats.html#methods",
    "title": "TrxStats",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nplot\nPlot transaction study results\n\n\nsummary\nRe-summarize transaction experience data\n\n\ntable\nTabular transaction study summary\n\n\n\n\nplot\ntrx_stats.TrxStats.plot(x=None, y='trx_util', color=None, facets=None, mapping=None, scales='fixed', geoms='lines', y_labels=lambda : [f'{v * 100}%' for v in l])\nPlot transaction study results\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nstr\nA column name in data to use as the x variable. If None, x will default to the first grouping variable. If there are no grouping variables, x will be set to “All”.\nNone\n\n\ny\nstr\nA column name in data to use as the y variable.\n'trx_util'\n\n\ncolor\nstr\nA column name in data to use as the color and fill variables. If None, y will default to the second grouping variable. If there are less than two grouping variables, the plot will not use a color aesthetic.\nNone\n\n\nfacets\nlist | str\nFaceting variables in data passed to plotnine.facet_wrap(). If None, grouping variables 3+ will be used (assuming there are more than two grouping variables).\nNone\n\n\nmapping\nplotnine.aes\nAesthetic mapping added to plotnine.ggplot(). NOTE: If mapping is supplied, the x, y, and color arguments will be ignored.\nNone\n\n\nscales\nstr\nThe scales argument passed to plotnine.facet_wrap().\n'fixed'\n\n\ngeoms\n(lines, bars)\nType of geometry. If “lines” is passed, the plot will display lines and points. If “bars”, the plot will display bars.\n'lines'\n\n\ny_labels\ncallable\nLabel function passed to plotnine.scale_y_continuous().\nlambda l: [f\"{v * 100:.1f}%\" for v in l]\n\n\n\n\n\nNotes\nIf no aesthetic map is supplied, the plot will use the first grouping variable in the groups property on the x axis and trx_util on the y axis. In addition, the second grouping variable in groups will be used for color and fill.\nIf no faceting variables are supplied, the plot will use grouping variables 3 and up as facets. These variables are passed into plotnine.facet_wrap().\n\n\n\nsummary\ntrx_stats.TrxStats.summary(*by)\nRe-summarize transaction experience data\nRe-summarize the data while retaining any grouping variables passed to the *by argument.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables in the re-summarized object. Passing nothing is acceptable and will produce a 1-row experience summary.\n()\n\n\n\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\ntrx_res = (expo.groupby('inc_guar', 'pol_yr').\n               trx_stats(percent_of = \"premium\"))\ntrx_res.summary()\ntrx_res.summary('inc_guar')\n\nTransaction study results\n\nGroups: inc_guar\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\nTransactions as % of: premium\n\n\nA DataFrame: 4 x 14\n   inc_guar trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx  \\\n0     False     Base  52939.0     24703   952629.0   48938.0  38.563292   \n1     False    Rider      0.0         0        0.0   48938.0        inf   \n2      True     Base   7561.0      3521   141270.0   75235.0  40.122124   \n3      True    Rider  77321.0     35941  2842729.0   75235.0  79.094321   \n\n     avg_all  trx_freq  trx_util      premium  premium_w_trx  \\\n0  19.466039  2.143019  0.504782   65442415.0     33915201.0   \n1   0.000000       inf  0.000000   65442415.0            0.0   \n2   1.877716  2.147401  0.046800  100927712.0      4940490.0   \n3  37.784661  2.151331  0.477716  100927712.0     47887716.0   \n\n   pct_of_premium_all  pct_of_premium_w_trx  \n0            0.014557              0.028089  \n1            0.000000                   inf  \n2            0.001400              0.028594  \n3            0.028166              0.059362  \n\n\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nactxps.trx_stats.TrxStats\nA new TrxStats object with rows for all the unique groups in *by\n\n\n\n\n\n\ntable\ntrx_stats.TrxStats.table(fontsize=100, decimals=1, colorful=True, color_util='GnBu', color_pct_of='RdBu_r', rename_cols=None)\nTabular transaction study summary\nConvert transaction study results to a presentation-friendly format.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfontsize\nint\nFont size percentage multiplier\n100\n\n\ndecimals\nint\nNumber of decimals to display for percentages\n1\n\n\ncolorful\nbool\nIf True, color will be added to the the observed utilization rate and “percentage of” columns.\nTrue\n\n\ncolor_util\nstr or colormap\nMatplotlib colormap used for the observed utilization rate.\n'GnBu'\n\n\ncolor_pct_of\nstr or colormap\nMatplotlib colormap used for “percentage of” columns.\n'RdBu_r'\n\n\nrename_cols\ndict\nAn optional dictionaryof key-value pairs where keys are column names and values are labels that will appear on the output table. This parameter is useful for renaming grouping variables that will appear under their original variable names if left unchanged.\nNone\n\n\n\n\n\nNotes\nFurther customizations can be added using Pandas Styler functions. See pandas.DataFrame.style for more information.\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.io.pandas.io.formats.pandas.io.formats.style.pandas.io.formats.style.Styler\nA formatted HTML table of the Pandas styler class"
  },
  {
    "objectID": "reference/sim_data.html",
    "href": "reference/sim_data.html",
    "title": "load_census_dat",
    "section": "",
    "text": "datasets.load_census_dat()\nSimulated annuity census data\nSimulated data for a theoretical deferred annuity product with an optional guaranteed income rider. This data is theoretical only and does not represent the experience on any specific product.\nA data frame with 20,000 rows and 11 columns:\n\npol_num = policy number\nstatus - policy status: Active, Surrender, or Death\nissue_date - issue date\ninc_guar - indicates whether the policy was issued with an income guarantee\nqual - indicates whether the policy was purchased with tax-qualified funds\nage - issue age\nproduct - product: a, b, or c\ngender - M (Male) or F (Female)\nwd_age - Age that withdrawals commence\npremium - Single premium deposit\nterm_date - termination date upon death or surrender\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/sim_data.html#returns",
    "href": "reference/sim_data.html#returns",
    "title": "load_census_dat",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/sim_data.html#returns-1",
    "href": "reference/sim_data.html#returns-1",
    "title": "load_census_dat",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/sim_data.html#returns-2",
    "href": "reference/sim_data.html#returns-2",
    "title": "load_census_dat",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/pol_yr.html",
    "href": "reference/pol_yr.html",
    "title": "pol_yr",
    "section": "",
    "text": "dates.pol_yr(dates, issue_date)\nCalculate policy years\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_yr.html#parameters",
    "href": "reference/pol_yr.html#parameters",
    "title": "pol_yr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_yr.html#returns",
    "href": "reference/pol_yr.html#returns",
    "title": "pol_yr",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_yr.html#see-also",
    "href": "reference/pol_yr.html#see-also",
    "title": "pol_yr",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/pol_qtr.html",
    "href": "reference/pol_qtr.html",
    "title": "pol_qtr",
    "section": "",
    "text": "dates.pol_qtr(dates, issue_date)\nCalculate policy quarters\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_qtr.html#parameters",
    "href": "reference/pol_qtr.html#parameters",
    "title": "pol_qtr",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_qtr.html#returns",
    "href": "reference/pol_qtr.html#returns",
    "title": "pol_qtr",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_qtr.html#see-also",
    "href": "reference/pol_qtr.html#see-also",
    "title": "pol_qtr",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/pol_interval.html",
    "href": "reference/pol_interval.html",
    "title": "pol_interval",
    "section": "",
    "text": "dates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_yr, pol_qtr, pol_mth, pol_wk"
  },
  {
    "objectID": "reference/pol_interval.html#parameters",
    "href": "reference/pol_interval.html#parameters",
    "title": "pol_interval",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired"
  },
  {
    "objectID": "reference/pol_interval.html#returns",
    "href": "reference/pol_interval.html#returns",
    "title": "pol_interval",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_interval.html#see-also",
    "href": "reference/pol_interval.html#see-also",
    "title": "pol_interval",
    "section": "",
    "text": "pol_yr, pol_qtr, pol_mth, pol_wk"
  },
  {
    "objectID": "reference/load_withdrawals.html",
    "href": "reference/load_withdrawals.html",
    "title": "load_withdrawals",
    "section": "",
    "text": "load_withdrawals\ndatasets.load_withdrawals()"
  },
  {
    "objectID": "reference/load_scale_g2.html",
    "href": "reference/load_scale_g2.html",
    "title": "load_scale_g2",
    "section": "",
    "text": "datasets.load_scale_g2()"
  },
  {
    "objectID": "reference/load_scale_g2.html#returns",
    "href": "reference/load_scale_g2.html#returns",
    "title": "load_scale_g2",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/load_scale_g2.html#references",
    "href": "reference/load_scale_g2.html#references",
    "title": "load_scale_g2",
    "section": "References",
    "text": "References\n\nhttps://mort.soa.org/\nhttps://www.actuary.org/sites/default/files/files/publications/Payout_Annuity_Report_09-28-11.pdf"
  },
  {
    "objectID": "reference/load_census_dat.html",
    "href": "reference/load_census_dat.html",
    "title": "load_census_dat",
    "section": "",
    "text": "load_census_dat\ndatasets.load_census_dat()"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Function reference",
    "section": "",
    "text": "Create exposure records from census records\n\n\n\nExposedDF\nExposed data frame class\n\n\nExposedDF.from_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\n\n\n\n\nCreate termination study summaries and reports\n\n\n\nExposedDF.exp_stats\nSummarize experience study records\n\n\nExpStats\nExperience study summary class\n\n\n\n\n\n\nAdd transactions to exposure records, create summaries and reports\n\n\n\nExposedDF.add_transactions\nAdd transactions to an experience study\n\n\nTrxStats\nTransactions study summary class\n\n\n\n\n\n\nData sets for testing the functionality of actxps\n\n\n\n\n\nload_toy_census\nToy policy census data\n\n\n\n\n\n\n\n\n\nload_census_dat\nSimulated annuity census data\n\n\nload_withdrawals\nSimulated annuity withdrawal data\n\n\nload_account_vals\nSimulated annuity account value data\n\n\n\n\n\n\n\n\n\nload_qx_iamb\n2012 Individual Annuity Mortality Table\n\n\nload_scale_g2\nProjection Scale G2\n\n\n\n\n\n\n\nSupport functions used for various date calculations\n\n\n\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_yr\nCalculate policy years\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_mth\nCalculate policy months\n\n\npol_wk\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\nfrac_interval\nCalculate fractional years, quarters, months, or weeks between two dates\n\n\nfrac_yr\nCalculate fractional years between two dates\n\n\nfrac_qtr\nCalculate fractional quarters between two dates\n\n\nfrac_mth\nCalculate fractional months between two dates\n\n\nfrac_wk\nCalculate fractional weeks between two dates\n\n\n\n\n\n\n\n\n\nadd_interval\nAdd years, quarters, months, or weeks to a vector of dates\n\n\nadd_yr\nAdd years to a vector of dates\n\n\nadd_qtr\nAdd quarters to a vector of dates\n\n\nadd_mth\nAdd months to a vector of dates\n\n\nadd_wk\nAdd weeks to a vector of dates"
  },
  {
    "objectID": "reference/index.html#exposure-calculations",
    "href": "reference/index.html#exposure-calculations",
    "title": "Function reference",
    "section": "",
    "text": "Create exposure records from census records\n\n\n\nExposedDF\nExposed data frame class\n\n\nExposedDF.from_DataFrame\nCoerce a data frame to an ExposedDF object"
  },
  {
    "objectID": "reference/index.html#termination-studies",
    "href": "reference/index.html#termination-studies",
    "title": "Function reference",
    "section": "",
    "text": "Create termination study summaries and reports\n\n\n\nExposedDF.exp_stats\nSummarize experience study records\n\n\nExpStats\nExperience study summary class"
  },
  {
    "objectID": "reference/index.html#transaction-studies",
    "href": "reference/index.html#transaction-studies",
    "title": "Function reference",
    "section": "",
    "text": "Add transactions to exposure records, create summaries and reports\n\n\n\nExposedDF.add_transactions\nAdd transactions to an experience study\n\n\nTrxStats\nTransactions study summary class"
  },
  {
    "objectID": "reference/index.html#sample-data-sets",
    "href": "reference/index.html#sample-data-sets",
    "title": "Function reference",
    "section": "",
    "text": "Data sets for testing the functionality of actxps\n\n\n\n\n\nload_toy_census\nToy policy census data\n\n\n\n\n\n\n\n\n\nload_census_dat\nSimulated annuity census data\n\n\nload_withdrawals\nSimulated annuity withdrawal data\n\n\nload_account_vals\nSimulated annuity account value data\n\n\n\n\n\n\n\n\n\nload_qx_iamb\n2012 Individual Annuity Mortality Table\n\n\nload_scale_g2\nProjection Scale G2"
  },
  {
    "objectID": "reference/index.html#date-functions",
    "href": "reference/index.html#date-functions",
    "title": "Function reference",
    "section": "",
    "text": "Support functions used for various date calculations\n\n\n\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_yr\nCalculate policy years\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_mth\nCalculate policy months\n\n\npol_wk\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\nfrac_interval\nCalculate fractional years, quarters, months, or weeks between two dates\n\n\nfrac_yr\nCalculate fractional years between two dates\n\n\nfrac_qtr\nCalculate fractional quarters between two dates\n\n\nfrac_mth\nCalculate fractional months between two dates\n\n\nfrac_wk\nCalculate fractional weeks between two dates\n\n\n\n\n\n\n\n\n\nadd_interval\nAdd years, quarters, months, or weeks to a vector of dates\n\n\nadd_yr\nAdd years to a vector of dates\n\n\nadd_qtr\nAdd quarters to a vector of dates\n\n\nadd_mth\nAdd months to a vector of dates\n\n\nadd_wk\nAdd weeks to a vector of dates"
  },
  {
    "objectID": "reference/exp_stats.html",
    "href": "reference/exp_stats.html",
    "title": "exp_stats",
    "section": "",
    "text": "expose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/exp_stats.html#parameters",
    "href": "reference/exp_stats.html#parameters",
    "title": "exp_stats",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05"
  },
  {
    "objectID": "reference/exp_stats.html#notes",
    "href": "reference/exp_stats.html#notes",
    "title": "exp_stats",
    "section": "",
    "text": "If the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims."
  },
  {
    "objectID": "reference/exp_stats.html#returns",
    "href": "reference/exp_stats.html#returns",
    "title": "exp_stats",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected)."
  },
  {
    "objectID": "reference/exp_stats.html#references",
    "href": "reference/exp_stats.html#references",
    "title": "exp_stats",
    "section": "",
    "text": "Herzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/ExposedDF.html",
    "href": "reference/ExposedDF.html",
    "title": "ExposedDF",
    "section": "",
    "text": "expose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records."
  },
  {
    "objectID": "reference/ExposedDF.html#parameters",
    "href": "reference/ExposedDF.html#parameters",
    "title": "ExposedDF",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone"
  },
  {
    "objectID": "reference/ExposedDF.html#attributes",
    "href": "reference/ExposedDF.html#attributes",
    "title": "ExposedDF",
    "section": "Attributes",
    "text": "Attributes\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method."
  },
  {
    "objectID": "reference/ExposedDF.html#notes",
    "href": "reference/ExposedDF.html#notes",
    "title": "ExposedDF",
    "section": "Notes",
    "text": "Notes\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object."
  },
  {
    "objectID": "reference/ExposedDF.html#references",
    "href": "reference/ExposedDF.html#references",
    "title": "ExposedDF",
    "section": "References",
    "text": "References\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf"
  },
  {
    "objectID": "reference/ExposedDF.html#methods",
    "href": "reference/ExposedDF.html#methods",
    "title": "ExposedDF",
    "section": "Methods",
    "text": "Methods\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\nadd_transactions\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\nNotes\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\nA DataFrame: 141,252 x 19\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \\\n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000   \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000   \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000   \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000   \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000   \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984   \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000   \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000   \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000   \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000   \n\n   trx_amt_Base  trx_amt_Rider  trx_n_Base  trx_n_Rider  \n0           0.0            0.0         0.0          0.0  \n1           0.0            0.0         0.0          0.0  \n2           0.0            0.0         0.0          0.0  \n3           0.0            0.0         0.0          0.0  \n4           0.0            0.0         0.0          0.0  \n5           0.0            0.0         0.0          0.0  \n6          25.0            0.0         1.0          0.0  \n7          12.0            0.0         1.0          0.0  \n8           7.0            0.0         1.0          0.0  \n9          52.0            0.0         1.0          0.0  \n\n\n\n\n\nexp_shiny\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\nNotes\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\nExamples\n\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\naccount_vals = xp.load_account_vals()\n\nexpo = xp.ExposedDF(census_dat, \"2019-12-31\",\n                    target_status = \"Surrender\")\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10),\n                                [.2, .15], np.repeat(0.05, 3)))\nexpo.data['expected_1'] = expected_table[expo.data.pol_yr - 1]\nexpo.data['expected_2'] = np.where(expo.data.inc_guar, 0.015, 0.03)\nexpo.add_transactions(withdrawals)\nexpo.data = expo.data.merge(account_vals, how='left',\n                            on=[\"pol_num\", \"pol_date_yr\"])\n\napp = expo.exp_shiny(expected=['expected_1', 'expected_2'])\n\n\n\n\nexp_stats\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\nNotes\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\nReferences\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\nexpose_cm\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\nReturns\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\ngroupby\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\nNotes\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\ntrx_stats\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\nParameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\nNotes\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\nExamples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\nexpo.groupby('inc_guar').trx_stats(percent_of = \"premium\")\nexpo.groupby('inc_guar').trx_stats(percent_of = \"premium\",\n                                   combine_trx = True)\n\nTransaction study results\n\nGroups: inc_guar\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\nTransactions as % of: premium\n\n\nA DataFrame: 2 x 14\n   inc_guar trx_type    trx_n  trx_flag    trx_amt  exposure    avg_trx  \\\n0     False      All  52939.0     24703   952629.0   48938.0  38.563292   \n1      True      All  84882.0     39462  2983999.0   75235.0  75.617024   \n\n     avg_all  trx_freq  trx_util      premium  premium_w_trx  \\\n0  19.466039  2.143019  0.504782   65442415.0     33915201.0   \n1  39.662378  2.150981  0.524517  100927712.0     52828206.0   \n\n   pct_of_premium_all  pct_of_premium_w_trx  \n0            0.014557              0.028089  \n1            0.029566              0.056485  \n\n\n\n\nReturns\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\nungroup\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html",
    "href": "reference/ExposedDF.exp_stats.html",
    "title": "ExposedDF.exp_stats",
    "section": "",
    "text": "expose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#parameters",
    "href": "reference/ExposedDF.exp_stats.html#parameters",
    "title": "ExposedDF.exp_stats",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05"
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#notes",
    "href": "reference/ExposedDF.exp_stats.html#notes",
    "title": "ExposedDF.exp_stats",
    "section": "",
    "text": "If the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims."
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#returns",
    "href": "reference/ExposedDF.exp_stats.html#returns",
    "title": "ExposedDF.exp_stats",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected)."
  },
  {
    "objectID": "reference/ExposedDF.exp_stats.html#references",
    "href": "reference/ExposedDF.exp_stats.html#references",
    "title": "ExposedDF.exp_stats",
    "section": "",
    "text": "Herzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/ExposedDF.expose_pw.html",
    "href": "reference/ExposedDF.expose_pw.html",
    "title": "ExposedDF.expose_pw",
    "section": "",
    "text": "ExposedDF.expose_pw\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_pm.html",
    "href": "reference/ExposedDF.expose_pm.html",
    "title": "ExposedDF.expose_pm",
    "section": "",
    "text": "ExposedDF.expose_pm\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_cw.html",
    "href": "reference/ExposedDF.expose_cw.html",
    "title": "ExposedDF.expose_cw",
    "section": "",
    "text": "ExposedDF.expose_cw\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_cm.html",
    "href": "reference/ExposedDF.expose_cm.html",
    "title": "ExposedDF.expose_cm",
    "section": "",
    "text": "ExposedDF.expose_cm\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures"
  },
  {
    "objectID": "reference/expose.html",
    "href": "reference/expose.html",
    "title": "expose",
    "section": "",
    "text": "expose\n\n\n\n\n\nName\nDescription\n\n\n\n\nExposedDF\nExposed data frame class\n\n\n\n\n\nexpose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\n\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object.\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method.\n\n\n\n\n\n\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.html#classes",
    "href": "reference/expose.html#classes",
    "title": "expose",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nExposedDF\nExposed data frame class\n\n\n\n\n\nexpose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\n\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object.\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method.\n\n\n\n\n\n\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.ExposedDF.groupby.html",
    "href": "reference/expose.ExposedDF.groupby.html",
    "title": "expose.ExposedDF.groupby",
    "section": "",
    "text": "expose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.ExposedDF.groupby.html#parameters",
    "href": "reference/expose.ExposedDF.groupby.html#parameters",
    "title": "expose.ExposedDF.groupby",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()"
  },
  {
    "objectID": "reference/expose.ExposedDF.groupby.html#notes",
    "href": "reference/expose.ExposedDF.groupby.html#notes",
    "title": "expose.ExposedDF.groupby",
    "section": "",
    "text": "This function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/add_durations.html",
    "href": "reference/add_durations.html",
    "title": "add_interval",
    "section": "",
    "text": "dates.add_interval(dates, x, dur_length)\nAdd years, quarters, months, or weeks to a vector of dates\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\npandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nDuration length\n'year'\n\n\n\n\n\n\nnp.ndarray\n\n\n\nadd_yr, add_qtr, add_mth, add_wk"
  },
  {
    "objectID": "reference/add_durations.html#parameters",
    "href": "reference/add_durations.html#parameters",
    "title": "add_interval",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\npandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nDuration length\n'year'"
  },
  {
    "objectID": "reference/add_durations.html#returns",
    "href": "reference/add_durations.html#returns",
    "title": "add_interval",
    "section": "",
    "text": "np.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also",
    "href": "reference/add_durations.html#see-also",
    "title": "add_interval",
    "section": "",
    "text": "add_yr, add_qtr, add_mth, add_wk"
  },
  {
    "objectID": "reference/add_durations.html#parameters-1",
    "href": "reference/add_durations.html#parameters-1",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\npandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-1",
    "href": "reference/add_durations.html#returns-1",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-1",
    "href": "reference/add_durations.html#see-also-1",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "reference/add_durations.html#parameters-2",
    "href": "reference/add_durations.html#parameters-2",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\npandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-2",
    "href": "reference/add_durations.html#returns-2",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-2",
    "href": "reference/add_durations.html#see-also-2",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "reference/add_durations.html#parameters-3",
    "href": "reference/add_durations.html#parameters-3",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\npandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-3",
    "href": "reference/add_durations.html#returns-3",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-3",
    "href": "reference/add_durations.html#see-also-3",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "reference/add_durations.html#parameters-4",
    "href": "reference/add_durations.html#parameters-4",
    "title": "add_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex | pandas.pandas.Series\nDates\nrequired\n\n\nx\npandas.pandas.Series | numpy.numpy.ndarray\nNumber of periods to add\nrequired"
  },
  {
    "objectID": "reference/add_durations.html#returns-4",
    "href": "reference/add_durations.html#returns-4",
    "title": "add_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray"
  },
  {
    "objectID": "reference/add_durations.html#see-also-4",
    "href": "reference/add_durations.html#see-also-4",
    "title": "add_interval",
    "section": "See Also",
    "text": "See Also\nadd_interval"
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Changelog",
    "section": "",
    "text": "Development version of actxps"
  },
  {
    "objectID": "changelog.html#v0.0.0.9000-2023-12-14",
    "href": "changelog.html#v0.0.0.9000-2023-12-14",
    "title": "Changelog",
    "section": "",
    "text": "Development version of actxps"
  },
  {
    "objectID": "articles/transactions.html",
    "href": "articles/transactions.html",
    "title": "Transaction studies",
    "section": "",
    "text": "This article walks through an example of creating a transaction study using the actxps package. Unlike a termination study, transaction studies track events that can occur multiple times over the life of a policy. Often, transactions are expected to reoccur; for example, the utilization of a guaranteed income stream.\n\n#TODO"
  },
  {
    "objectID": "articles/exp_summary.html",
    "href": "articles/exp_summary.html",
    "title": "Experience summaries",
    "section": "",
    "text": "After experience data has been prepared for analysis, the next step is to summarize results. The actxps package’s workhorse function for summarizing termination experience is exp_stats(). This function returns an exp_df object, which is a type of data frame containing additional attributes about the experience study.\n\n#TODO"
  },
  {
    "objectID": "articles/actxps.html",
    "href": "articles/actxps.html",
    "title": "Getting started with actxps",
    "section": "",
    "text": "This article is based on creating a termination study using sample data that comes with the actxps package. For information on transaction studies, see Transactions."
  },
  {
    "objectID": "articles/actxps.html#simulated-data-set",
    "href": "articles/actxps.html#simulated-data-set",
    "title": "Getting started with actxps",
    "section": "Simulated data set",
    "text": "Simulated data set\nThe actxps package includes a data frame containing simulated census data for a theoretical deferred annuity product with an optional guaranteed income rider. The grain of this data is one row per policy.\n\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\ncensus_dat\n\n\n\n\n\n\n\n\npol_num\nstatus\nissue_date\ninc_guar\nqual\nage\nproduct\ngender\nwd_age\npremium\nterm_date\n\n\n\n\n0\n1\nActive\n2014-12-17\nTrue\nFalse\n56\nb\nF\n77\n370.0\nNaT\n\n\n1\n2\nSurrender\n2007-09-24\nFalse\nFalse\n71\na\nF\n71\n708.0\n2019-03-08\n\n\n2\n3\nActive\n2012-10-06\nFalse\nTrue\n62\nb\nF\n63\n466.0\nNaT\n\n\n3\n4\nSurrender\n2005-06-27\nTrue\nTrue\n62\nc\nM\n62\n485.0\n2018-11-29\n\n\n4\n5\nActive\n2019-11-22\nFalse\nFalse\n62\nc\nF\n67\n978.0\nNaT\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n19995\n19996\nActive\n2014-08-11\nTrue\nTrue\n55\nb\nF\n75\n3551.0\nNaT\n\n\n19996\n19997\nSurrender\n2006-11-20\nFalse\nFalse\n68\nc\nF\n77\n336.0\n2017-07-09\n\n\n19997\n19998\nSurrender\n2017-02-20\nTrue\nFalse\n68\nc\nF\n68\n1222.0\n2018-08-03\n\n\n19998\n19999\nActive\n2015-04-11\nFalse\nTrue\n67\na\nM\n78\n2138.0\nNaT\n\n\n19999\n20000\nActive\n2009-04-29\nTrue\nTrue\n72\nc\nM\n72\n5751.0\nNaT\n\n\n\n\n20000 rows × 11 columns\n\n\n\nThe data includes 3 policy statuses: Active, Death, and Surrender.\n\nstatus_counts = census_dat.value_counts('status')\nstatus_counts\n\nstatus\nActive       15212\nSurrender     2972\nDeath         1816\nName: count, dtype: int64\n\n\nLet’s assume we’re interested in calculating the probability of surrender over one policy year. We cannot simply calculate the proportion of policies in a surrendered status as this does not represent an annualized surrender rate.\n\n# incorrect\nstatus_counts / sum(status_counts)\n\nstatus\nActive       0.7606\nSurrender    0.1486\nDeath        0.0908\nName: count, dtype: float64"
  },
  {
    "objectID": "articles/actxps.html#creating-exposed-data",
    "href": "articles/actxps.html#creating-exposed-data",
    "title": "Getting started with actxps",
    "section": "Creating exposed data",
    "text": "Creating exposed data\nIn order to calculate annual surrender rates, we need to break each policy into multiple records. There should be one row per policy per year.\nThe ExposedDF() class is used to perform this transformation.\n\nexposed_data = xp.ExposedDF(census_dat, end_date=\"2019-12-31\",\n                            target_status=\"Surrender\")\n\nexposed_data\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\nA DataFrame: 141,252 x 15\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000  \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000  \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000  \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000  \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000  \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984  \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000  \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000  \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000  \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000  \n\n\nExposedDF objects include an exposure data frame in the data property and some additional attributes related to the experience study.\nNow that the data has been “exposed” by policy year, the observed annual surrender probability can be calculated as:\n\n(sum(exposed_data.data.status == \"Surrender\") /\n    sum(exposed_data.data.exposure))\n\n0.021630955063662638\n\n\nAs a default, ExposedDF() calculates exposures by policy year. This can also be accomplished with the class method ExposedDF.expose_py(). Other implementations of ExposedDF() include:\n\nExposedDF.expose_cy = exposures by calendar year\nExposedDF.expose_cq = exposures by calendar quarter\nExposedDF.expose_cm = exposures by calendar month\nExposedDF.expose_cw = exposures by calendar week\nExposedDF.expose_pq = exposures by policy quarter\nExposedDF.expose_pm = exposures by policy month\nExposedDF.expose_pw = exposures by policy week\n\nSee Exposures for further details on exposure calculations."
  },
  {
    "objectID": "articles/actxps.html#experience-study-summary-function",
    "href": "articles/actxps.html#experience-study-summary-function",
    "title": "Getting started with actxps",
    "section": "Experience study summary function",
    "text": "Experience study summary function\nThe exp_stats() method creates a summary of observed experience data. The output of this function is an ExpStats object.\n\nexposed_data.exp_stats()\n\nExperience study results\n\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 1 x 4\n   n_claims  claims       exposure     q_obs\n0      2869    2869  132633.995658  0.021631\n\n\nSee Experience Summaries for further details on exposure calculations.\n\nGrouped experience data\nExposedDF objects contain a groupby() method that is used to specify grouping variables for downstream methods like exp_stats(). Below, the data is grouped by policy year (pol_yr) and an indicator for the presence of a guaranteed income rider (inc_guar). After exp_stats() is called, the resulting output contains one record for each unique group.\n\nexp_res = (exposed_data.\n    groupby(\"pol_yr\", \"inc_guar\").\n    exp_stats())\n\nexp_res\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 6\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs\n0       1     False        56      56   7719.807740  0.007254\n1       1      True        46      46  11532.404626  0.003989\n2       2     False        92      92   7102.813160  0.012953\n3       2      True        68      68  10611.967258  0.006408\n4       3     False        67      67   6446.916146  0.010393\n5       3      True        57      57   9650.221229  0.005907\n6       4     False       123     123   5798.909986  0.021211\n7       4      True        45      45   8736.954420  0.005151\n8       5     False        97      97   5105.875799  0.018998\n9       5      True        67      67   7809.650445  0.008579\n\n\n\n\nActual-to-expected rates\nTo derive actual-to-expected rates, first attach one or more columns of expected termination rates to the exposure data. Then, pass these column names to the expected argument of exp_stats().\n\nexpected_table = np.concatenate((np.linspace(0.005, 0.03, 10),\n                                 [.2, .15], np.repeat(0.05, 3)))\n\n# using 2 different expected termination rates\nexposed_data.data['expected_1'] = \\\n    expected_table[exposed_data.data.pol_yr - 1]\nexposed_data.data['expected_2'] = \\\n    np.where(exposed_data.data.inc_guar, 0.015, 0.03)\n\nexp_res = (exposed_data.\n           groupby(\"pol_yr\", \"inc_guar\").\n           exp_stats(expected=[\"expected_1\", \"expected_2\"]))\n\nexp_res\n\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 30 x 10\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs  expected_1  \\\n0       1     False        56      56   7719.807740  0.007254    0.005000   \n1       1      True        46      46  11532.404626  0.003989    0.005000   \n2       2     False        92      92   7102.813160  0.012953    0.007778   \n3       2      True        68      68  10611.967258  0.006408    0.007778   \n4       3     False        67      67   6446.916146  0.010393    0.010556   \n5       3      True        57      57   9650.221229  0.005907    0.010556   \n6       4     False       123     123   5798.909986  0.021211    0.013333   \n7       4      True        45      45   8736.954420  0.005151    0.013333   \n8       5     False        97      97   5105.875799  0.018998    0.016111   \n9       5      True        67      67   7809.650445  0.008579    0.016111   \n\n   expected_2  ae_expected_1  ae_expected_2  \n0       0.030       1.450813       0.241802  \n1       0.015       0.797752       0.265917  \n2       0.030       1.665336       0.431754  \n3       0.015       0.823868       0.427191  \n4       0.030       0.984559       0.346419  \n5       0.015       0.559573       0.393773  \n6       0.030       1.590816       0.707029  \n7       0.015       0.386290       0.343369  \n8       0.030       1.179169       0.633257  \n9       0.015       0.532498       0.571942  \n\n\n\n\nplot() and table() methods\nExpStats objects have plot() and table() methods that create visualizations and summary tables. See Data visualizations for full details on these functions.\n\nexp_res.plot()\n\n\n\n\n&lt;Figure Size: (640 x 480)&gt;\n\n\n\n# first 10 rows showed for brevity\nexp_res.table()\n\n\n\n\n\n\nsummary()\nCalling the summary() method on an ExpStats object re-summarizes experience results. This also produces an ExpStats object.\n\nexp_res.summary()\n\nExperience study results\n\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 1 x 8\n   n_claims  claims       exposure     q_obs  expected_1  expected_2  \\\n0      2869    2869  132633.995658  0.021631    0.024242    0.020895   \n\n   ae_expected_1  ae_expected_2  \n0       0.892303       1.035232  \n\n\nIf additional variables are passed to *by, these variables become groups in the re-summarized ExpStats object.\n\nexp_res.summary('inc_guar')\n\nExperience study results\n\nGroups: inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 2 x 9\n   inc_guar  n_claims  claims      exposure     q_obs  expected_1  expected_2  \\\n0     False      1601    1601  52123.245243  0.030716    0.023481       0.030   \n1      True      1268    1268  80510.750415  0.015749    0.024734       0.015   \n\n   ae_expected_1  ae_expected_2  \n0       1.308098       1.023855  \n1       0.636751       1.049963"
  },
  {
    "objectID": "articles/actxps.html#shiny-app",
    "href": "articles/actxps.html#shiny-app",
    "title": "Getting started with actxps",
    "section": "Shiny App",
    "text": "Shiny App\nExposedDF objects have an exp_shiny() method that launches a Shiny app to enable interactive exploration of experience data.\n\nexposed_data.exp_shiny()"
  },
  {
    "objectID": "articles/exposures.html",
    "href": "articles/exposures.html",
    "title": "Exposure calculations",
    "section": "",
    "text": "Census-level data refers to a data set wherein there is one row per policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\n\n#TODO"
  },
  {
    "objectID": "articles/misc.html",
    "href": "articles/misc.html",
    "title": "Other functions",
    "section": "",
    "text": "This article features functions that are not covered in other articles.\n\n#TODO"
  },
  {
    "objectID": "articles/visualizations.html",
    "href": "articles/visualizations.html",
    "title": "Data visualizations",
    "section": "",
    "text": "This article describes the data visualization functions available in the actxps package.\n\n#TODO"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "actxps",
    "section": "",
    "text": "The actxps package provides a set of tools to assist with the creation of actuarial experience studies. Experience studies are used by actuaries to explore historical experience across blocks of business and to inform assumption setting for projection models.\n\nThe ExposedDF class converts census-level records into policy or calendar year exposure records.\nThe exp_stats() method of ExposedDF creates ExpStats experience summary objects containing observed termination rates and claims. Optionally, expected termination rates, actual-to-expected ratios, and limited fluctuation credibility estimates can also be returned.\nThe add_transactions() method attaches summarized transactions to an ExposedDF object.\nThe trx_stats() method of ExposedDF creates TrxStats transaction summary objects containing transaction counts, amounts, frequencies, and utilization. Optionally, transaction amounts can be expressed as a percentage of one or more variables to calculate rates or actual-to-expected ratios.\nThe plot() and table() methods of ExpStats and TrxStats create plots and tables for reporting.\n\n\n\nThe actxps package includes simulated census data for a theoretical deferred annuity product with an optional guaranteed income rider. The grain of this data is one row per policy.\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\nprint(census_dat)\n       pol_num     status issue_date  inc_guar   qual  age product gender  \\\n0            1     Active 2014-12-17      True  False   56       b      F   \n1            2  Surrender 2007-09-24     False  False   71       a      F   \n2            3     Active 2012-10-06     False   True   62       b      F   \n3            4  Surrender 2005-06-27      True   True   62       c      M   \n4            5     Active 2019-11-22     False  False   62       c      F   \n...        ...        ...        ...       ...    ...  ...     ...    ...   \n19995    19996     Active 2014-08-11      True   True   55       b      F   \n19996    19997  Surrender 2006-11-20     False  False   68       c      F   \n19997    19998  Surrender 2017-02-20      True  False   68       c      F   \n19998    19999     Active 2015-04-11     False   True   67       a      M   \n19999    20000     Active 2009-04-29      True   True   72       c      M   \n\n       wd_age  premium  term_date  \n0          77    370.0        NaT  \n1          71    708.0 2019-03-08  \n2          63    466.0        NaT  \n3          62    485.0 2018-11-29  \n4          67    978.0        NaT  \n...       ...      ...        ...  \n19995      75   3551.0        NaT  \n19996      77    336.0 2017-07-09  \n19997      68   1222.0 2018-08-03  \n19998      78   2138.0        NaT  \n19999      72   5751.0        NaT  \n\n[20000 rows x 11 columns]\nConvert census records to exposure records with one row per policy per year.\nexposed_data = xp.ExposedDF(census_dat,\n                            end_date=\"2019-12-31\",\n                            target_status=\"Surrender\")\n\nexposed_data\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\nA DataFrame: 141,252 x 15\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000  \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000  \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000  \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000  \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000  \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984  \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000  \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000  \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000  \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000  \nCreate a summary grouped by policy year and the presence of a guaranteed income rider.\nexp_res = (exposed_data.\n           groupby('pol_yr', 'inc_guar').\n           exp_stats())\n\nexp_res\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 6\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs\n0       1     False        56      56   7719.807740  0.007254\n1       1      True        46      46  11532.404626  0.003989\n2       2     False        92      92   7102.813160  0.012953\n3       2      True        68      68  10611.967258  0.006408\n4       3     False        67      67   6446.916146  0.010393\n5       3      True        57      57   9650.221229  0.005907\n6       4     False       123     123   5798.909986  0.021211\n7       4      True        45      45   8736.954420  0.005151\n8       5     False        97      97   5105.875799  0.018998\n9       5      True        67      67   7809.650445  0.008579\nCalculate actual-to-expected ratios.\nFirst, attach one or more columns of expected termination rates to the exposure data. Then, pass these column names to the expected argument of exp_stats().\nexpected_table = np.concatenate((\n    np.linspace(0.005, 0.03, 10), \n    np.array([0.2, 0.15]), \n    np.repeat(0.05, 3)\n    ))\n\n# using 2 different expected termination rates\nexposed_data.data['expected_1'] = \\\n    expected_table[exposed_data.data.pol_yr - 1]\nexposed_data.data['expected_2'] = \\\n    np.where(exposed_data.data.inc_guar, 0.015, 0.03)\n\nexp_res = (exposed_data.\n           groupby('pol_yr', 'inc_guar').\n           exp_stats(expected = [\"expected_1\", \"expected_2\"]))\n\nexp_res\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 30 x 10\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs  expected_1  \\\n0       1     False        56      56   7719.807740  0.007254    0.005000   \n1       1      True        46      46  11532.404626  0.003989    0.005000   \n2       2     False        92      92   7102.813160  0.012953    0.007778   \n3       2      True        68      68  10611.967258  0.006408    0.007778   \n4       3     False        67      67   6446.916146  0.010393    0.010556   \n5       3      True        57      57   9650.221229  0.005907    0.010556   \n6       4     False       123     123   5798.909986  0.021211    0.013333   \n7       4      True        45      45   8736.954420  0.005151    0.013333   \n8       5     False        97      97   5105.875799  0.018998    0.016111   \n9       5      True        67      67   7809.650445  0.008579    0.016111   \n\n   expected_2  ae_expected_1  ae_expected_2  \n0       0.030       1.450813       0.241802  \n1       0.015       0.797752       0.265917  \n2       0.030       1.665336       0.431754  \n3       0.015       0.823868       0.427191  \n4       0.030       0.984559       0.346419  \n5       0.015       0.559573       0.393773  \n6       0.030       1.590816       0.707029  \n7       0.015       0.386290       0.343369  \n8       0.030       1.179169       0.633257  \n9       0.015       0.532498       0.571942  \nCreate visualizations using the plot() and table() methods.\nfrom plotnine import ggplot, scale_color_manual, labs\nfrom plotnine.themes import theme_light\n\ncolors = [\"#eb15e4\", \"#7515eb\"]\n\n(exp_res.plot() +\n  scale_color_manual(values = colors) + \n  labs(title = \"Observed Surrender Rates by Policy Year and Income Guarantee Presence\") + \n  theme_light())\n\n&lt;Figure Size: (640 x 480)&gt;\nexp_res.table()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\nexpected_1\n\nexpected_2\n\n\n\n\n\n \n \nClaims\nExposures\nqobs\nqexp\nA/E\nqexp\nA/E\n\n\npol_yr\ninc_guar\n \n \n \n \n \n \n \n\n\n1\nFalse\n56\n7,720\n0.7%\n0.5%\n145.1%\n3.0%\n24.2%\n\n\n\nTrue\n46\n11,532\n0.4%\n0.5%\n79.8%\n1.5%\n26.6%\n\n\n2\nFalse\n92\n7,103\n1.3%\n0.8%\n166.5%\n3.0%\n43.2%\n\n\n\nTrue\n68\n10,612\n0.6%\n0.8%\n82.4%\n1.5%\n42.7%\n\n\n3\nFalse\n67\n6,447\n1.0%\n1.1%\n98.5%\n3.0%\n34.6%\n\n\n\nTrue\n57\n9,650\n0.6%\n1.1%\n56.0%\n1.5%\n39.4%\n\n\n4\nFalse\n123\n5,799\n2.1%\n1.3%\n159.1%\n3.0%\n70.7%\n\n\n\nTrue\n45\n8,737\n0.5%\n1.3%\n38.6%\n1.5%\n34.3%\n\n\n5\nFalse\n97\n5,106\n1.9%\n1.6%\n117.9%\n3.0%\n63.3%\n\n\n\nTrue\n67\n7,810\n0.9%\n1.6%\n53.2%\n1.5%\n57.2%\n\n\n6\nFalse\n96\n4,494\n2.1%\n1.9%\n113.1%\n3.0%\n71.2%\n\n\n\nTrue\n56\n6,882\n0.8%\n1.9%\n43.1%\n1.5%\n54.2%\n\n\n7\nFalse\n92\n3,899\n2.4%\n2.2%\n108.9%\n3.0%\n78.7%\n\n\n\nTrue\n72\n6,018\n1.2%\n2.2%\n55.2%\n1.5%\n79.8%\n\n\n8\nFalse\n103\n3,287\n3.1%\n2.4%\n128.2%\n3.0%\n104.4%\n\n\n\nTrue\n87\n5,161\n1.7%\n2.4%\n69.0%\n1.5%\n112.4%\n\n\n9\nFalse\n87\n2,684\n3.2%\n2.7%\n119.1%\n3.0%\n108.0%\n\n\n\nTrue\n94\n4,275\n2.2%\n2.7%\n80.8%\n1.5%\n146.6%\n\n\n10\nFalse\n60\n2,156\n2.8%\n3.0%\n92.7%\n3.0%\n92.7%\n\n\n\nTrue\n92\n3,448\n2.7%\n3.0%\n88.9%\n1.5%\n177.9%\n\n\n11\nFalse\n457\n1,694\n27.0%\n20.0%\n134.9%\n3.0%\n899.5%\n\n\n\nTrue\n347\n2,697\n12.9%\n20.0%\n64.3%\n1.5%\n857.8%\n\n\n12\nFalse\n180\n895\n20.1%\n15.0%\n134.1%\n3.0%\n670.3%\n\n\n\nTrue\n150\n1,768\n8.5%\n15.0%\n56.6%\n1.5%\n565.5%\n\n\n13\nFalse\n50\n503\n9.9%\n5.0%\n198.9%\n3.0%\n331.5%\n\n\n\nTrue\n49\n1,117\n4.4%\n5.0%\n87.7%\n1.5%\n292.4%\n\n\n14\nFalse\n33\n263\n12.6%\n5.0%\n251.3%\n3.0%\n418.9%\n\n\n\nTrue\n29\n609\n4.8%\n5.0%\n95.2%\n1.5%\n317.3%\n\n\n15\nFalse\n8\n74\n10.8%\n5.0%\n216.1%\n3.0%\n360.1%\n\n\n\nTrue\n9\n194\n4.6%\n5.0%\n92.7%\n1.5%\n309.1%\n\n\n\nExperience Study Results\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nLaunch a shiny app to interactively explore experience data.\nexposed_data.exp_shiny(expected=['expected_1', 'expected_2'])\n\n Logo\nImage by macrovector on Freepik"
  },
  {
    "objectID": "index.html#basic-usage",
    "href": "index.html#basic-usage",
    "title": "actxps",
    "section": "",
    "text": "The actxps package includes simulated census data for a theoretical deferred annuity product with an optional guaranteed income rider. The grain of this data is one row per policy.\nimport actxps as xp\nimport numpy as np\n\ncensus_dat = xp.load_census_dat()\nprint(census_dat)\n       pol_num     status issue_date  inc_guar   qual  age product gender  \\\n0            1     Active 2014-12-17      True  False   56       b      F   \n1            2  Surrender 2007-09-24     False  False   71       a      F   \n2            3     Active 2012-10-06     False   True   62       b      F   \n3            4  Surrender 2005-06-27      True   True   62       c      M   \n4            5     Active 2019-11-22     False  False   62       c      F   \n...        ...        ...        ...       ...    ...  ...     ...    ...   \n19995    19996     Active 2014-08-11      True   True   55       b      F   \n19996    19997  Surrender 2006-11-20     False  False   68       c      F   \n19997    19998  Surrender 2017-02-20      True  False   68       c      F   \n19998    19999     Active 2015-04-11     False   True   67       a      M   \n19999    20000     Active 2009-04-29      True   True   72       c      M   \n\n       wd_age  premium  term_date  \n0          77    370.0        NaT  \n1          71    708.0 2019-03-08  \n2          63    466.0        NaT  \n3          62    485.0 2018-11-29  \n4          67    978.0        NaT  \n...       ...      ...        ...  \n19995      75   3551.0        NaT  \n19996      77    336.0 2017-07-09  \n19997      68   1222.0 2018-08-03  \n19998      78   2138.0        NaT  \n19999      72   5751.0        NaT  \n\n[20000 rows x 11 columns]\nConvert census records to exposure records with one row per policy per year.\nexposed_data = xp.ExposedDF(census_dat,\n                            end_date=\"2019-12-31\",\n                            target_status=\"Surrender\")\n\nexposed_data\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\nA DataFrame: 141,252 x 15\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000  \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000  \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000  \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000  \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000  \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984  \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000  \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000  \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000  \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000  \nCreate a summary grouped by policy year and the presence of a guaranteed income rider.\nexp_res = (exposed_data.\n           groupby('pol_yr', 'inc_guar').\n           exp_stats())\n\nexp_res\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\n\n\nA DataFrame: 30 x 6\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs\n0       1     False        56      56   7719.807740  0.007254\n1       1      True        46      46  11532.404626  0.003989\n2       2     False        92      92   7102.813160  0.012953\n3       2      True        68      68  10611.967258  0.006408\n4       3     False        67      67   6446.916146  0.010393\n5       3      True        57      57   9650.221229  0.005907\n6       4     False       123     123   5798.909986  0.021211\n7       4      True        45      45   8736.954420  0.005151\n8       5     False        97      97   5105.875799  0.018998\n9       5      True        67      67   7809.650445  0.008579\nCalculate actual-to-expected ratios.\nFirst, attach one or more columns of expected termination rates to the exposure data. Then, pass these column names to the expected argument of exp_stats().\nexpected_table = np.concatenate((\n    np.linspace(0.005, 0.03, 10), \n    np.array([0.2, 0.15]), \n    np.repeat(0.05, 3)\n    ))\n\n# using 2 different expected termination rates\nexposed_data.data['expected_1'] = \\\n    expected_table[exposed_data.data.pol_yr - 1]\nexposed_data.data['expected_2'] = \\\n    np.where(exposed_data.data.inc_guar, 0.015, 0.03)\n\nexp_res = (exposed_data.\n           groupby('pol_yr', 'inc_guar').\n           exp_stats(expected = [\"expected_1\", \"expected_2\"]))\n\nexp_res\nExperience study results\n\nGroups: pol_yr, inc_guar\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nExpected values: expected_1, expected_2\n\n\nA DataFrame: 30 x 10\n   pol_yr  inc_guar  n_claims  claims      exposure     q_obs  expected_1  \\\n0       1     False        56      56   7719.807740  0.007254    0.005000   \n1       1      True        46      46  11532.404626  0.003989    0.005000   \n2       2     False        92      92   7102.813160  0.012953    0.007778   \n3       2      True        68      68  10611.967258  0.006408    0.007778   \n4       3     False        67      67   6446.916146  0.010393    0.010556   \n5       3      True        57      57   9650.221229  0.005907    0.010556   \n6       4     False       123     123   5798.909986  0.021211    0.013333   \n7       4      True        45      45   8736.954420  0.005151    0.013333   \n8       5     False        97      97   5105.875799  0.018998    0.016111   \n9       5      True        67      67   7809.650445  0.008579    0.016111   \n\n   expected_2  ae_expected_1  ae_expected_2  \n0       0.030       1.450813       0.241802  \n1       0.015       0.797752       0.265917  \n2       0.030       1.665336       0.431754  \n3       0.015       0.823868       0.427191  \n4       0.030       0.984559       0.346419  \n5       0.015       0.559573       0.393773  \n6       0.030       1.590816       0.707029  \n7       0.015       0.386290       0.343369  \n8       0.030       1.179169       0.633257  \n9       0.015       0.532498       0.571942  \nCreate visualizations using the plot() and table() methods.\nfrom plotnine import ggplot, scale_color_manual, labs\nfrom plotnine.themes import theme_light\n\ncolors = [\"#eb15e4\", \"#7515eb\"]\n\n(exp_res.plot() +\n  scale_color_manual(values = colors) + \n  labs(title = \"Observed Surrender Rates by Policy Year and Income Guarantee Presence\") + \n  theme_light())\n\n&lt;Figure Size: (640 x 480)&gt;\nexp_res.table()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n \n\n\n\nexpected_1\n\nexpected_2\n\n\n\n\n\n \n \nClaims\nExposures\nqobs\nqexp\nA/E\nqexp\nA/E\n\n\npol_yr\ninc_guar\n \n \n \n \n \n \n \n\n\n1\nFalse\n56\n7,720\n0.7%\n0.5%\n145.1%\n3.0%\n24.2%\n\n\n\nTrue\n46\n11,532\n0.4%\n0.5%\n79.8%\n1.5%\n26.6%\n\n\n2\nFalse\n92\n7,103\n1.3%\n0.8%\n166.5%\n3.0%\n43.2%\n\n\n\nTrue\n68\n10,612\n0.6%\n0.8%\n82.4%\n1.5%\n42.7%\n\n\n3\nFalse\n67\n6,447\n1.0%\n1.1%\n98.5%\n3.0%\n34.6%\n\n\n\nTrue\n57\n9,650\n0.6%\n1.1%\n56.0%\n1.5%\n39.4%\n\n\n4\nFalse\n123\n5,799\n2.1%\n1.3%\n159.1%\n3.0%\n70.7%\n\n\n\nTrue\n45\n8,737\n0.5%\n1.3%\n38.6%\n1.5%\n34.3%\n\n\n5\nFalse\n97\n5,106\n1.9%\n1.6%\n117.9%\n3.0%\n63.3%\n\n\n\nTrue\n67\n7,810\n0.9%\n1.6%\n53.2%\n1.5%\n57.2%\n\n\n6\nFalse\n96\n4,494\n2.1%\n1.9%\n113.1%\n3.0%\n71.2%\n\n\n\nTrue\n56\n6,882\n0.8%\n1.9%\n43.1%\n1.5%\n54.2%\n\n\n7\nFalse\n92\n3,899\n2.4%\n2.2%\n108.9%\n3.0%\n78.7%\n\n\n\nTrue\n72\n6,018\n1.2%\n2.2%\n55.2%\n1.5%\n79.8%\n\n\n8\nFalse\n103\n3,287\n3.1%\n2.4%\n128.2%\n3.0%\n104.4%\n\n\n\nTrue\n87\n5,161\n1.7%\n2.4%\n69.0%\n1.5%\n112.4%\n\n\n9\nFalse\n87\n2,684\n3.2%\n2.7%\n119.1%\n3.0%\n108.0%\n\n\n\nTrue\n94\n4,275\n2.2%\n2.7%\n80.8%\n1.5%\n146.6%\n\n\n10\nFalse\n60\n2,156\n2.8%\n3.0%\n92.7%\n3.0%\n92.7%\n\n\n\nTrue\n92\n3,448\n2.7%\n3.0%\n88.9%\n1.5%\n177.9%\n\n\n11\nFalse\n457\n1,694\n27.0%\n20.0%\n134.9%\n3.0%\n899.5%\n\n\n\nTrue\n347\n2,697\n12.9%\n20.0%\n64.3%\n1.5%\n857.8%\n\n\n12\nFalse\n180\n895\n20.1%\n15.0%\n134.1%\n3.0%\n670.3%\n\n\n\nTrue\n150\n1,768\n8.5%\n15.0%\n56.6%\n1.5%\n565.5%\n\n\n13\nFalse\n50\n503\n9.9%\n5.0%\n198.9%\n3.0%\n331.5%\n\n\n\nTrue\n49\n1,117\n4.4%\n5.0%\n87.7%\n1.5%\n292.4%\n\n\n14\nFalse\n33\n263\n12.6%\n5.0%\n251.3%\n3.0%\n418.9%\n\n\n\nTrue\n29\n609\n4.8%\n5.0%\n95.2%\n1.5%\n317.3%\n\n\n15\nFalse\n8\n74\n10.8%\n5.0%\n216.1%\n3.0%\n360.1%\n\n\n\nTrue\n9\n194\n4.6%\n5.0%\n92.7%\n1.5%\n309.1%\n\n\n\nExperience Study Results\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nLaunch a shiny app to interactively explore experience data.\nexposed_data.exp_shiny(expected=['expected_1', 'expected_2'])\n\n Logo\nImage by macrovector on Freepik"
  },
  {
    "objectID": "reference/dates.html",
    "href": "reference/dates.html",
    "title": "dates",
    "section": "",
    "text": "dates\n\n\n\n\n\nName\nDescription\n\n\n\n\nlen2\nLength function with non-iterables and strings returning 1\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_mth\nCalculate policy months\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_wk\nCalculate policy weeks\n\n\npol_yr\nCalculate policy years\n\n\n\n\n\ndates.len2(x)\nLength function with non-iterables and strings returning 1\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nAny\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\n1 if x is not iterable or if x is a string. Otherwise, the length of x.\n\n\n\n\n\n\n\ndates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_yr, pol_qtr, pol_mth, pol_wk\n\n\n\n\ndates.pol_mth(dates, issue_date)\nCalculate policy months\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_qtr(dates, issue_date)\nCalculate policy quarters\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_wk(dates, issue_date)\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_yr(dates, issue_date)\nCalculate policy years\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/dates.html#functions",
    "href": "reference/dates.html#functions",
    "title": "dates",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nlen2\nLength function with non-iterables and strings returning 1\n\n\npol_interval\nCalculate policy durations in years, quarters, months, or weeks\n\n\npol_mth\nCalculate policy months\n\n\npol_qtr\nCalculate policy quarters\n\n\npol_wk\nCalculate policy weeks\n\n\npol_yr\nCalculate policy years\n\n\n\n\n\ndates.len2(x)\nLength function with non-iterables and strings returning 1\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nAny\n\nrequired\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nint\n1 if x is not iterable or if x is a string. Otherwise, the length of x.\n\n\n\n\n\n\n\ndates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\nstr\nDuration length. Only applies to pol_interval(). Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_yr, pol_qtr, pol_mth, pol_wk\n\n\n\n\ndates.pol_mth(dates, issue_date)\nCalculate policy months\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_qtr(dates, issue_date)\nCalculate policy quarters\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_wk(dates, issue_date)\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval\n\n\n\n\ndates.pol_yr(dates, issue_date)\nCalculate policy years\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/expose.ExposedDF.html",
    "href": "reference/expose.ExposedDF.html",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "expose.ExposedDF(self, data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', col_pol_num='pol_num', col_status='status', col_issue_date='issue_date', col_term_date='term_date', default_status=None)\nExposed data frame class\nConvert a data frame of census-level records into an object with exposure-level records.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone\n\n\n\n\n\n\nCensus-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object.\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method.\n\n\n\n\n\n\nAtkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/expose.ExposedDF.html#parameters",
    "href": "reference/expose.ExposedDF.html#parameters",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with census-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\n(year, quarter, month, week)\nExposure period length\n'year'\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_issue_date\nstr\nname of the column in data containing the issue date\n'issue_date'\n\n\ncol_term_date\nstr\nname of the column in data containing the termination date\n'term_date'\n\n\ndefault_status\nstr\nDefault active status code\nNone"
  },
  {
    "objectID": "reference/expose.ExposedDF.html#notes",
    "href": "reference/expose.ExposedDF.html#notes",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Census-level data refers to a data set wherein there is one row per unique policy. Exposure-level data expands census-level data such that there is one record per policy per observation period. Observation periods could be any meaningful period of time such as a policy year, policy month, calendar year, calendar quarter, calendar month, etc.\ntarget_status is used in the calculation of exposures. The annual exposure method is applied, which allocates a full period of exposure for any statuses in target_status. For all other statuses, new entrants and exits are partially exposed based on the time elapsed in the observation period. This method is consistent with the Balducci Hypothesis, which assumes that the probability of termination is proportionate to the time elapsed in the observation period. If the annual exposure method isn’t desired, target_status can be ignored. In this case, partial exposures are always applied regardless of status.\ndefault_status is used to indicate the default active status that should be used when exposure records are created. If None, then the first status level will be assumed to be the default active status.\nAlternative class constructors\n\nexpose_py(), expose_pq(), expose_pm(), expose_pw(), expose_cy(), expose_cq(), expose_cm(), expose_cw()\nConvenience constructor functions for specific exposure calculations. The two characters after the underscore describe the exposure type and exposure period, respectively. For exposures types p refers to policy years c refers to calendar years For exposure periods y = years q = quarters m = months w = weeks Each constructor has the same inputs as the __init__ method except that expo_length and cal_expo arguments are prepopulated.\nfrom_DataFrame() Convert a data frame that already has exposure-level records into an ExposedDF object."
  },
  {
    "objectID": "reference/expose.ExposedDF.html#attributes",
    "href": "reference/expose.ExposedDF.html#attributes",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure level records. The results include all existing columns in the original input data plus new columns for exposures and observation periods. Observation periods include counters for policy exposures, start dates, and end dates. Both start dates and end dates are inclusive bounds. For policy year exposures, two observation period columns are returned. Columns beginning with (pol_) are integer policy periods. Columns beginning with (pol_date_) are calendar dates representing anniversary dates, monthiversary dates, etc.\n\n\nend_date, start_date, target_status, cal_expo, expo_length\n\nValues passed on class instantiation. See Parameters for definitions.\n\n\nexposure_type\nstr\nA description of the exposure type that combines the cal_expo and expo_length properties\n\n\ndate_cols\ntuple\nNames of the start and end date columns in data for each exposure period\n\n\ntrx_types\nlist\nList of transaction types that have been attached to data using the add_transactions() method."
  },
  {
    "objectID": "reference/expose.ExposedDF.html#references",
    "href": "reference/expose.ExposedDF.html#references",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Atkinson and McGarry (2016). Experience Study Calculations\nhttps://www.soa.org/49378a/globalassets/assets/files/research/experience-study-calculations.pdf"
  },
  {
    "objectID": "reference/expose.ExposedDF.html#methods",
    "href": "reference/expose.ExposedDF.html#methods",
    "title": "expose.ExposedDF",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nadd_transactions\nAdd transactions to an experience study\n\n\nexp_shiny\nInteractively explore experience data\n\n\nexp_stats\nSummarize experience study records\n\n\nexpose_cm\nCreate an ExposedDF with calendar month exposures\n\n\nexpose_cq\nCreate an ExposedDF with calendar quarter exposures\n\n\nexpose_cw\nCreate an ExposedDF with calendar week exposures\n\n\nexpose_cy\nCreate an ExposedDF with calendar year exposures\n\n\nexpose_pm\nCreate an ExposedDF with policy month exposures\n\n\nexpose_pq\nCreate an ExposedDF with policy quarter exposures\n\n\nexpose_pw\nCreate an ExposedDF with policy week exposures\n\n\nexpose_py\nCreate an ExposedDF with policy year exposures\n\n\nfrom_DataFrame\nCoerce a data frame to an ExposedDF object\n\n\ngroupby\nSet grouping variables for summary methods like exp_stats() and\n\n\ntrx_stats\nSummarize transactions and utilization rates\n\n\nungroup\nRemove all grouping variables for summary methods like exp_stats()\n\n\n\n\n\nexpose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'\n\n\n\n\n\n\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF.\n\n\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\n\n\n\nexpose.ExposedDF.exp_shiny(predictors=None, expected=None, distinct_max=25)\nInteractively explore experience data\nLaunch a shiny application to interactively explore drivers of experience.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\npredictors\nstr | list | numpy.numpy.ndarray\nA character vector of independent variables in the data property to include in the shiny app.\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA character vector of expected values in the data property to include in the shiny app.\nNone\n\n\ndistinct_max\nint\nMaximum number of distinct values allowed for predictors to be included as “Color” and “Facets” grouping variables. This input prevents the drawing of overly complex plots. Default value = 25.\n25\n\n\n\n\n\n\nIf transactions have been attached to the ExposedDF object, the app will contain features for both termination and transaction studies. Otherwise, the app will only support termination studies.\nIf nothing is passed to predictors, all columns names in dat will be used (excluding the policy number, status, termination date, exposure, transaction counts, and transaction amounts columns).\nThe expected argument is optional. As a default, any column names containing the word “expected” are used.\nLayout\nFilters\nThe sidebar contains filtering widgets for all variables passed to the predictors argument.\nStudy options\nGrouping variables\nThis box includes widgets to select grouping variables for summarizing experience. The “x” widget is also used as the x variable in the plot output. Similarly, the “Color” and “Facets” widgets are used for color and facets in the plot. Multiple faceting variables are allowed. For the table output, “x”, “Color”, and “Facets” have no particular meaning beyond the order in which of grouping variables are displayed.\nStudy type\nThis box also includes a toggle to switch between termination studies and transaction studies (if available).\n\nTermination studies: The expected values checkboxes are used to activate and deactivate expected values passed to the expected argument. This impacts the table output directly and the available “y” variables for the plot. If there are no expected values available, this widget will not appear. The “Weight by” widget is used to specify which column, if any, contains weights for summarizing experience.\nTransaction studies: The transaction types checkboxes are used to activate and deactivate transaction types that appear in the plot and table outputs. The available transaction types are taken from the trx_types property of the ExposedDF object. In the plot output, transaction type will always appear as a faceting variable. The “Transactions as % of” selector will expand the list of available “y” variables for the plot and impact the table output directly. Lastly, a checkbox exists that allows for all transaction types to be aggregated into a single group.\n\nOutput\nPlot Tab\nThis tab includes a plot and various options for customization:\n\ny: y variable\nGeometry: plotting geometry\nAdd Smoothing?: activate to plot loess curves\nFree y Scales: activate to enable separate y scales in each plot.\n\nTable\nThis tab includes a data table.\nExport Data\nThis tab includes a download button that will save a copy of the summarized experience data.\nFilter Information\nThis box contains information on the original number of exposure records, the number of records after filters are applied, and the percentage of records retained.\n\n\n\nimport actxps as xp import numpy as np\ncensus_dat = xp.load_census_dat() withdrawals = xp.load_withdrawals() account_vals = xp.load_account_vals()\nexpo = xp.ExposedDF(census_dat, “2019-12-31”, target_status = “Surrender”) expected_table = np.concatenate((np.linspace(0.005, 0.03, 10), [.2, .15], np.repeat(0.05, 3))) expo.data[‘expected_1’] = expected_table[expo.data.pol_yr - 1] expo.data[‘expected_2’] = np.where(expo.data.inc_guar, 0.015, 0.03) expo.add_transactions(withdrawals) expo.data = expo.data.merge(account_vals, how=‘left’, on=[“pol_num”, “pol_date_yr”])\napp = expo.exp_shiny(expected=[‘expected_1’, ‘expected_2’])\n\n\n\n\nexpose.ExposedDF.exp_stats(target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nSummarize experience study records\nCreate a summary of termination experience for a given target status (an ExpStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of column names in the data property with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of the ExposedDF object will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in the data property containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExpStats\nAn ExpStats object with a data property that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\n\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\nexpose.ExposedDF.expose_cm(data, end_date, **kwargs)\nCreate an ExposedDF with calendar month exposures\n\n\n\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures\n\n\n\nexpose.ExposedDF.expose_cw(data, end_date, **kwargs)\nCreate an ExposedDF with calendar week exposures\n\n\n\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures\n\n\n\nexpose.ExposedDF.expose_pm(data, end_date, **kwargs)\nCreate an ExposedDF with policy month exposures\n\n\n\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures\n\n\n\nexpose.ExposedDF.expose_pw(data, end_date, **kwargs)\nCreate an ExposedDF with policy week exposures\n\n\n\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures\n\n\n\nexpose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object.\n\n\n\n\n\n\n\nexpose.ExposedDF.groupby(*by)\nSet grouping variables for summary methods like exp_stats() and trx_stats().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\n\nColumn names in data that will be used as grouping variables\n()\n\n\n\n\n\n\nThis function will not directly apply the DataFrame.groupby() method to the data property. Instead, it will set the groups property of the ExposedDF object. The groups property is subsequently used to group data within summary methods like exp_stats() and trx_stats().\n\n\n\n\nexpose.ExposedDF.trx_stats(trx_types=None, percent_of=None, combine_trx=False, col_exposure='exposure', full_exposures_only=True)\nSummarize transactions and utilization rates\nCreate a summary of transaction counts, amounts, and utilization rates (a TrxStats object).\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_types\nlist or str\nA list of transaction types to include in the output. If None is provided, all available transaction types in the trx_types property will be used.\nNone\n\n\npercent_of\nlist or str\nA list containing column names in the data property to use as denominators in the calculation of utilization rates or actual-to-expected ratios.\nNone\n\n\ncombine_trx\nbool\nIf False (default), the results will contain output rows for each transaction type. If True, the results will contains aggregated results across all transaction types.\nFalse\n\n\ncol_exposure\nstr\nName of the column in the data property containing exposures\n'exposure'\n\n\nfull_exposures_only\nbool\nIf True (default), partially exposed records will be ignored in the results.\nTrue\n\n\n\n\n\n\nIf the ExposedDF object is grouped (see the groupby() method), the returned TrxStats object’s data will contain one row per group.\nAny number of transaction types can be passed to the trx_types argument, however each transaction type must appear in the trx_types property of the ExposedDF object. In addition, trx_stats() expects to see columns named trx_n_{*} (for transaction counts) and trx_amt_{*} for (transaction amounts) for each transaction type. To ensure data is in the appropriate format, use the class method ExposedDF.from_DataFrame() to convert an existing data frame with transactions or use add_transactions() to attach transactions to an existing ExposedDF object.\n“Percentage of” calculations\nThe percent_of argument is optional. If provided, this argument must be list with values corresponding to columns in the data property containing values to use as denominators in the calculation of utilization rates or actual-to-expected ratios. Example usage:\n\nIn a study of partial withdrawal transactions, if percent_of refers to account values, observed withdrawal rates can be determined.\nIn a study of recurring claims, if percent_of refers to a column containing a maximum benefit amount, utilization rates can be determined.\n\nDefault removal of partial exposures\nAs a default, partial exposures are removed from data before summarizing results. This is done to avoid complexity associated with a lopsided skew in the timing of transactions. For example, if transactions can occur on a monthly basis or annually at the beginning of each policy year, partial exposures may not be appropriate. If a policy had an exposure of 0.5 years and was taking withdrawals annually at the beginning of the year, an argument could be made that the exposure should instead be 1 complete year. If the same policy was expected to take withdrawals 9 months into the year, it’s not clear if the exposure should be 0.5 years or 0.5 / 0.75 years. To override this treatment, set full_exposures_only to False.\n\n\n\nimport actxps as xp census = xp.load_census_dat() withdrawals = xp.load_withdrawals() expo = xp.ExposedDF.expose_py(census, “2019-12-31”, target_status = “Surrender”) expo.add_transactions(withdrawals)\nexpo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”) expo.groupby(‘inc_guar’).trx_stats(percent_of = “premium”, combine_trx = True)\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nTrxStats\nA TrxStats object with a data property that includes columns for any grouping variables and transaction types, plus the following: - trx_n: the number of unique transactions. - trx_amt: total transaction amount - trx_flag: the number of observation periods with non-zero transaction amounts. - exposure: total exposures - avg_trx: mean transaction amount (trx_amt / trx_flag) - avg_all: mean transaction amount over all records (trx_amt / exposure) - trx_freq: transaction frequency when a transaction occurs (trx_n / trx_flag) - trx_utilization: transaction utilization per observation period (trx_flag / exposure) If percent_of is provided, the results will also include: - The sum of any columns passed to percent_of with non-zero transactions. These columns include the suffix _w_trx. - The sum of any columns passed to percent_of - pct_of_{*}_w_trx: total transactions as a percentage of column {*}_w_trx - pct_of_{*}_all: total transactions as a percentage of column {*}\n\n\n\n\n\n\n\nexpose.ExposedDF.ungroup()\nRemove all grouping variables for summary methods like exp_stats() and trx_stats()."
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html",
    "href": "reference/ExposedDF.add_transactions.html",
    "title": "ExposedDF.add_transactions",
    "section": "",
    "text": "expose.ExposedDF.add_transactions(trx_data, col_pol_num='pol_num', col_trx_date='trx_date', col_trx_type='trx_type', col_trx_amt='trx_amt')\nAdd transactions to an experience study"
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html#parameters",
    "href": "reference/ExposedDF.add_transactions.html#parameters",
    "title": "ExposedDF.add_transactions",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ntrx_data\npandas.pandas.DataFrame\nA data frame containing transactions details. This data frame must have columns for policy numbers, transaction dates, transaction types, and transaction amounts.\nrequired\n\n\ncol_pol_num\nstr\nName of the column in trx_data containing the policy number\n'pol_num'\n\n\ncol_trx_date\nstr\nName of the column in trx_data containing the transaction date\n'trx_date'\n\n\ncol_trx_type\nstr\nName of the column in trx_data containing the transaction type\n'trx_type'\n\n\ncol_trx_amt\nstr\nName of the column in trx_data containing the transaction amount\n'trx_amt'"
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html#notes",
    "href": "reference/ExposedDF.add_transactions.html#notes",
    "title": "ExposedDF.add_transactions",
    "section": "Notes",
    "text": "Notes\nThis function attaches transactions to an ExposedDF object. Transactions are grouped and summarized such that the number of rows in the data does not change. Two columns are added to the output for each transaction type. These columns have names of the pattern trx_n_{*} (transaction counts) and trx_amt_{*} (transaction_amounts). The trx_types property is updated to include the new transaction types found in trx_data.\nTransactions are associated with the data object by matching transactions dates with exposure dates ranges found in the ExposedDF."
  },
  {
    "objectID": "reference/ExposedDF.add_transactions.html#examples",
    "href": "reference/ExposedDF.add_transactions.html#examples",
    "title": "ExposedDF.add_transactions",
    "section": "Examples",
    "text": "Examples\n\nimport actxps as xp\ncensus = xp.load_census_dat()\nwithdrawals = xp.load_withdrawals()\nexpo = xp.ExposedDF.expose_py(census, \"2019-12-31\",\n                              target_status = \"Surrender\")\nexpo.add_transactions(withdrawals)\n\nExposure data\n\nExposure type: policy_year\nTarget status: Surrender\nStudy range: 1900-01-01 to 2019-12-31\nTransaction types: Base, Rider\n\nA DataFrame: 141,252 x 19\n   pol_num  status issue_date  inc_guar   qual  age product gender  wd_age  \\\n0        1  Active 2014-12-17      True  False   56       b      F      77   \n1        1  Active 2014-12-17      True  False   56       b      F      77   \n2        1  Active 2014-12-17      True  False   56       b      F      77   \n3        1  Active 2014-12-17      True  False   56       b      F      77   \n4        1  Active 2014-12-17      True  False   56       b      F      77   \n5        1  Active 2014-12-17      True  False   56       b      F      77   \n6        2  Active 2007-09-24     False  False   71       a      F      71   \n7        2  Active 2007-09-24     False  False   71       a      F      71   \n8        2  Active 2007-09-24     False  False   71       a      F      71   \n9        2  Active 2007-09-24     False  False   71       a      F      71   \n\n   premium term_date  pol_yr pol_date_yr pol_date_yr_end  exposure  \\\n0    370.0       NaT       1  2014-12-17      2015-12-16  1.000000   \n1    370.0       NaT       2  2015-12-17      2016-12-16  1.000000   \n2    370.0       NaT       3  2016-12-17      2017-12-16  1.000000   \n3    370.0       NaT       4  2017-12-17      2018-12-16  1.000000   \n4    370.0       NaT       5  2018-12-17      2019-12-16  1.000000   \n5    370.0       NaT       6  2019-12-17      2020-12-16  0.040984   \n6    708.0       NaT       1  2007-09-24      2008-09-23  1.000000   \n7    708.0       NaT       2  2008-09-24      2009-09-23  1.000000   \n8    708.0       NaT       3  2009-09-24      2010-09-23  1.000000   \n9    708.0       NaT       4  2010-09-24      2011-09-23  1.000000   \n\n   trx_amt_Base  trx_amt_Rider  trx_n_Base  trx_n_Rider  \n0           0.0            0.0         0.0          0.0  \n1           0.0            0.0         0.0          0.0  \n2           0.0            0.0         0.0          0.0  \n3           0.0            0.0         0.0          0.0  \n4           0.0            0.0         0.0          0.0  \n5           0.0            0.0         0.0          0.0  \n6          25.0            0.0         1.0          0.0  \n7          12.0            0.0         1.0          0.0  \n8           7.0            0.0         1.0          0.0  \n9          52.0            0.0         1.0          0.0"
  },
  {
    "objectID": "reference/ExposedDF.expose_cq.html",
    "href": "reference/ExposedDF.expose_cq.html",
    "title": "ExposedDF.expose_cq",
    "section": "",
    "text": "ExposedDF.expose_cq\nexpose.ExposedDF.expose_cq(data, end_date, **kwargs)\nCreate an ExposedDF with calendar quarter exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_cy.html",
    "href": "reference/ExposedDF.expose_cy.html",
    "title": "ExposedDF.expose_cy",
    "section": "",
    "text": "ExposedDF.expose_cy\nexpose.ExposedDF.expose_cy(data, end_date, **kwargs)\nCreate an ExposedDF with calendar year exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_pq.html",
    "href": "reference/ExposedDF.expose_pq.html",
    "title": "ExposedDF.expose_pq",
    "section": "",
    "text": "ExposedDF.expose_pq\nexpose.ExposedDF.expose_pq(data, end_date, **kwargs)\nCreate an ExposedDF with policy quarter exposures"
  },
  {
    "objectID": "reference/ExposedDF.expose_py.html",
    "href": "reference/ExposedDF.expose_py.html",
    "title": "ExposedDF.expose_py",
    "section": "",
    "text": "ExposedDF.expose_py\nexpose.ExposedDF.expose_py(data, end_date, **kwargs)\nCreate an ExposedDF with policy year exposures"
  },
  {
    "objectID": "reference/ExposedDF.from_DataFrame.html",
    "href": "reference/ExposedDF.from_DataFrame.html",
    "title": "ExposedDF.from_DataFrame",
    "section": "",
    "text": "expose.ExposedDF.from_DataFrame(data, end_date, start_date=datetime(1900, 1, 1), target_status=None, cal_expo=False, expo_length='year', trx_types=None, col_pol_num='pol_num', col_status='status', col_exposure='exposure', col_pol_per=None, cols_dates=None, col_trx_n_='trx_n_', col_trx_amt_='trx_amt_')\nCoerce a data frame to an ExposedDF object\nThe input data frame must have columns for policy numbers, statuses, exposures, policy periods (for policy exposures only), and exposure start / end dates. Optionally, if data has transaction counts and amounts by type, these can be specified without calling add_transactions().\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\"\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object."
  },
  {
    "objectID": "reference/ExposedDF.from_DataFrame.html#parameters",
    "href": "reference/ExposedDF.from_DataFrame.html#parameters",
    "title": "ExposedDF.from_DataFrame",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame with exposure-level records\nrequired\n\n\nend_date\ndatetime.datetime\nExperience study end date\nrequired\n\n\nstart_date\ndatetime.datetime\nExperience study start date\n'1900-01-01'\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nTarget status values\nNone\n\n\ncal_expo\nbool\nSet to True for calendar year exposures. Otherwise policy year exposures are assumed.\nFalse\n\n\nexpo_length\nstr\nExposure period length. Must be ‘year’, ‘quarter’, ‘month’, or ‘week’\n'year'\n\n\ntrx_types\nlist | str\nList containing unique transaction types that have been attached to data. For each value in trx_types, from_DataFrame requires that columns exist in data named trx_n_{*} and trx_amt_{*} containing transaction counts and amounts, respectively. The prefixes “trx_n_” and “trx_amt_” can be overridden using the col_trx_n_ and col_trx_amt_ arguments.\nNone\n\n\ncol_pol_num\nstr\nName of the column in data containing the policy number\n'pol_num'\n\n\ncol_status\nstr\nname of the column in data containing the policy status\n'status'\n\n\ncol_exposure\nstr\nName of the column in data containing exposures.\n'exposure'\n\n\ncol_pol_per\nstr\nName of the column in data containing policy exposure periods. Only necessary if cal_expo is False. The assumed default is either “pol_yr”, “pol_qtr”, “pol_mth”, or “pol_wk” depending on the value of expo_length.\nNone\n\n\ncols_dates\nstr\nNames of the columns in data containing exposure start and end dates. Both date ranges are assumed to be exclusive. The assumed default is of the form A_B. A is “cal” if cal_expo is True or “pol” otherwise. B is either “yr”, “qtr”, “mth”, or “wk” depending on the value of expo_length.\nNone\n\n\ncol_trx_n_\nstr\nPrefix to use for columns containing transaction counts.\n\"trx_n_\"\n\n\ncol_trx_amt_\nstr\nPrefix to use for columns containing transaction amounts.\n\"trx_amt_\""
  },
  {
    "objectID": "reference/ExposedDF.from_DataFrame.html#returns",
    "href": "reference/ExposedDF.from_DataFrame.html#returns",
    "title": "ExposedDF.from_DataFrame",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\nExposedDF\nAn ExposedDF object."
  },
  {
    "objectID": "reference/ExpStats.html",
    "href": "reference/ExpStats.html",
    "title": "ExpStats",
    "section": "",
    "text": "exp_stats.ExpStats(self, expo, target_status=None, expected=None, wt=None, credibility=False, cred_p=0.95, cred_r=0.05)\nExperience study summary class\nCreate a summary of termination experience for a given target status (an ExpStats object).\nTypically, the ExpStats class constructor should not be called directly. The preferred method for creating an ExpStats object is to call the exp_stats() method on an ExposedDF object.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nexpo\nactxps.expose.ExposedDF\nAn exposed data frame class\nrequired\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nsingle string, list, or array of column names in the data property of expo with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property of expo containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame containing experience study summary results that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\ntarget_status, groups, start_date, end_date, expected, wt,\n\n\n\n\ncred_params\n\nMetadata about the experience study inferred from the ExposedDF object (expo) or passed directly to ExpStats.\n\n\n\n\n\n\nIf expo is grouped (see the ExposedDF.groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of expo will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in expo.data containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims.\n\n\n\nHerzog, Thomas (1999). Introduction to Credibility Theory\n\n\n\n\n\n\nName\nDescription\n\n\n\n\nplot\nPlot experience study results\n\n\nsummary\nRe-summarize termination experience data\n\n\ntable\nTabular experience study summary\n\n\n\n\n\nexp_stats.ExpStats.plot(x=None, y='q_obs', color=None, facets=None, mapping=None, scales='fixed', geoms='lines', y_labels=lambda : [f'{v * 100}%' for v in l])\nPlot experience study results\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nstr\nA column name in data to use as the x variable. If None, x will default to the first grouping variable. If there are no grouping variables, x will be set to “All”.\nNone\n\n\ny\nstr\nA column name in data to use as the y variable.\n'q_obs'\n\n\ncolor\nstr\nA column name in data to use as the color and fill variables. If None, y will default to the second grouping variable. If there are less than two grouping variables, the plot will not use a color aesthetic.\nNone\n\n\nfacets\nlist | str\nFaceting variables in data passed to plotnine.facet_wrap(). If None, grouping variables 3+ will be used (assuming there are more than two grouping variables).\nNone\n\n\nmapping\nplotnine.aes\nAesthetic mapping added to plotnine.ggplot(). NOTE: If mapping is supplied, the x, y, and color arguments will be ignored.\nNone\n\n\nscales\nstr\nThe scales argument passed to plotnine.facet_wrap().\n'fixed'\n\n\ngeoms\n(lines, bars)\nType of geometry. If “lines” is passed, the plot will display lines and points. If “bars”, the plot will display bars.\n'lines'\n\n\ny_labels\ncallable\nLabel function passed to plotnine.scale_y_continuous().\nlambda l: [f\"{v * 100:.1f}%\" for v in l]\n\n\n\n\n\n\nIf no aesthetic map is supplied, the plot will use the first grouping variable in the groups property on the x axis and q_obs on the y axis. In addition, the second grouping variable in groups will be used for color and fill.\nIf no faceting variables are supplied, the plot will use grouping variables 3 and up as facets. These variables are passed into plotnine.facet_wrap().\n\n\n\n\nexp_stats.ExpStats.summary(*by)\nRe-summarize termination experience data\nRe-summarize the data while retaining any grouping variables passed to the *by argument.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\ntuple\nQuoted column names in data that will be used as grouping variables in the re-summarized object. Passing nothing is acceptable and will produce a 1-row experience summary.\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nactxps.exp_stats.ExpStats\nA new ExpStats object with rows for all the unique groups in *by\n\n\n\n\n\n\n\nexp_stats.ExpStats.table(fontsize=100, decimals=1, colorful=True, color_q_obs='GnBu', color_ae_='RdBu_r', rename_cols=None)\nTabular experience study summary\nConvert experience study results to a presentation-friendly format.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfontsize\nint\nFont size percentage multiplier\n100\n\n\ndecimals\nint\nNumber of decimals to display for percentages\n1\n\n\ncolorful\nbool\nIf True, color will be added to the the observed decrement rate and actual-to-expected columns.\nTrue\n\n\ncolor_q_obs\nstr or colormap\nMatplotlib colormap used for the observed decrement rate.\n'GnBu'\n\n\ncolor_ae_\nstr or colormap\nMatplotlib colormap used for actual-to-expected rates.\n'RdBu_r'\n\n\nrename_cols\ndict\nA dictionary of key-value pairs where keys are column names and values are labels that will appear on the output table. This parameter is useful for renaming grouping variables that will appear under their original variable names if left unchanged.\nNone\n\n\n\n\n\n\nFurther customizations can be added using Pandas Styler functions. See pd.DataFrame.style for more information.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.io.pandas.io.formats.pandas.io.formats.style.pandas.io.formats.style.Styler\nA formatted HTML table of the Pandas styler class"
  },
  {
    "objectID": "reference/ExpStats.html#parameters",
    "href": "reference/ExpStats.html#parameters",
    "title": "ExpStats",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nexpo\nactxps.expose.ExposedDF\nAn exposed data frame class\nrequired\n\n\ntarget_status\nstr | list | numpy.numpy.ndarray\nA single string, list, or array of target status values\nNone\n\n\nexpected\nstr | list | numpy.numpy.ndarray\nsingle string, list, or array of column names in the data property of expo with expected values\nNone\n\n\nwt\nstr\nName of the column in the data property of expo containing weights to use in the calculation of claims, exposures, and partial credibility.\nNone\n\n\ncredibility\nbool\nWhether the output should include partial credibility weights and credibility-weighted decrement rates.\nFalse\n\n\ncred_p\nfloat\nConfidence level under the Limited Fluctuation credibility method\n0.95\n\n\ncred_r\nfloat\nError tolerance under the Limited Fluctuation credibility method\n0.05"
  },
  {
    "objectID": "reference/ExpStats.html#attributes",
    "href": "reference/ExpStats.html#attributes",
    "title": "ExpStats",
    "section": "",
    "text": "Name\nType\nDescription\n\n\n\n\ndata\npandas.pandas.DataFrame\nA data frame containing experience study summary results that includes columns for any grouping variables, claims, exposures, and observed decrement rates (q_obs). If any values are passed to expected, additional columns will be added for expected decrements and actual-to-expected ratios. If credibility is set to True, additional columns are added for partial credibility and credibility-weighted decrement rates (assuming values are passed to expected).\n\n\ntarget_status, groups, start_date, end_date, expected, wt,\n\n\n\n\ncred_params\n\nMetadata about the experience study inferred from the ExposedDF object (expo) or passed directly to ExpStats."
  },
  {
    "objectID": "reference/ExpStats.html#notes",
    "href": "reference/ExpStats.html#notes",
    "title": "ExpStats",
    "section": "",
    "text": "If expo is grouped (see the ExposedDF.groupby() method), the returned ExpStats object’s data will contain one row per group.\nIf nothing is passed to target_status, the target_status property of expo will be used. If that property is None, all status values except the first level will be assumed. This will produce a warning message.\nExpected values\nThe expected argument is optional. If provided, this argument must be a string, list, or array with values corresponding to columns in expo.data containing expected experience. More than one expected basis can be provided.\nCredibility\nIf credibility is set to True, the output will contain a credibility column equal to the partial credibility estimate under the Limited Fluctuation credibility method (also known as Classical Credibility) assuming a binomial distribution of claims."
  },
  {
    "objectID": "reference/ExpStats.html#see-also",
    "href": "reference/ExpStats.html#see-also",
    "title": "ExpStats",
    "section": "",
    "text": "Herzog, Thomas (1999). Introduction to Credibility Theory"
  },
  {
    "objectID": "reference/ExpStats.html#methods",
    "href": "reference/ExpStats.html#methods",
    "title": "ExpStats",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\nplot\nPlot experience study results\n\n\nsummary\nRe-summarize termination experience data\n\n\ntable\nTabular experience study summary\n\n\n\n\n\nexp_stats.ExpStats.plot(x=None, y='q_obs', color=None, facets=None, mapping=None, scales='fixed', geoms='lines', y_labels=lambda : [f'{v * 100}%' for v in l])\nPlot experience study results\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nx\nstr\nA column name in data to use as the x variable. If None, x will default to the first grouping variable. If there are no grouping variables, x will be set to “All”.\nNone\n\n\ny\nstr\nA column name in data to use as the y variable.\n'q_obs'\n\n\ncolor\nstr\nA column name in data to use as the color and fill variables. If None, y will default to the second grouping variable. If there are less than two grouping variables, the plot will not use a color aesthetic.\nNone\n\n\nfacets\nlist | str\nFaceting variables in data passed to plotnine.facet_wrap(). If None, grouping variables 3+ will be used (assuming there are more than two grouping variables).\nNone\n\n\nmapping\nplotnine.aes\nAesthetic mapping added to plotnine.ggplot(). NOTE: If mapping is supplied, the x, y, and color arguments will be ignored.\nNone\n\n\nscales\nstr\nThe scales argument passed to plotnine.facet_wrap().\n'fixed'\n\n\ngeoms\n(lines, bars)\nType of geometry. If “lines” is passed, the plot will display lines and points. If “bars”, the plot will display bars.\n'lines'\n\n\ny_labels\ncallable\nLabel function passed to plotnine.scale_y_continuous().\nlambda l: [f\"{v * 100:.1f}%\" for v in l]\n\n\n\n\n\n\nIf no aesthetic map is supplied, the plot will use the first grouping variable in the groups property on the x axis and q_obs on the y axis. In addition, the second grouping variable in groups will be used for color and fill.\nIf no faceting variables are supplied, the plot will use grouping variables 3 and up as facets. These variables are passed into plotnine.facet_wrap().\n\n\n\n\nexp_stats.ExpStats.summary(*by)\nRe-summarize termination experience data\nRe-summarize the data while retaining any grouping variables passed to the *by argument.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\n*by\ntuple\nQuoted column names in data that will be used as grouping variables in the re-summarized object. Passing nothing is acceptable and will produce a 1-row experience summary.\n()\n\n\n\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nactxps.exp_stats.ExpStats\nA new ExpStats object with rows for all the unique groups in *by\n\n\n\n\n\n\n\nexp_stats.ExpStats.table(fontsize=100, decimals=1, colorful=True, color_q_obs='GnBu', color_ae_='RdBu_r', rename_cols=None)\nTabular experience study summary\nConvert experience study results to a presentation-friendly format.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nfontsize\nint\nFont size percentage multiplier\n100\n\n\ndecimals\nint\nNumber of decimals to display for percentages\n1\n\n\ncolorful\nbool\nIf True, color will be added to the the observed decrement rate and actual-to-expected columns.\nTrue\n\n\ncolor_q_obs\nstr or colormap\nMatplotlib colormap used for the observed decrement rate.\n'GnBu'\n\n\ncolor_ae_\nstr or colormap\nMatplotlib colormap used for actual-to-expected rates.\n'RdBu_r'\n\n\nrename_cols\ndict\nA dictionary of key-value pairs where keys are column names and values are labels that will appear on the output table. This parameter is useful for renaming grouping variables that will appear under their original variable names if left unchanged.\nNone\n\n\n\n\n\n\nFurther customizations can be added using Pandas Styler functions. See pd.DataFrame.style for more information.\n\n\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.io.pandas.io.formats.pandas.io.formats.style.pandas.io.formats.style.Styler\nA formatted HTML table of the Pandas styler class"
  },
  {
    "objectID": "reference/frac_durations.html",
    "href": "reference/frac_durations.html",
    "title": "frac_interval",
    "section": "",
    "text": "dates.frac_interval(start, end, dur_length)\nCalculate fractional years, quarters, months, or weeks between two dates\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nDuration length\n'year'\n\n\n\n\n\n\nnp.ndarray A vector of floats\n\n\n\nfrac_yr, frac_qtr, frac_mth, frac_wk"
  },
  {
    "objectID": "reference/frac_durations.html#parameters",
    "href": "reference/frac_durations.html#parameters",
    "title": "frac_interval",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nDuration length\n'year'"
  },
  {
    "objectID": "reference/frac_durations.html#returns",
    "href": "reference/frac_durations.html#returns",
    "title": "frac_interval",
    "section": "",
    "text": "np.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also",
    "href": "reference/frac_durations.html#see-also",
    "title": "frac_interval",
    "section": "",
    "text": "frac_yr, frac_qtr, frac_mth, frac_wk"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-1",
    "href": "reference/frac_durations.html#parameters-1",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-1",
    "href": "reference/frac_durations.html#returns-1",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-1",
    "href": "reference/frac_durations.html#see-also-1",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-2",
    "href": "reference/frac_durations.html#parameters-2",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-2",
    "href": "reference/frac_durations.html#returns-2",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-2",
    "href": "reference/frac_durations.html#see-also-2",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-3",
    "href": "reference/frac_durations.html#parameters-3",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-3",
    "href": "reference/frac_durations.html#returns-3",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-3",
    "href": "reference/frac_durations.html#see-also-3",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/frac_durations.html#parameters-4",
    "href": "reference/frac_durations.html#parameters-4",
    "title": "frac_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\nstart\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nStart dates\nrequired\n\n\nend\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nEnd dates\nrequired"
  },
  {
    "objectID": "reference/frac_durations.html#returns-4",
    "href": "reference/frac_durations.html#returns-4",
    "title": "frac_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of floats"
  },
  {
    "objectID": "reference/frac_durations.html#see-also-4",
    "href": "reference/frac_durations.html#see-also-4",
    "title": "frac_interval",
    "section": "See Also",
    "text": "See Also\nfrac_interval"
  },
  {
    "objectID": "reference/load_account_vals.html",
    "href": "reference/load_account_vals.html",
    "title": "load_account_vals",
    "section": "",
    "text": "load_account_vals\ndatasets.load_account_vals()"
  },
  {
    "objectID": "reference/load_qx_iamb.html",
    "href": "reference/load_qx_iamb.html",
    "title": "load_qx_iamb",
    "section": "",
    "text": "datasets.load_qx_iamb()"
  },
  {
    "objectID": "reference/load_qx_iamb.html#returns",
    "href": "reference/load_qx_iamb.html#returns",
    "title": "load_qx_iamb",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/load_qx_iamb.html#references",
    "href": "reference/load_qx_iamb.html#references",
    "title": "load_qx_iamb",
    "section": "References",
    "text": "References\n\nhttps://mort.soa.org/\nhttps://www.actuary.org/sites/default/files/files/publications/Payout_Annuity_Report_09-28-11.pdf"
  },
  {
    "objectID": "reference/load_toy_census.html",
    "href": "reference/load_toy_census.html",
    "title": "load_toy_census",
    "section": "",
    "text": "datasets.load_toy_census()\nToy policy census data\nA tiny dataset containing 3 policies: one active, one terminated due to death, and one terminated due to surrender.\nA data frame with 3 rows and 4 columns:\n- `pol_num` = policy number\n- `status` = policy status\n- `issue_date` = issue date\n- `term_date` = termination date\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/load_toy_census.html#returns",
    "href": "reference/load_toy_census.html#returns",
    "title": "load_toy_census",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/pol_durations.html",
    "href": "reference/pol_durations.html",
    "title": "pol_interval",
    "section": "",
    "text": "dates.pol_interval(dates, issue_date, dur_length)\nCalculate policy durations in years, quarters, months, or weeks\nThis function assumes the first day of each policy year is the anniversary date (or issue date in the first year). The last day of each policy year is the day before the next anniversary date. Analogous rules are used for policy quarters, policy months, and policy weeks.\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nPolicy duration length\n'year'\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_yr, pol_qtr, pol_mth, pol_wk"
  },
  {
    "objectID": "reference/pol_durations.html#parameters",
    "href": "reference/pol_durations.html#parameters",
    "title": "pol_interval",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\ndur_length\n(year, quarter, month, week)\nPolicy duration length\n'year'"
  },
  {
    "objectID": "reference/pol_durations.html#returns",
    "href": "reference/pol_durations.html#returns",
    "title": "pol_interval",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also",
    "href": "reference/pol_durations.html#see-also",
    "title": "pol_interval",
    "section": "",
    "text": "pol_yr, pol_qtr, pol_mth, pol_wk"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-1",
    "href": "reference/pol_durations.html#parameters-1",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-1",
    "href": "reference/pol_durations.html#returns-1",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-1",
    "href": "reference/pol_durations.html#see-also-1",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-2",
    "href": "reference/pol_durations.html#parameters-2",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-2",
    "href": "reference/pol_durations.html#returns-2",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-2",
    "href": "reference/pol_durations.html#see-also-2",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-3",
    "href": "reference/pol_durations.html#parameters-3",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-3",
    "href": "reference/pol_durations.html#returns-3",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-3",
    "href": "reference/pol_durations.html#see-also-3",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_durations.html#parameters-4",
    "href": "reference/pol_durations.html#parameters-4",
    "title": "pol_interval",
    "section": "Parameters",
    "text": "Parameters\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr | datetime.datetime | pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_durations.html#returns-4",
    "href": "reference/pol_durations.html#returns-4",
    "title": "pol_interval",
    "section": "Returns",
    "text": "Returns\nnp.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_durations.html#see-also-4",
    "href": "reference/pol_durations.html#see-also-4",
    "title": "pol_interval",
    "section": "See Also",
    "text": "See Also\npol_interval"
  },
  {
    "objectID": "reference/pol_mth.html",
    "href": "reference/pol_mth.html",
    "title": "pol_mth",
    "section": "",
    "text": "dates.pol_mth(dates, issue_date)\nCalculate policy months\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_mth.html#parameters",
    "href": "reference/pol_mth.html#parameters",
    "title": "pol_mth",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_mth.html#returns",
    "href": "reference/pol_mth.html#returns",
    "title": "pol_mth",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_mth.html#see-also",
    "href": "reference/pol_mth.html#see-also",
    "title": "pol_mth",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/pol_wk.html",
    "href": "reference/pol_wk.html",
    "title": "pol_wk",
    "section": "",
    "text": "dates.pol_wk(dates, issue_date)\nCalculate policy weeks\n\n\n\n\n\n\n\n\n\n\n\nName\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired\n\n\n\n\n\n\nnp.ndarray A vector of integers\n\n\n\npol_interval"
  },
  {
    "objectID": "reference/pol_wk.html#parameters",
    "href": "reference/pol_wk.html#parameters",
    "title": "pol_wk",
    "section": "",
    "text": "Name\nType\nDescription\nDefault\n\n\n\n\ndates\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nDate(s)\nrequired\n\n\nissue_date\nstr or datetime.datetime or pandas.core.indexes.datetimes.DatetimeIndex\nIssue date(s)\nrequired"
  },
  {
    "objectID": "reference/pol_wk.html#returns",
    "href": "reference/pol_wk.html#returns",
    "title": "pol_wk",
    "section": "",
    "text": "np.ndarray A vector of integers"
  },
  {
    "objectID": "reference/pol_wk.html#see-also",
    "href": "reference/pol_wk.html#see-also",
    "title": "pol_wk",
    "section": "",
    "text": "pol_interval"
  },
  {
    "objectID": "reference/qx_iamb.html",
    "href": "reference/qx_iamb.html",
    "title": "load_qx_iamb",
    "section": "",
    "text": "datasets.load_qx_iamb()\n2012 Individual Annuity Mortality Table\nMortality rates from the 2012 Individual Annuity Mortality Basic (IAMB) Table and Projection Scale G2.\nA data frame with 242 rows and 3 columns:\n\nage - attained age\nqx - mortality rate\ngender - Female or Male\n\n\n\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame\n\n\n\n\n\n\n\n\nmort.soa.org\n2012 Individual Annuity Reserving Table"
  },
  {
    "objectID": "reference/qx_iamb.html#returns",
    "href": "reference/qx_iamb.html#returns",
    "title": "load_qx_iamb",
    "section": "",
    "text": "Type\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/qx_iamb.html#references",
    "href": "reference/qx_iamb.html#references",
    "title": "load_qx_iamb",
    "section": "",
    "text": "mort.soa.org\n2012 Individual Annuity Reserving Table"
  },
  {
    "objectID": "reference/qx_iamb.html#returns-1",
    "href": "reference/qx_iamb.html#returns-1",
    "title": "load_qx_iamb",
    "section": "Returns",
    "text": "Returns\n\n\n\nType\nDescription\n\n\n\n\npandas.pandas.DataFrame"
  },
  {
    "objectID": "reference/qx_iamb.html#references-1",
    "href": "reference/qx_iamb.html#references-1",
    "title": "load_qx_iamb",
    "section": "References",
    "text": "References\n\nmort.soa.org\n2012 Individual Annuity Reserving Table"
  },
  {
    "objectID": "reference/tools.html",
    "href": "reference/tools.html",
    "title": "tools",
    "section": "",
    "text": "tools\n\n\n\n\n\nName\nDescription\n\n\n\n\narg_match\nVerify that an argument contains one of several allowed values.\n\n\ndocument\nDecorator function factory for adding docstrings\n\n\n\n\n\ntools.arg_match(name, x, allowed)\nVerify that an argument contains one of several allowed values.\nA ValueError exception is raised if the argument value x is not allowed.\n\n\n\n\nname: str Argument name x: Any Argument value allowed: Any A list of allowed argument values\n\n\n\nThis function is inspired by the R language’s arg.match() and rlang::arg_match() functions.\n\n\ntools.document(docstring)\nDecorator function factory for adding docstrings\n\n\n\n\ndocstring: str A docstring to add to a function\n\n\n\nA decorator function that adds a docstring to another function"
  },
  {
    "objectID": "reference/tools.html#functions",
    "href": "reference/tools.html#functions",
    "title": "tools",
    "section": "",
    "text": "Name\nDescription\n\n\n\n\narg_match\nVerify that an argument contains one of several allowed values.\n\n\ndocument\nDecorator function factory for adding docstrings\n\n\n\n\n\ntools.arg_match(name, x, allowed)\nVerify that an argument contains one of several allowed values.\nA ValueError exception is raised if the argument value x is not allowed."
  },
  {
    "objectID": "reference/tools.html#parameters",
    "href": "reference/tools.html#parameters",
    "title": "tools",
    "section": "",
    "text": "name: str Argument name x: Any Argument value allowed: Any A list of allowed argument values"
  },
  {
    "objectID": "reference/tools.html#source",
    "href": "reference/tools.html#source",
    "title": "tools",
    "section": "",
    "text": "This function is inspired by the R language’s arg.match() and rlang::arg_match() functions.\n\n\ntools.document(docstring)\nDecorator function factory for adding docstrings"
  },
  {
    "objectID": "reference/tools.html#parameters-1",
    "href": "reference/tools.html#parameters-1",
    "title": "tools",
    "section": "",
    "text": "docstring: str A docstring to add to a function"
  },
  {
    "objectID": "reference/tools.html#returns",
    "href": "reference/tools.html#returns",
    "title": "tools",
    "section": "",
    "text": "A decorator function that adds a docstring to another function"
  }
]